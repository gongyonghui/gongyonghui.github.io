<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Luuman's Blog]]></title>
  <subtitle><![CDATA[因为有了危机感，所以会义无反顾。]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://luuman.github.io/"/>
  <updated>2017-02-25T08:29:06.530Z</updated>
  <id>http://luuman.github.io/</id>
  
  <author>
    <name><![CDATA[世平阜康]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[React初探]]></title>
    <link href="http://luuman.github.io/2017/02/14/FrontFrame/React/React/"/>
    <id>http://luuman.github.io/2017/02/14/FrontFrame/React/React/</id>
    <published>2017-02-14T10:29:00.000Z</published>
    <updated>2017-02-25T08:29:06.530Z</updated>
    <content type="html"><![CDATA[<h2 id="u6982_u51B5"><a href="#u6982_u51B5" class="headerlink" title="概况"></a>概况</h2><p>React 起源于 Facebook 的内部F8项目，用来架设 Instagram 的网站，并于 2013 年 5 月开源。<br>React主要用于构建UI，很多人认为 React 是 MVC 中的 V（视图）。<br>React 拥有较高的性能，代码逻辑非常简单，越来越多的人已开始关注和使用它。E6语法。</p>
<h3 id="React__u7279_u70B9"><a href="#React__u7279_u70B9" class="headerlink" title="React 特点"></a>React 特点</h3><ol>
<li>声明式设计 −React采用声明范式，可以轻松描述应用。</li>
<li>高效 −React通过对DOM的模拟，最大限度地减少与DOM的交互。</li>
<li>灵活 −React可以与已知的库或框架很好地配合。</li>
<li>JSX − JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX ，但我们建议使用它。</li>
<li>组件 − 通过 React 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。</li>
<li>单向响应的数据流 − React 实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单。</li>
</ol>
<ul>
<li><a href="http://facebook.github.io/react/" target="_blank" rel="external">官网地址</a><a id="more"></a>
</li>
</ul>
<h2 id="u7B80_u5355Demo"><a href="#u7B80_u5355Demo" class="headerlink" title="简单Demo"></a>简单Demo</h2><figure class="highlight xml" data-lang=" xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">title</span>&gt;</span>Hello React!<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"http://static.runoob.com/assets/react/react-0.14.7/build/react.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"http://static.runoob.com/assets/react/react-0.14.7/build/react-dom.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"http://static.runoob.com/assets/react/browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"example"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/babel"</span>&gt;</span><span class="handlebars"><span class="xml"></span><br><span class="line">		ReactDOM.render(</span><br><span class="line">			<span class="tag">&lt;<span class="title">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="title">h1</span>&gt;</span>,</span><br><span class="line">			document.getElementById('example')</span><br><span class="line">		);</span><br><span class="line">	</span></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="u5F15_u5165_u4F9D_u8D56"><a href="#u5F15_u5165_u4F9D_u8D56" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>实例中我们引入了三个库： react.min.js 、react-dom.min.js 和 browser.min.js：<br>react.min.js - React 的核心库<br>react-dom.min.js - 提供与 DOM 相关的功能<br>browser.min.js - 用于将 JSX 语法转为 JavaScript 语法</p>
<h3 id="React_u4EE3_u7801"><a href="#React_u4EE3_u7801" class="headerlink" title="React代码"></a>React代码</h3><figure class="highlight xml" data-lang=" xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/babel"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="React_JSX_u8BED_u6CD5"><a href="#React_JSX_u8BED_u6CD5" class="headerlink" title="React JSX语法"></a>React JSX语法</h2><p>React 使用 JSX 来替代常规的 JavaScript。JSX 是一个看起来很像 XML 的 JavaScript 语法扩展。我们不需要一定使用 JSX，但它有以下优点：</p>
<blockquote>
<p>JSX 执行更快，因为它在编译为 JavaScript 代码后进行了优化。<br>它是类型安全的，在编译过程中就能发现错误。<br>使用 JSX 编写模板更加简单快速。</p>
</blockquote>
<h3 id="u7B80_u5355_u5D4C_u5957_u5143_u7D20"><a href="#u7B80_u5355_u5D4C_u5957_u5143_u7D20" class="headerlink" title="简单嵌套元素"></a>简单嵌套元素</h3><p>JSX 看起来类似 HTML ，我们可以看下实例:<br>ReactDOM.render方法接受两个参数：<br>一个虚拟 DOM 节点和一个真实 DOM 节点，作用是将虚拟 DOM 挂载到真实 DOM。</p>
<h4 id="u5B9E_u4F8B_uFF1AHello_2C_world_21"><a href="#u5B9E_u4F8B_uFF1AHello_2C_world_21" class="headerlink" title="实例：Hello, world!"></a>实例：Hello, world!</h4><figure class="highlight xml" data-lang=" xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(content,element);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="tag">&lt;<span class="title">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="title">h1</span>&gt;</span>,document.getElementById('example'));</span><br></pre></td></tr></table></figure>
<p><a href="demo/index1.html">index1</a></p>
<h3 id="u590D_u6742_u5D4C_u5957_u5143_u7D20"><a href="#u590D_u6742_u5D4C_u5957_u5143_u7D20" class="headerlink" title="复杂嵌套元素"></a>复杂嵌套元素</h3><p>我们可以在以上代码中嵌套多个 HTML 标签，需要使用一个 div 元素包裹它，实例中的 p 元素添加了自定义属性 data-myattribute，添加自定义属性需要使用 data- 前缀。</p>
<h4 id="u5B9E_u4F8B_uFF1A_u6587_u5B57"><a href="#u5B9E_u4F8B_uFF1A_u6587_u5B57" class="headerlink" title="实例：文字"></a>实例：文字</h4><figure class="highlight xml" data-lang=" xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(</span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">h1</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">h2</span>&gt;</span>欢迎学习 React<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">p</span> <span class="attribute">data-myattribute</span> = "<span class="attribute">somevalue</span>"&gt;</span>这是一个很不错的 JavaScript 库!<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>,</span><br><span class="line">    mountNode</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><a href="demo/index2.html">index2</a></p>
<h3 id="JavaScript__u8868_u8FBE_u5F0F"><a href="#JavaScript__u8868_u8FBE_u5F0F" class="headerlink" title="JavaScript 表达式"></a>JavaScript 表达式</h3><p>我们可以在 JSX 中使用 JavaScript 表达式。表达式写在花括号 {} 中。实例如下：</p>
<h4 id="u5B9E_u4F8B_uFF1A_u8BA1_u7B97"><a href="#u5B9E_u4F8B_uFF1A_u8BA1_u7B97" class="headerlink" title="实例：计算"></a>实例：计算</h4><figure class="highlight xml" data-lang=" xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(</span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;<span class="title">h1</span>&gt;</span>&#123;1+1&#125;<span class="tag">&lt;/<span class="title">h1</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>,mountNode</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><a href="demo/index3.html">index3</a></p>
<blockquote>
<p>判断语句</p>
</blockquote>
<p>在 JSX 中不能使用 if else 语句，但可以使用 conditional (三元运算) 表达式来替代。以下实例中如果变量 i 等于 1 浏览器将输出 true, 如果修改 i 的值，则会输出 false.</p>
<h4 id="u5B9E_u4F8B_uFF1A_u5224_u65AD"><a href="#u5B9E_u4F8B_uFF1A_u5224_u65AD" class="headerlink" title="实例：判断"></a>实例：判断</h4><figure class="highlight xml" data-lang=" xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const i = 1;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">h1</span>&gt;</span>&#123;i == 1 ? 'True!' : 'False'&#125;<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>,</span><br><span class="line">    mountNode</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><a href="demo/index4.html">index4</a></p>
<h3 id="u6837_u5F0F"><a href="#u6837_u5F0F" class="headerlink" title="样式"></a>样式</h3><p>React 推荐使用内联样式。我们可以使用 camelCase 语法来设置内联样式. React 会在指定元素数字后自动添加 px 。以下实例演示了为 h1 元素添加 myStyle 内联样式：</p>
<h4 id="u5B9E_u4F8B_uFF1ACSS_u6837_u5F0F"><a href="#u5B9E_u4F8B_uFF1ACSS_u6837_u5F0F" class="headerlink" title="实例：CSS样式"></a>实例：CSS样式</h4><figure class="highlight handlebars" data-lang=" handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">const myStyle = &#123;</span><br><span class="line">    fontSize: 100,</span><br><span class="line">    lineHeight: '30px',</span><br><span class="line">    color: '#FF0000'</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    <span class="tag">&lt;<span class="title">h1</span> <span class="attribute">style</span> = &#123;<span class="attribute">myStyle</span>&#125;&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="title">h1</span>&gt;</span>,mountNode</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="tag">&lt;<span class="title">h1</span> <span class="attribute">style</span> = </span></span><span class="expression">&#123;&#123;<span class="variable">fontSize</span>: 100,<span class="variable">lineHeight</span>: '30<span class="variable">px</span>',<span class="variable">color</span>: '<span class="begin-block">#FF</span>0000'&#125;&#125;</span><span class="xml"><span class="tag">&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="title">h1</span>&gt;</span>,mountNode);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="tag">&lt;<span class="title">h1</span> <span class="attribute">className</span> = '<span class="attribute">class_name</span>'&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="title">h1</span>&gt;</span>,mountNode);</span></span><br></pre></td></tr></table></figure>
<p><a href="demo/index5.html">index5</a></p>
<h3 id="u6CE8_u91CA"><a href="#u6CE8_u91CA" class="headerlink" title="注释"></a>注释</h3><p>注释需要写在花括号中，实例如下：</p>
<h3 id="u5B9E_u4F8B_uFF1A_u6CE8_u91CA"><a href="#u5B9E_u4F8B_uFF1A_u6CE8_u91CA" class="headerlink" title="实例：注释"></a>实例：注释</h3><figure class="highlight gherkin" data-lang=" gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(</span><br><span class="line">    <span class="variable">&lt;div&gt;</span></span><br><span class="line">    <span class="variable">&lt;h1&gt;</span>菜鸟教程<span class="variable">&lt;/h1&gt;</span></span><br><span class="line">    &#123;/<span class="keyword">*</span>注释...<span class="keyword">*</span>/&#125;</span><br><span class="line">     <span class="variable">&lt;/div&gt;</span>,mountNode</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="React-Component_u7EC4_u4EF6"><a href="#React-Component_u7EC4_u4EF6" class="headerlink" title="React.Component组件"></a>React.Component组件</h2><h3 id="u57FA_u7840_u8BED_u6CD5"><a href="#u57FA_u7840_u8BED_u6CD5" class="headerlink" title="基础语法"></a>基础语法</h3><h3 id="HTML__u6807_u7B7E_vs-_React__u7EC4_u4EF6"><a href="#HTML__u6807_u7B7E_vs-_React__u7EC4_u4EF6" class="headerlink" title="HTML 标签 vs. React 组件"></a>HTML 标签 vs. React 组件</h3><p>React 可以渲染 HTML 标签 (strings) 或 React 组件 (classes)。要渲染 HTML 标签，只需在 JSX 里使用小写字母的标签名。<br>要渲染 React 组件，只需创建一个大写字母开头的本地变量。</p>
<h4 id="u5B9E_u4F8B_uFF1A_u521B_u5EFA_u7EC4_u4EF6"><a href="#u5B9E_u4F8B_uFF1A_u521B_u5EFA_u7EC4_u4EF6" class="headerlink" title="实例：创建组件"></a>实例：创建组件</h4><figure class="highlight scala" data-lang=" scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DivElement</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">React</span>.<span class="title">Component</span>&#123;</span></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">"foo"</span>&gt;arr&lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">DivElement</span> /&gt;, mountNode);</span><br></pre></td></tr></table></figure>
<h4 id="u5B9E_u4F8B_uFF1A_u7EC4_u4EF6_u5D4C_u5957"><a href="#u5B9E_u4F8B_uFF1A_u7EC4_u4EF6_u5D4C_u5957" class="headerlink" title="实例：组件嵌套"></a>实例：组件嵌套</h4><figure class="highlight scala" data-lang=" scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">React</span>.<span class="title">Component</span>&#123;</span></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> &lt;div className=<span class="string">"MyComponent"</span>&gt;arr&lt;/div&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DivElement</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">React</span>.<span class="title">Component</span>&#123;</span></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> &lt;<span class="type">MyComponent</span> /&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">DivElement</span> /&gt;, mountNode);</span><br></pre></td></tr></table></figure>
<p>React 的 JSX 使用大、小写的约定来区分本地组件的类和 HTML 标签。</p>
<blockquote>
<p>注意:<br>由于 JSX 就是 JavaScript，一些标识符像 class 和 for 不建议作为 XML 属性名。作为替代，React DOM 使用 className 和 htmlFor 来做对应的属性。</p>
</blockquote>
<h4 id="u5B9E_u4F8B_uFF1A_u7EC4_u4EF6_u8BED_u6CD5"><a href="#u5B9E_u4F8B_uFF1A_u7EC4_u4EF6_u8BED_u6CD5" class="headerlink" title="实例：组件语法"></a>实例：组件语法</h4><figure class="highlight scala" data-lang=" scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">React</span>.<span class="title">Component</span>&#123;</span></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> &lt;div className=<span class="string">"HelloMessage"</span>&gt;arr&lt;/div&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">React</span>.<span class="title">Component</span>&#123;</span></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">"HelloMessage"</span>&gt;arr&lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>React.Component方法用于生成一个组件类 HelloMessage。<hellomessage> 实例组件类并输出信息。</hellomessage></p>
<blockquote>
<p>注意：原生 HTML 元素名以小写字母开头，而自定义的 React 类名以大写字母开头，比如 HelloMessage 不能写成 helloMessage。除此之外还需要注意组件类只能包含一个顶层标签，否则也会报错。<br>如果我们需要向组件传递参数，可以使用 this.props 对象,实例如下：</p>
</blockquote>
<h4 id="u5B9E_u4F8B_uFF1A_u83B7_u53D6_u7236_u5143_u7D20_u7684_u503C"><a href="#u5B9E_u4F8B_uFF1A_u83B7_u53D6_u7236_u5143_u7D20_u7684_u503C" class="headerlink" title="实例：获取父元素的值"></a>实例：获取父元素的值</h4><figure class="highlight scala" data-lang=" scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DivElement</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">React</span>.<span class="title">Component</span>&#123;</span></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">"foo"</span>&gt;&#123;<span class="keyword">this</span>.props.name&#125;&lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">DivElement</span> name=<span class="string">"Runoob"</span> /&gt;, mountNode);</span><br></pre></td></tr></table></figure>
<p>以上实例中 name 属性通过 this.props.name 来获取（自身的数字）。<br>注意，在添加属性时， class 属性需要写成 className ，for 属性需要写成 htmlFor ，这是因为 class 和 for 是 JavaScript 的保留字。</p>
<h3 id="u590D_u5408_u7EC4_u4EF6"><a href="#u590D_u5408_u7EC4_u4EF6" class="headerlink" title="复合组件"></a>复合组件</h3><p>通过创建多个组件来合成一个组件，即把组件的不同功能点进行分离。<br>以下实例我们实现了输出网站名字和网址的组件：</p>
<h4 id="u5B9E_u4F8B_uFF1A_u94FE_u63A5"><a href="#u5B9E_u4F8B_uFF1A_u94FE_u63A5" class="headerlink" title="实例：链接"></a>实例：链接</h4><figure class="highlight scala" data-lang=" scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebSite</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">React</span>.<span class="title">Component</span>&#123;</span></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=&#123;<span class="keyword">this</span>.props.name&#125;&gt;&lt;<span class="type">Name</span> name=&#123;<span class="keyword">this</span>.props.name&#125; /&gt;&lt;<span class="type">Link</span> site=&#123;<span class="keyword">this</span>.props.site&#125; /&gt;&lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">React</span>.<span class="title">Component</span>&#123;</span></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;h1&gt;&#123;<span class="keyword">this</span>.props.name&#125;&lt;/h1&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Link</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">React</span>.<span class="title">Component</span>&#123;</span></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;a href=&#123;<span class="keyword">this</span>.props.site&#125;&gt;&#123;<span class="keyword">this</span>.props.site&#125;&lt;/a&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">WebSite</span> name=<span class="string">"菜鸟教程"</span> site=<span class="string">" http://www.runoob.com"</span> /&gt;, mountNode);</span><br></pre></td></tr></table></figure>
<h2 id="React_State_28_u72B6_u6001_29"><a href="#React_State_28_u72B6_u6001_29" class="headerlink" title="React State(状态)"></a>React State(状态)</h2><p>把组件看成是一个状态机（State Machines）。通过与用户的交互，实现不同状态，然后渲染 UI，让用户界面和数据保持一致。React 里，只需更新组件的 state，然后根据新的 state 重新渲染用户界面（不要操作 DOM）。</p>
<h3 id="constructor_28_29_u521D_u59CB_u72B6_u6001"><a href="#constructor_28_29_u521D_u59CB_u72B6_u6001" class="headerlink" title="constructor()初始状态"></a>constructor()初始状态</h3><h4 id="u5B9E_u4F8B_uFF1A_u70B9_u51FB_u559C_u6B22_26amp_3B_u4E0D_u559C_u6B22"><a href="#u5B9E_u4F8B_uFF1A_u70B9_u51FB_u559C_u6B22_26amp_3B_u4E0D_u559C_u6B22" class="headerlink" title="实例：点击喜欢&amp;不喜欢"></a>实例：点击喜欢&amp;不喜欢</h4><figure class="highlight typescript" data-lang=" typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> LikeButton extends React.Component&#123;</span><br><span class="line">    <span class="constructor"><span class="keyword">constructor</span>() </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.state =&#123;liked: <span class="literal">false</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    handleClick() &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            liked: !<span class="keyword">this</span>.state.liked</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">let</span> text = <span class="keyword">this</span>.state.liked ? <span class="string">'喜欢'</span> : <span class="string">'不喜欢'</span>;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;p onClick=&#123;<span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>)&#125;&gt;你&lt;b&gt;&#123;text&#125;&lt;<span class="regexp">/b&gt;我。点我切换状态。&lt;/</span>p&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">ReactDOM.render(&lt;LikeButton /&gt;, mountNode);</span><br></pre></td></tr></table></figure>
<figure class="highlight pf" data-lang=" pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">handleClick = ()=&gt;&#123;</span><br><span class="line">    this.<span class="built_in">set</span>State(&#123;</span><br><span class="line">        liked: !this.<span class="keyword">state</span>.liked</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>constructor是组件的构造函数，会在创建实例时自动调用。<br>…args表示组件参数，super(…args)是 ES6 规定的写法。<br>this.state对象用来存放内部状态，这里是定义初始状态，也就是一个对象，这个对象可以通过 this.state 属性读取。当用户点击组件，导致状态变化，this.setState 方法就修改状态值，每次修改以后，自动调用 this.render 方法，再次渲染组件。<br>onClick={this.handleClick.bind(this)}绑定事件，返回参数。<br>e.target.value绑定事件后的返回值。</p>
<h4 id="u5B9E_u4F8B_uFF1A_u8F93_u5165_u6587_u5B57_u5B9E_u65F6_u663E_u793A"><a href="#u5B9E_u4F8B_uFF1A_u8F93_u5165_u6587_u5B57_u5B9E_u65F6_u663E_u793A" class="headerlink" title="实例：输入文字实时显示"></a>实例：输入文字实时显示</h4><figure class="highlight scala" data-lang=" scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTitle</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">React</span>.<span class="title">Component</span>&#123;</span></span><br><span class="line">    constructor() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.state =&#123;name: <span class="symbol">'can</span> you speek <span class="type">English</span>!'&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    handleChange(e) &#123;</span><br><span class="line">        let name = e.target.value;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            name: name</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;input <span class="class"><span class="keyword">type</span>=</span><span class="string">"text"</span> onChange=&#123;<span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>)&#125; /&gt;</span><br><span class="line">                &lt;p&gt;luuman,&#123;<span class="keyword">this</span>.state.name&#125;&lt;/p&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">MyTitle</span> /&gt;, mountNode);</span><br></pre></td></tr></table></figure>
<h2 id="React_Props"><a href="#React_Props" class="headerlink" title="React Props"></a>React Props</h2><p>props通过组件获取数据</p>
<h3 id="u57FA_u7840_u8BED_u6CD5-1"><a href="#u57FA_u7840_u8BED_u6CD5-1" class="headerlink" title="基础语法"></a>基础语法</h3><h4 id="u5B9E_u4F8B_uFF1A_u6570_u636E_u4F20_u9012"><a href="#u5B9E_u4F8B_uFF1A_u6570_u636E_u4F20_u9012" class="headerlink" title="实例：数据传递"></a>实例：数据传递</h4><figure class="highlight scala" data-lang=" scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">React</span>.<span class="title">Component</span>&#123;</span></span><br><span class="line">	render()&#123;</span><br><span class="line">		<span class="keyword">return</span> &lt;h1&gt;<span class="type">Hello</span> &#123;<span class="keyword">this</span>.props.name&#125;&lt;/h1&gt;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">ReactDOM</span>.render(</span><br><span class="line">	&lt;<span class="type">HelloMessage</span> name=<span class="string">"Runoob"</span> /&gt;,mountNode</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>实例中 name 属性通过 this.props.name 来获取。</p>
<h3 id="defaultProps_u9ED8_u8BA4_u503C"><a href="#defaultProps_u9ED8_u8BA4_u503C" class="headerlink" title="defaultProps默认值"></a>defaultProps默认值</h3><p>默认Props：你可以通过defaultProps()方法为props设置默认值，实例如下：<br><figure class="highlight scala" data-lang=" scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">React</span>.<span class="title">Component</span>&#123;</span></span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> &lt;h1&gt;<span class="type">Hello</span> &#123;<span class="keyword">this</span>.props.name&#125;&lt;/h1&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">HelloMessage</span>.defaultProps = &#123;</span><br><span class="line">    name: <span class="symbol">'Runoo</span>b'</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">HelloMessage</span> /&gt;,mountNode);</span><br></pre></td></tr></table></figure></p>
<figure class="highlight scala" data-lang=" scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebSite</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">React</span>.<span class="title">Component</span>&#123;</span></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=&#123;<span class="keyword">this</span>.props.name&#125;&gt;&lt;<span class="type">Name</span> name=&#123;<span class="keyword">this</span>.props.name&#125; /&gt;&lt;<span class="type">Link</span> site=&#123;<span class="keyword">this</span>.props.site&#125; /&gt;&lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">WebSite</span>.defaultProps =&#123;</span><br><span class="line">	name: <span class="string">"菜鸟教程"</span>,</span><br><span class="line">	site: <span class="string">"http://www.runoob.com"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">React</span>.<span class="title">Component</span>&#123;</span></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;h1&gt;&#123;<span class="keyword">this</span>.props.name&#125;&lt;/h1&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Link</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">React</span>.<span class="title">Component</span>&#123;</span></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;a href=&#123;<span class="keyword">this</span>.props.site&#125;&gt;&#123;<span class="keyword">this</span>.props.site&#125;&lt;/a&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">WebSite</span> /&gt;, mountNode);</span><br></pre></td></tr></table></figure>
<h3 id="this-props-children"><a href="#this-props-children" class="headerlink" title="this.props.children"></a>this.props.children</h3><h4 id="u5B9E_u4F8B_uFF1A_u70B9_u51FB_u6B21_u6570"><a href="#u5B9E_u4F8B_uFF1A_u70B9_u51FB_u6B21_u6570" class="headerlink" title="实例：点击次数"></a>实例：点击次数</h4><figure class="highlight scala" data-lang=" scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotesList</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">React</span>.<span class="title">Component</span>&#123;</span></span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;ol&gt;&#123;</span><br><span class="line">                <span class="type">React</span>.<span class="type">Children</span>.map(<span class="keyword">this</span>.props.children,function(child)&#123;</span><br><span class="line">                    console.log(child);</span><br><span class="line">                    <span class="keyword">return</span> &lt;li&gt;&#123;child&#125;&lt;/li&gt;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;&lt;/ol&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">ReactDOM</span>.render(</span><br><span class="line">    &lt;<span class="type">NotesList</span>&gt;</span><br><span class="line">        &lt;span&gt;hello&lt;/span&gt;</span><br><span class="line">        &lt;span&gt;world&lt;/span&gt;</span><br><span class="line">        &lt;span&gt;world&lt;/span&gt;</span><br><span class="line">        &lt;span&gt;world&lt;/span&gt;</span><br><span class="line">    &lt;/<span class="type">NotesList</span>&gt;,</span><br><span class="line">    mountNode</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="PropTypes_u9A8C_u8BC1"><a href="#PropTypes_u9A8C_u8BC1" class="headerlink" title="PropTypes验证"></a>PropTypes验证</h3><p>Props 使用propTypes，它可以保证我们的应用组件被正确使用，React.PropTypes 提供很多验证器 (validator) 来验证传入数据是否有效。当向 props 传入无效数据时，JavaScript 控制台会抛出警告。</p>
<h4 id="u5B9E_u4F8B_uFF1A_u5224_u65AD_u7EC4_u4EF6_u5C5E_u6027title_u662F_u5426_u4E3A_u5B57_u7B26_u4E32_uFF1A"><a href="#u5B9E_u4F8B_uFF1A_u5224_u65AD_u7EC4_u4EF6_u5C5E_u6027title_u662F_u5426_u4E3A_u5B57_u7B26_u4E32_uFF1A" class="headerlink" title="实例：判断组件属性title是否为字符串："></a>实例：判断组件属性title是否为字符串：</h4><figure class="highlight scala" data-lang=" scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const name = <span class="number">123</span>;</span><br><span class="line">console.log(name);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">React</span>.<span class="title">Component</span>&#123;</span></span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> &lt;h1&gt;<span class="type">Hello</span> &#123;<span class="keyword">this</span>.props.title&#125;&lt;/h1&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">HelloMessage</span>.propTypes = &#123;</span><br><span class="line">    title: <span class="type">React</span>.<span class="type">PropTypes</span>.string</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">HelloMessage</span> title=&#123;name&#125; /&gt;,mountNode);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果 title 使用数字变量，控制台会出现以下错误信息：</p>
</blockquote>
<figure class="highlight autohotkey" data-lang=" autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">Warning: Failed prop type:</span> Invalid prop <span class="escape">`t</span>itle<span class="escape">` </span>of type <span class="escape">`n</span>umber<span class="escape">` </span>supplied to <span class="escape">`H</span>elloMessage<span class="escape">`,</span> expected <span class="escape">`s</span>tring<span class="escape">`.</span></span><br></pre></td></tr></table></figure>
<h3 id="PropTypes_u5C5E_u6027_u503C"><a href="#PropTypes_u5C5E_u6027_u503C" class="headerlink" title="PropTypes属性值"></a>PropTypes属性值</h3><figure class="highlight javascript" data-lang=" javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">.propTypes = &#123;</span><br><span class="line">	<span class="comment">// 可以声明 prop 为指定的 JS 基本数据类型，默认情况，这些数据是可选的</span></span><br><span class="line">	optionalArray: React.PropTypes.array,</span><br><span class="line">	optionalBool: React.PropTypes.bool,</span><br><span class="line">	optionalFunc: React.PropTypes.func,</span><br><span class="line">	optionalNumber: React.PropTypes.number,</span><br><span class="line">	optionalObject: React.PropTypes.object,</span><br><span class="line">	optionalString: React.PropTypes.string,</span><br><span class="line">	optionalSymbol: React.PropTypes.symbol,</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 可以被渲染的对象 numbers, strings, elements 或 array</span></span><br><span class="line">	optionalNode: React.PropTypes.node,</span><br><span class="line"></span><br><span class="line">	<span class="comment">//  React 元素</span></span><br><span class="line">	optionalElement: React.PropTypes.element,</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 用 JS 的 instanceof 操作符声明 prop 为类的实例。</span></span><br><span class="line">	optionalMessage: React.PropTypes.instanceOf(Message),</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 用 enum 来限制 prop 只接受指定的值。</span></span><br><span class="line">	optionalEnum: React.PropTypes.oneOf([<span class="string">'News'</span>, <span class="string">'Photos'</span>]),</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 可以是多个对象类型中的一个</span></span><br><span class="line">	optionalUnion: React.PropTypes.oneOfType([</span><br><span class="line">		React.PropTypes.string,</span><br><span class="line">		React.PropTypes.number,</span><br><span class="line">		React.PropTypes.instanceOf(Message)</span><br><span class="line">	]),</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 指定类型组成的数组</span></span><br><span class="line">	optionalArrayOf: React.PropTypes.arrayOf(React.PropTypes.number),</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 指定类型的属性构成的对象</span></span><br><span class="line">	optionalObjectOf: React.PropTypes.objectOf(React.PropTypes.number),</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 特定 shape 参数的对象</span></span><br><span class="line">	optionalObjectWithShape: React.PropTypes.shape(&#123;</span><br><span class="line">		color: React.PropTypes.string,</span><br><span class="line">		fontSize: React.PropTypes.number</span><br><span class="line">	&#125;),</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 任意类型加上 `isRequired` 来使 prop 不可空。</span></span><br><span class="line">	requiredFunc: React.PropTypes.func.isRequired,</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 不可空的任意类型</span></span><br><span class="line">	requiredAny: React.PropTypes.any.isRequired,</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 自定义验证器。如果验证失败需要返回一个 Error 对象。不要直接使用 `console.warn` 或抛异常，因为这样 `oneOfType` 会失效。</span></span><br><span class="line">	customProp(props, propName, componentName) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!<span class="regexp">/matchme/</span>.test(props[propName])) &#123;</span><br><span class="line">		    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">				<span class="string">'Invalid prop `'</span> + propName + <span class="string">'` supplied to'</span> +</span><br><span class="line">				<span class="string">' `'</span> + componentName + <span class="string">'`. Validation failed.'</span></span><br><span class="line">		    );</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	customArrayProp: React.PropTypes.arrayOf(</span><br><span class="line">		<span class="function"><span class="keyword">function</span>(<span class="params">propValue, key, componentName, location, propFullName</span>) </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (!<span class="regexp">/matchme/</span>.test(propValue[key])) &#123;</span><br><span class="line">			    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">					<span class="string">'Invalid prop `'</span> + propFullName + <span class="string">'` supplied to'</span> +</span><br><span class="line">					<span class="string">' `'</span> + componentName + <span class="string">'`. Validation failed.'</span></span><br><span class="line">			    );</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="state_u548Cprops_u533A_u522B"><a href="#state_u548Cprops_u533A_u522B" class="headerlink" title="state和props区别"></a>state和props区别</h3><p>在于props是不可变的，而子组件只能通过props来获取数据。<br>而state可以根据与用户交互来改变。这就是为什么有些容器组件需要定义state来更新和修改数据。</p>
<p>以下实例演示了如何在应用中组合使用state和props。我们可以在父组件中设置state，并通过在子组件上使用props将其传递到子组件上。在render函数中,我们设置name和site来获取父组件传递过来的数据。</p>
<h4 id="u5B9E_u4F8B_uFF1A_u94FE_u63A5-1"><a href="#u5B9E_u4F8B_uFF1A_u94FE_u63A5-1" class="headerlink" title="实例：链接"></a>实例：链接</h4><figure class="highlight scala" data-lang=" scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebSite</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">React</span>.<span class="title">Component</span>&#123;</span></span><br><span class="line">	constructor(props) &#123;</span><br><span class="line">		<span class="keyword">super</span>(props);</span><br><span class="line">		<span class="keyword">this</span>.state = &#123;</span><br><span class="line">			name: <span class="string">"菜鸟教程"</span>,</span><br><span class="line">			site: <span class="string">"http://www.runoob.com"</span></span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	render()&#123;</span><br><span class="line">		<span class="keyword">return</span> &lt;div&gt;&lt;<span class="type">Name</span> name=&#123;<span class="keyword">this</span>.state.name&#125; /&gt;&lt;<span class="type">Link</span> site=&#123;<span class="keyword">this</span>.state.site&#125; /&gt;&lt;/div&gt;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">React</span>.<span class="title">Component</span>&#123;</span></span><br><span class="line">	render()&#123;</span><br><span class="line">		<span class="keyword">return</span> &lt;h1&gt;&#123;<span class="keyword">this</span>.props.name&#125;&lt;/h1&gt;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Link</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">React</span>.<span class="title">Component</span>&#123;</span></span><br><span class="line">	render()&#123;</span><br><span class="line">		<span class="keyword">return</span> &lt;a href=&#123;<span class="keyword">this</span>.props.site&#125;&gt;&#123;<span class="keyword">this</span>.props.site&#125;&lt;/a&gt;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">WebSite</span> /&gt;,mountNode);</span><br></pre></td></tr></table></figure>
<h2 id="React__u7EC4_u4EF6_API"><a href="#React__u7EC4_u4EF6_API" class="headerlink" title="React 组件 API"></a>React 组件 API</h2><p>在本章节中我们将讨论 React 组件 API。</p>
<h3 id="u57FA_u7840_u8BED_u6CD5-2"><a href="#u57FA_u7840_u8BED_u6CD5-2" class="headerlink" title="基础语法"></a>基础语法</h3><h3 id="mixins_u53BB_u91CD"><a href="#mixins_u53BB_u91CD" class="headerlink" title="mixins去重"></a>mixins去重</h3><figure class="highlight scala" data-lang=" scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const <span class="type">ExampleMixin</span> = &#123;</span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        <span class="comment">// bind some event listeners here</span></span><br><span class="line">    &#125;</span><br><span class="line">    componentWillUnmount()&#123;</span><br><span class="line">        <span class="comment">// unbind those events here!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleComponent</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">React</span>.<span class="title">Component</span>&#123;</span></span><br><span class="line">	mixins: [<span class="type">ExampleMixin</span>];</span><br><span class="line">	render()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnotherComponent</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">React</span>.<span class="title">Component</span>&#123;</span></span><br><span class="line">	mixins: [<span class="type">ExampleMixin</span>];</span><br><span class="line">	render()&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!-- 设置状态:setState
setState(object nextState[, function callback])
参数说明
nextState，将要设置的新状态，该状态会和当前的state合并
callback，可选参数，回调函数。该函数会在setState设置成功，且组件重新渲染后调用。
合并nextState和当前state，并重新渲染组件。setState是React事件处理函数中和请求回调函数中触发UI更新的主要方法。
关于setState
不能在组件内部通过this.state修改状态，因为该状态会在调用setState()后被替换。
setState()并不会立即改变this.state，而是创建一个即将处理的state。setState()并不一定是同步的，为了提升性能React会批量执行state和DOM渲染。
setState()总是会触发一次组件重绘，除非在shouldComponentUpdate()中实现了一些条件渲染逻辑。 -->
<h4 id="u5B9E_u4F8B_uFF1A_u70B9_u51FB_u6B21_u6570-1"><a href="#u5B9E_u4F8B_uFF1A_u70B9_u51FB_u6B21_u6570-1" class="headerlink" title="实例：点击次数"></a>实例：点击次数</h4><figure class="highlight scala" data-lang=" scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">React</span>.<span class="title">Component</span>&#123;</span></span><br><span class="line">	constructor()&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.state = &#123;</span><br><span class="line">			clickCount: <span class="number">0</span></span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	handleClick()&#123;</span><br><span class="line">		<span class="keyword">this</span>.setState(&#123;</span><br><span class="line">			clickCount: <span class="keyword">this</span>.state.clickCount +<span class="number">1</span></span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	render()&#123;</span><br><span class="line">		<span class="keyword">return</span> &lt;h2 onClick=&#123;<span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>)&#125;&gt;点我！点击次数为: &#123;<span class="keyword">this</span>.state.clickCount&#125;&lt;/h2&gt;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">Counter</span> /&gt;,mountNode);</span><br></pre></td></tr></table></figure>
<!-- 
实例中通过点击 h2 标签来使得点击计数器加 1。
替换状态：replaceState
replaceState(object nextState[, function callback])
nextState，将要设置的新状态，该状态会替换当前的state。
callback，可选参数，回调函数。该函数会在replaceState设置成功，且组件重新渲染后调用。
replaceState()方法与setState()类似，但是方法只会保留nextState中状态，原state不在nextState中的状态都会被删除。
设置属性：setProps
setProps(object nextProps[, function callback])
nextProps，将要设置的新属性，该状态会和当前的props合并
callback，可选参数，回调函数。该函数会在setProps设置成功，且组件重新渲染后调用。
设置组件属性，并重新渲染组件。
props相当于组件的数据流，它总是会从父组件向下传递至所有的子组件中。当和一个外部的JavaScript应用集成时，我们可能会需要向组件传递数据或通知ReactDOM.render()组件需要重新渲染，可以使用setProps()。
更新组件，我可以在节点上再次调用ReactDOM.render()，也可以通过setProps()方法改变组件属性，触发组件重新渲染。
替换属性：replaceProps
replaceProps(object nextProps[, function callback])
nextProps，将要设置的新属性，该属性会替换当前的props。
callback，可选参数，回调函数。该函数会在replaceProps设置成功，且组件重新渲染后调用。
replaceProps()方法与setProps类似，但它会删除原有
props
强制更新：forceUpdate
forceUpdate([function callback])
参数说明
callback，可选参数，回调函数。该函数会在组件render()方法调用后调用。
forceUpdate()方法会使组件调用自身的render()方法重新渲染组件，组件的子组件也会调用自己的render()。但是，组件重新渲染时，依然会读取this.props和this.state，如果状态没有改变，那么React只会更新DOM。
forceUpdate()方法适用于this.props和this.state之外的组件重绘（如：修改了this.state后），通过该方法通知React需要调用render()
一般来说，应该尽量避免使用forceUpdate()，而仅从this.props和this.state中读取状态并由React触发render()调用。
获取DOM节点：findDOMNode
DOMElement findDOMNode()
返回值：DOM元素DOMElement
如果组件已经挂载到DOM中，该方法返回对应的本地浏览器 DOM 元素。当render返回null 或 false时，this.findDOMNode()也会返回null。从DOM 中读取值的时候，该方法很有用，如：获取表单字段的值和做一些 DOM 操作。
判断组件挂载状态：isMounted
bool isMounted()
返回值：true或false，表示组件是否已挂载到DOM中
isMounted()方法用于判断组件是否已挂载到DOM中。可以使用该方法保证了setState()和forceUpdate()在异步场景下的调用不会出错。
本文参考：http://itbilu.com/javascript/react/EkACBdqKe.html -->
<h2 id="React__u7EC4_u4EF6_u751F_u547D_u5468_u671F"><a href="#React__u7EC4_u4EF6_u751F_u547D_u5468_u671F" class="headerlink" title="React 组件生命周期"></a>React 组件生命周期</h2><blockquote>
<p>组件的生命周期可分成三个状态：Mounting、Updating、Unmounting</p>
<h3 id="Mounting_uFF1A_u5DF2_u63D2_u5165_u771F_u5B9E_DOM"><a href="#Mounting_uFF1A_u5DF2_u63D2_u5165_u771F_u5B9E_DOM" class="headerlink" title="Mounting：已插入真实 DOM"></a>Mounting：已插入真实 DOM</h3></blockquote>
<h4 id="constructor_28_29"><a href="#constructor_28_29" class="headerlink" title="constructor()"></a>constructor()</h4><h4 id="componentWillMount_28_29"><a href="#componentWillMount_28_29" class="headerlink" title="componentWillMount()"></a>componentWillMount()</h4><p>在渲染前调用,在客户端也在服务端。</p>
<h4 id="render_28_29"><a href="#render_28_29" class="headerlink" title="render()"></a>render()</h4><p>在渲染时调用</p>
<h4 id="componentDidMount_28_29"><a href="#componentDidMount_28_29" class="headerlink" title="componentDidMount()"></a>componentDidMount()</h4><p>在第一次渲染后调用，只在客户端。之后组件已经生成了对应的DOM结构，可以通过this.getDOMNode()来进行访问。<br>如果你想和其他JavaScript框架一起使用，可以在这个方法中调用setTimeout, setInterval或者发送AJAX请求等操作(防止异部操作阻塞UI)。</p>
<h3 id="Updating_uFF1A_u6B63_u5728_u88AB_u91CD_u65B0_u6E32_u67D3"><a href="#Updating_uFF1A_u6B63_u5728_u88AB_u91CD_u65B0_u6E32_u67D3" class="headerlink" title="Updating：正在被重新渲染"></a>Updating：正在被重新渲染</h3><h4 id="componentWillReceiveProps_28_29"><a href="#componentWillReceiveProps_28_29" class="headerlink" title="componentWillReceiveProps()"></a>componentWillReceiveProps()</h4><p>在组件接收到一个新的prop时被调用。这个方法在初始化render时不会被调用。</p>
<h4 id="shouldComponentUpdate_28_29"><a href="#shouldComponentUpdate_28_29" class="headerlink" title="shouldComponentUpdate()"></a>shouldComponentUpdate()</h4><p>返回一个布尔值。在组件接收到新的props或者state时被调用。在初始化时或者使用forceUpdate时不被调用。<br>可以在你确认不需要更新组件时使用。</p>
<h4 id="componentWillUpdate_28_29"><a href="#componentWillUpdate_28_29" class="headerlink" title="componentWillUpdate()"></a>componentWillUpdate()</h4><p>在组件接收到新的props或者state但还没有render时被调用。在初始化时不会被调用。</p>
<h4 id="render_28_29-1"><a href="#render_28_29-1" class="headerlink" title="render()"></a>render()</h4><h4 id="componentDidUpdate_28_29"><a href="#componentDidUpdate_28_29" class="headerlink" title="componentDidUpdate()"></a>componentDidUpdate()</h4><p>在组件完成更新后立即调用。在初始化时不会被调用。</p>
<h3 id="Unmounting_uFF1A_u5DF2_u79FB_u51FA_u771F_u5B9E_DOM"><a href="#Unmounting_uFF1A_u5DF2_u79FB_u51FA_u771F_u5B9E_DOM" class="headerlink" title="Unmounting：已移出真实 DOM"></a>Unmounting：已移出真实 DOM</h3><h4 id="componentWillUnmount_28_29"><a href="#componentWillUnmount_28_29" class="headerlink" title="componentWillUnmount()"></a>componentWillUnmount()</h4><p>在组件从 DOM 中移除的时候立刻被调用。</p>
<h4 id="u5B9E_u4F8B_uFF1A_u5B9A_u65F6_u5668_uFF0C_u6BCF_u9694100_u6BEB_u79D2_u91CD_u65B0_u8BBE_u7F6E_u7EC4_u4EF6_u7684_u900F_u660E_u5EA6_uFF0C_u5E76_u91CD_u65B0_u6E32_u67D3"><a href="#u5B9E_u4F8B_uFF1A_u5B9A_u65F6_u5668_uFF0C_u6BCF_u9694100_u6BEB_u79D2_u91CD_u65B0_u8BBE_u7F6E_u7EC4_u4EF6_u7684_u900F_u660E_u5EA6_uFF0C_u5E76_u91CD_u65B0_u6E32_u67D3" class="headerlink" title="实例：定时器，每隔100毫秒重新设置组件的透明度，并重新渲染"></a>实例：定时器，每隔100毫秒重新设置组件的透明度，并重新渲染</h4><figure class="highlight scala" data-lang=" scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">React</span>.<span class="title">Component</span>&#123;</span></span><br><span class="line">	constructor() &#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.state = &#123;</span><br><span class="line">			opacity: <span class="number">1.0</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	componentDidMount()&#123;</span><br><span class="line">		<span class="keyword">this</span>.timer = setInterval(function()&#123;</span><br><span class="line">			let opacity = <span class="keyword">this</span>.state.opacity;</span><br><span class="line">			opacity -= <span class="number">.05</span>;</span><br><span class="line">			<span class="keyword">if</span>(opacity &lt; <span class="number">.1</span>)&#123;</span><br><span class="line">				opacity = <span class="number">1.0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">this</span>.setState(&#123;</span><br><span class="line">				opacity: opacity</span><br><span class="line">			&#125;)</span><br><span class="line"></span><br><span class="line">		&#125;.bind(<span class="keyword">this</span>),<span class="number">100</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	render()&#123;</span><br><span class="line">		<span class="keyword">return</span>(</span><br><span class="line">			&lt;div style=&#123;&#123;opacity: <span class="keyword">this</span>.state.opacity&#125;&#125;&gt;</span><br><span class="line">				<span class="type">Hello</span> &#123;<span class="keyword">this</span>.props.name&#125;</span><br><span class="line">			&lt;/div&gt;</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">Hello</span> name=<span class="string">"world"</span> /&gt;,mountNode);</span><br></pre></td></tr></table></figure>
<h4 id="u5B9E_u4F8B_uFF1A_u70B9_u51FB_u6548_u679C"><a href="#u5B9E_u4F8B_uFF1A_u70B9_u51FB_u6548_u679C" class="headerlink" title="实例：点击效果"></a>实例：点击效果</h4><p>以下实例初始化 state ， setNewnumber 用于更新 state。所有生命周期在 Content 组件中。<br><figure class="highlight haskell" data-lang=" haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Button</span> extends <span class="type">React</span>.<span class="type">Component</span>&#123;</span><br><span class="line">	constructor<span class="container">()</span> &#123;</span><br><span class="line">		super<span class="container">()</span>;</span><br><span class="line">		this.state = &#123;</span><br><span class="line">			data:0</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	setNewNumber<span class="container">()</span>&#123;</span><br><span class="line">		this.setState<span class="container">(&#123;</span><br><span class="line">			<span class="title">data</span>: <span class="title">this</span>.<span class="title">state</span>.<span class="title">data</span> + 1</span><br><span class="line">		&#125;)</span></span><br><span class="line">	&#125;</span><br><span class="line">	render<span class="container">()</span>&#123;</span><br><span class="line">		return<span class="container">(</span><br><span class="line">			&lt;<span class="title">div</span>&gt;</span><br><span class="line">				&lt;<span class="title">button</span> <span class="title">onClick</span>=&#123;<span class="title">this</span>.<span class="title">setNewNumber</span>.<span class="title">bind</span>(<span class="title">this</span>)</span>&#125;&gt;<span class="type">INCREMENT</span>&lt;/button&gt;</span><br><span class="line">				&lt;<span class="type">Content</span> myNumber=&#123;this.state.data&#125;&gt;&lt;/<span class="type">Content</span>&gt;</span><br><span class="line">			&lt;/div&gt;</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="type">Content</span> extends <span class="type">React</span>.<span class="type">Component</span>&#123;</span><br><span class="line">	componentWillMount<span class="container">()</span>&#123;</span><br><span class="line">		console.log<span class="container">('<span class="type">Component</span> <span class="type">WILL</span> <span class="type">MOUNT</span>!')</span></span><br><span class="line">	&#125;</span><br><span class="line">	componentDidMount<span class="container">()</span>&#123;</span><br><span class="line">		console.log<span class="container">('<span class="type">Component</span> <span class="type">DID</span> <span class="type">MOUNT</span>!')</span></span><br><span class="line">	&#125;</span><br><span class="line">	componentWillReceiveProps<span class="container">(<span class="title">newProps</span>)</span> &#123;</span><br><span class="line">		console.log<span class="container">('<span class="type">Component</span> <span class="type">WILL</span> <span class="type">RECEIVE</span> <span class="type">PROPS</span>!')</span></span><br><span class="line">	&#125;</span><br><span class="line">	shouldComponentUpdate<span class="container">(<span class="title">newProps</span>, <span class="title">newState</span>)</span> &#123;</span><br><span class="line">		return true;</span><br><span class="line">	&#125;</span><br><span class="line">	componentWillUpdate<span class="container">(<span class="title">nextProps</span>, <span class="title">nextState</span>)</span> &#123;</span><br><span class="line">		console.log<span class="container">('<span class="type">Component</span> <span class="type">WILL</span> <span class="type">UPDATE</span>!')</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	componentDidUpdate<span class="container">(<span class="title">prevProps</span>, <span class="title">prevState</span>)</span> &#123;</span><br><span class="line">		console.log<span class="container">('<span class="type">Component</span> <span class="type">DID</span> <span class="type">UPDATE</span>!')</span></span><br><span class="line">	&#125;</span><br><span class="line">	componentWillUnmount<span class="container">()</span>&#123;</span><br><span class="line">		console.log<span class="container">('<span class="type">Component</span> <span class="type">WILL</span> <span class="type">UNMOUNT</span>!')</span></span><br><span class="line">	&#125;</span><br><span class="line">	render<span class="container">()</span>&#123;</span><br><span class="line">		return<span class="container">(</span><br><span class="line">			&lt;<span class="title">div</span>&gt;</span><br><span class="line">				&lt;<span class="title">h3</span>&gt;&#123;<span class="title">this</span>.<span class="title">props</span>.<span class="title">myNumber</span>&#125;&lt;/<span class="title">h3</span>&gt;</span><br><span class="line">			&lt;/<span class="title">div</span>&gt;</span><br><span class="line">		)</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">ReactDOM</span>.render<span class="container">(&lt;<span class="type">Button</span> /&gt;,<span class="title">mountNode</span>)</span>;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="u5B9E_u4F8B_uFF1A_u7EDF_u8BA1_u65F6_u95F4"><a href="#u5B9E_u4F8B_uFF1A_u7EDF_u8BA1_u65F6_u95F4" class="headerlink" title="实例：统计时间"></a>实例：统计时间</h4><figure class="highlight scala" data-lang=" scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Timer</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">React</span>.<span class="title">Component</span>&#123;</span></span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;secondsElapsed: <span class="number">0</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  tick()&#123;</span><br><span class="line">    <span class="keyword">this</span>.setState((prevState) =&gt; (&#123;</span><br><span class="line">      secondsElapsed: prevState.secondsElapsed + <span class="number">1</span></span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidMount()&#123;</span><br><span class="line">    <span class="keyword">this</span>.interval = setInterval(() =&gt; <span class="keyword">this</span>.tick(), <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  componentWillUnmount()&#123;</span><br><span class="line">    clearInterval(<span class="keyword">this</span>.interval);</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;<span class="type">Seconds</span> <span class="type">Elapsed</span>: &#123;<span class="keyword">this</span>.state.secondsElapsed&#125;&lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">Timer</span> /&gt;, mountNode);</span><br></pre></td></tr></table></figure>
<h2 id="Lists_and_Keys_u5217_u8868_u904D_u5386"><a href="#Lists_and_Keys_u5217_u8868_u904D_u5386" class="headerlink" title="Lists and Keys列表遍历"></a>Lists and Keys列表遍历</h2><p>JSX 允许在模板中插入数组，数组会自动展开所有成员：</p>
<figure class="highlight xml" data-lang=" xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const arr = [</span><br><span class="line">    <span class="tag">&lt;<span class="title">h1</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="title">h1</span>&gt;</span>,</span><br><span class="line">    <span class="tag">&lt;<span class="title">h2</span>&gt;</span>学的不仅是技术，更是梦想！<span class="tag">&lt;/<span class="title">h2</span>&gt;</span>,</span><br><span class="line">];</span><br><span class="line">ReactDOM.render(</span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span>&gt;</span>&#123;arr&#125;<span class="tag">&lt;/<span class="title">div</span>&gt;</span>,mountNode</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><a href="demo/index6.html">index6</a></p>
<h3 id="Array-map"><a href="#Array-map" class="headerlink" title="Array.map"></a>Array.map</h3><figure class="highlight cpp" data-lang=" cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> doubled = numbers.<span class="built_in">map</span>((number) =&gt; number * <span class="number">2</span>);</span><br><span class="line">console.<span class="built_in">log</span>(doubled);</span><br></pre></td></tr></table></figure>
<figure class="highlight processing" data-lang=" processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> listItems = numbers.<span class="built_in">map</span>((number,<span class="variable">key</span>) =&gt;</span><br><span class="line">	&lt;li <span class="variable">key</span>=&#123;<span class="variable">key</span>&#125;&gt;&#123;number&#125;&lt;/li&gt;</span><br><span class="line">);</span><br><span class="line">console.<span class="built_in">log</span>(listItems);</span><br><span class="line">ReactDOM.render(&lt;ul&gt;&#123;listItems&#125;&lt;/ul&gt;,mountNode);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> listItems = numbers.<span class="built_in">map</span>(function(number,keys)&#123;</span><br><span class="line">	<span class="keyword">return</span>(</span><br><span class="line">		&lt;li <span class="variable">key</span>=&#123;keys&#125;&gt;</span><br><span class="line">			&#123;number&#125;</span><br><span class="line">		&lt;/li&gt;</span><br><span class="line">	)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="Array-forEach__u904D_u5386"><a href="#Array-forEach__u904D_u5386" class="headerlink" title="Array.forEach 遍历"></a>Array.forEach 遍历</h3><figure class="highlight php" data-lang=" php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Array</span>.<span class="keyword">forEach</span>((e) =&gt; &#123;</span><br><span class="line">	alert(e);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">Array</span>.<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</span><br><span class="line">	alert(e);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight pf" data-lang=" pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">let repos = this.<span class="keyword">state</span>.data.items;</span><br><span class="line">let repoList = [];</span><br><span class="line">repos.<span class="keyword">for</span>Each((p,keys) =&gt; &#123;</span><br><span class="line">	let item = <span class="variable">&lt;li key=&#123;keys&#125;&gt;</span><span class="variable">&lt;a href=&#123;p.html_url&#125;&gt;</span>&#123;p.name&#125;<span class="variable">&lt;/a&gt;</span>(&#123;p.stargazers_count&#125; stars)<span class="variable">&lt;br /&gt;</span>&#123;p.description&#125;<span class="variable">&lt;/li&gt;</span>;</span><br><span class="line">	repoList.push(item);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">let repos = this.<span class="keyword">state</span>.data.items;</span><br><span class="line">let repoList = repos.map(function(repo,index)&#123;</span><br><span class="line">    return(</span><br><span class="line">        <span class="variable">&lt;li key=&#123;index&#125;&gt;</span></span><br><span class="line">            <span class="variable">&lt;a href=&#123;repo.html_url&#125;&gt;</span>&#123;repo.name&#125;<span class="variable">&lt;/a&gt;</span>(&#123;repo.stargazers_count&#125; stars)<span class="variable">&lt;br /&gt;</span></span><br><span class="line">            &#123;repo.description&#125;</span><br><span class="line">        <span class="variable">&lt;/li&gt;</span>   </span><br><span class="line">    );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="Array-splice__u5220_u9664"><a href="#Array-splice__u5220_u9664" class="headerlink" title="Array.splice 删除"></a>Array.splice 删除</h3><h3 id="Array-filter"><a href="#Array-filter" class="headerlink" title="Array.filter"></a>Array.filter</h3><p>方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素</p>
<h3 id="Array-every"><a href="#Array-every" class="headerlink" title="Array.every"></a>Array.every</h3><h3 id="Array-push"><a href="#Array-push" class="headerlink" title="Array.push"></a>Array.push</h3><h2 id="Handling_Events_u7ED1_u5B9A_u4E8B_u4EF6"><a href="#Handling_Events_u7ED1_u5B9A_u4E8B_u4EF6" class="headerlink" title="Handling Events绑定事件"></a>Handling Events绑定事件</h2><h2 id="Forms_u8868_u5355"><a href="#Forms_u8868_u5355" class="headerlink" title="Forms表单"></a>Forms表单</h2><h3 id="u57FA_u7840_u8BED_u6CD5-3"><a href="#u57FA_u7840_u8BED_u6CD5-3" class="headerlink" title="基础语法"></a>基础语法</h3><h4 id="u5B9E_u4F8B_uFF1A_u8F93_u5165_u6587_u5B57_u5B9E_u65F6_u663E_u793A-1"><a href="#u5B9E_u4F8B_uFF1A_u8F93_u5165_u6587_u5B57_u5B9E_u65F6_u663E_u793A-1" class="headerlink" title="实例：输入文字实时显示"></a>实例：输入文字实时显示</h4><figure class="highlight scala" data-lang=" scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">React</span>.<span class="title">Component</span>&#123;</span></span><br><span class="line">	constructor()&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.state = &#123;</span><br><span class="line">			value: <span class="symbol">'Hello</span> <span class="type">World</span>!'</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	handleChange(even)&#123;</span><br><span class="line">		<span class="keyword">this</span>.setState(&#123;</span><br><span class="line">			value: even.target.value</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">	render()&#123;</span><br><span class="line">		let value = <span class="keyword">this</span>.state.value;</span><br><span class="line">		<span class="keyword">return</span>(</span><br><span class="line">			&lt;div&gt;</span><br><span class="line">				&lt;input <span class="class"><span class="keyword">type</span>=</span><span class="symbol">'tex</span>t' value=&#123;value&#125; onChange=&#123;<span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>)&#125; /&gt;</span><br><span class="line">				&lt;h4&gt;&#123;value&#125;&lt;/h4&gt;</span><br><span class="line">			&lt;/div&gt;</span><br><span class="line">		);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">HelloMessage</span> /&gt;,mountNode);</span><br></pre></td></tr></table></figure>
<h4 id="u5B9E_u4F8B_uFF1A_u8F93_u5165_u6587_u5B57_u5B9E_u65F6_u663E_u793A-2"><a href="#u5B9E_u4F8B_uFF1A_u8F93_u5165_u6587_u5B57_u5B9E_u65F6_u663E_u793A-2" class="headerlink" title="实例：输入文字实时显示"></a>实例：输入文字实时显示</h4><p>你需要在父组件通过创建事件句柄 (handleChange) ，并作为 prop (updateStateProp) 传递到你的子组件上。<br><figure class="highlight scala" data-lang=" scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Content</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">React</span>.<span class="title">Component</span>&#123;</span></span><br><span class="line">	render()&#123;</span><br><span class="line">		<span class="keyword">return</span>(</span><br><span class="line">			&lt;div&gt;</span><br><span class="line">				&lt;input <span class="class"><span class="keyword">type</span>=</span><span class="symbol">'tex</span>t' value=&#123;<span class="keyword">this</span>.props.myDataProp&#125; onChange=&#123;<span class="keyword">this</span>.props.updataStateProp&#125; /&gt;</span><br><span class="line">				&lt;h4&gt;&#123;<span class="keyword">this</span>.props.myDataProp&#125;&lt;/h4&gt;</span><br><span class="line">			&lt;/div&gt;</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">React</span>.<span class="title">Component</span>&#123;</span></span><br><span class="line">	constructor()&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.state = &#123;</span><br><span class="line">			value: <span class="symbol">'Hello</span> <span class="type">World</span>!'</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	handleChange(even)&#123;</span><br><span class="line">		<span class="keyword">this</span>.setState(&#123;</span><br><span class="line">			value: even.target.value</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">	render()&#123;</span><br><span class="line">		let value = <span class="keyword">this</span>.state.value;</span><br><span class="line">		<span class="keyword">return</span>(</span><br><span class="line">			&lt;div&gt;</span><br><span class="line">				&lt;<span class="type">Content</span> myDataProp=&#123;value&#125; updataStateProp=&#123;<span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>)&#125; /&gt;</span><br><span class="line">			&lt;/div&gt;</span><br><span class="line">		);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">HelloMessage</span> /&gt;,mountNode);</span><br></pre></td></tr></table></figure></p>
<h4 id="u5B9E_u4F8B_uFF1A_u70B9_u6211"><a href="#u5B9E_u4F8B_uFF1A_u70B9_u6211" class="headerlink" title="实例：点我"></a>实例：点我</h4><figure class="highlight scala" data-lang=" scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">React</span>.<span class="title">Component</span>&#123;</span></span><br><span class="line">	constructor()&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.state=&#123;</span><br><span class="line">			value: <span class="symbol">'Hello</span> <span class="type">World</span>!'</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	handleChange(event)&#123;</span><br><span class="line">		<span class="keyword">this</span>.setState(&#123;</span><br><span class="line">			value: <span class="symbol">'luuman</span> is good man!'</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">	render()&#123;</span><br><span class="line">		let value = <span class="keyword">this</span>.state.value;</span><br><span class="line">		<span class="keyword">return</span>(</span><br><span class="line">			&lt;div&gt;</span><br><span class="line">				&lt;button onClick=&#123;<span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>)&#125;&gt;点我&lt;/button&gt;</span><br><span class="line">				&lt;h4&gt;&#123;value&#125;&lt;/h4&gt;</span><br><span class="line">			&lt;/div&gt;</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">HelloMessage</span> /&gt;,mountNode);</span><br></pre></td></tr></table></figure>
<p>当你需要从子组件中更新父组件的 state 时，你需要在父组件通过创建事件句柄 (handleChange) ，并作为 prop (updateStateProp) 传递到你的子组件上。实例如下：</p>
<h4 id="u5B9E_u4F8B_uFF1A_u70B9_u6211-1"><a href="#u5B9E_u4F8B_uFF1A_u70B9_u6211-1" class="headerlink" title="实例：点我"></a>实例：点我</h4><figure class="highlight scala" data-lang=" scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Content</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">React</span>.<span class="title">Component</span>&#123;</span></span><br><span class="line">	render()&#123;</span><br><span class="line">		<span class="keyword">return</span>(</span><br><span class="line">			&lt;div&gt;</span><br><span class="line">				&lt;button onClick=&#123;<span class="keyword">this</span>.props.updateStateProp&#125;&gt;点我&lt;/button&gt;</span><br><span class="line">				&lt;h4&gt;&#123;<span class="keyword">this</span>.props.myDataProp&#125;&lt;/h4&gt;</span><br><span class="line">			&lt;/div&gt;</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">React</span>.<span class="title">Component</span>&#123;</span></span><br><span class="line">	constructor()&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.state = &#123;</span><br><span class="line">			value: <span class="symbol">'Hello</span> <span class="type">World</span>!'</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	handleChange(event)&#123;</span><br><span class="line">		<span class="keyword">this</span>.setState(&#123;</span><br><span class="line">			value: <span class="symbol">'luuman</span> is good man!'</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">	render()&#123;</span><br><span class="line">		let value = <span class="keyword">this</span>.state.value;</span><br><span class="line">		<span class="keyword">return</span> &lt;div&gt;&lt;<span class="type">Content</span> myDataProp=&#123;value&#125; updateStateProp=&#123;<span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>)&#125;&gt;&lt;/<span class="type">Content</span>&gt;&lt;/div&gt;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">HelloMessage</span> /&gt;,mountNode);</span><br></pre></td></tr></table></figure>
<h2 id="Refs_and_the_DOM"><a href="#Refs_and_the_DOM" class="headerlink" title="Refs and the DOM"></a>Refs and the DOM</h2><h3 id="React_Refs"><a href="#React_Refs" class="headerlink" title="React Refs"></a>React Refs</h3><p>React 支持一种非常特殊的属性 Ref ，你可以用来绑定到 render() 输出的任何组件上。<br>这个特殊的属性允许你引用 render() 返回的相应的支撑实例（ backing instance ）。这样就可以确保在任何时间总是拿到正确的实例。</p>
<blockquote>
<p>使用方法：<br>绑定一个 ref 属性到 render 的返回值上：</p>
</blockquote>
<p>在其它代码中，通过 this.refs 获取支撑实例:<br><figure class="highlight nimrod" data-lang=" nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="keyword">ref</span>=<span class="string">"myInput"</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> input = this.refs.myInput;</span><br><span class="line"><span class="keyword">var</span> inputValue = input.value;</span><br><span class="line"><span class="keyword">var</span> inputRect = input.getBoundingClientRect();</span><br></pre></td></tr></table></figure></p>
<h4 id="u5B9E_u4F8B_uFF1A_u70B9_u6211_u8F93_u5165_u6846_u83B7_u53D6_u7126_u70B9"><a href="#u5B9E_u4F8B_uFF1A_u70B9_u6211_u8F93_u5165_u6846_u83B7_u53D6_u7126_u70B9" class="headerlink" title="实例：点我输入框获取焦点"></a>实例：点我输入框获取焦点</h4><figure class="highlight scala" data-lang=" scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">React</span>.<span class="title">Component</span>&#123;</span></span><br><span class="line">	handleClick()&#123;</span><br><span class="line">		<span class="keyword">this</span>.refs.myInput.focus();</span><br><span class="line">	&#125;</span><br><span class="line">	render()&#123;</span><br><span class="line">		<span class="keyword">return</span>(</span><br><span class="line">			&lt;div&gt;</span><br><span class="line">				&lt;input <span class="class"><span class="keyword">type</span>=</span><span class="symbol">'tex</span>t' ref=<span class="symbol">'myInpu</span>t' /&gt;</span><br><span class="line">				&lt;input <span class="class"><span class="keyword">type</span>=</span><span class="symbol">'butto</span>n' value='点我输入框获取焦点' onClick=&#123;<span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>)&#125; /&gt;</span><br><span class="line">			&lt;/div&gt;</span><br><span class="line">		);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">MyComponent</span> /&gt;,mountNode);</span><br></pre></td></tr></table></figure>
<p>当组件插入到 DOM 后，ref属性添加一个组件的引用于到this.refs.name获取。</p>
<p>实例中，我们获取了输入框的支撑实例的引用，子点击按钮后输入框获取焦点。<br>我们也可以使用 getDOMNode()方法获取DOM元素</p>
<h2 id="React_AJAX"><a href="#React_AJAX" class="headerlink" title="React AJAX"></a>React AJAX</h2><p>React 组件的数据可以通过 componentDidMount 方法中的 Ajax 来获取，当从服务端获取数据库可以将数据存储在 state 中，再用 this.setState 方法重新渲染 UI。<br>当使用异步加载数据时，在组件卸载前使用 componentWillUnmount 来取消未完成的请求。</p>
<h3 id="u5B9E_u4F8B"><a href="#u5B9E_u4F8B" class="headerlink" title="实例"></a>实例</h3><figure class="highlight actionscript" data-lang=" actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="keyword">get</span>(URL,<span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>&#123;&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="u5B9E_u4F8B_uFF1A_u83B7_u53D6_Github__u7528_u6237_u6700_u65B0_gist__u5171_u4EAB_u63CF_u8FF0_3A"><a href="#u5B9E_u4F8B_uFF1A_u83B7_u53D6_Github__u7528_u6237_u6700_u65B0_gist__u5171_u4EAB_u63CF_u8FF0_3A" class="headerlink" title="实例：获取 Github 用户最新 gist 共享描述:"></a>实例：获取 Github 用户最新 gist 共享描述:</h4><figure class="highlight nimrod" data-lang=" nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">class <span class="type">UserGist</span> extends <span class="type">React</span>.<span class="type">Component</span>&#123;</span><br><span class="line">	constructor() &#123;</span><br><span class="line">		super();</span><br><span class="line">		this.state = &#123;</span><br><span class="line">			username: '',</span><br><span class="line">			lastGistUrl: ''</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	componentDidMount()&#123;</span><br><span class="line">		this.serverRequest = $.get(this.props.source,function(<span class="literal">result</span>)&#123;</span><br><span class="line">			<span class="keyword">let</span> lastGist = <span class="literal">result</span>[<span class="number">0</span>];</span><br><span class="line">			this.setState(&#123;</span><br><span class="line">				username: lastGist.owner.login,</span><br><span class="line">				lastGistUrl: lastGist.html_url</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;.<span class="keyword">bind</span>(this))</span><br><span class="line">	&#125;</span><br><span class="line">	componentWillUnmount()&#123;</span><br><span class="line">		this.serverRequest.abort();</span><br><span class="line">	&#125;</span><br><span class="line">	render()&#123;</span><br><span class="line">		<span class="keyword">return</span>(</span><br><span class="line">			&lt;<span class="keyword">div</span>&gt;</span><br><span class="line">				&#123;this.state.username&#125;</span><br><span class="line">				&lt;a href=&#123;this.state.lastGistUrl&#125;&gt;&#123;this.state.lastGistUrl&#125;&lt;/a&gt;</span><br><span class="line">			&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">UserGist</span> source=<span class="string">"https://api.github.com/users/octocat/gists"</span> /&gt;,mountNode);</span><br></pre></td></tr></table></figure>
<h4 id="u5B9E_u4F8B_uFF1A_u62C9_u53D6_u6570_u636E"><a href="#u5B9E_u4F8B_uFF1A_u62C9_u53D6_u6570_u636E" class="headerlink" title="实例：拉取数据"></a>实例：拉取数据</h4><figure class="highlight pf" data-lang=" pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">import $ <span class="keyword">from</span> 'jquery';</span><br><span class="line">import React <span class="keyword">from</span> 'react';</span><br><span class="line">import ReactDOM <span class="keyword">from</span> 'react-dom';</span><br><span class="line">const mountNode = document.getElementById('root');</span><br><span class="line"></span><br><span class="line">class RipoList extends React.Component&#123;</span><br><span class="line">    constructor()&#123;</span><br><span class="line">        super();</span><br><span class="line">        this.<span class="keyword">state</span> = &#123;</span><br><span class="line">            loading: true,</span><br><span class="line">            error: null,</span><br><span class="line">            data: null</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        this.props.promise.then(</span><br><span class="line">            value =&gt; this.<span class="built_in">set</span>State(&#123;</span><br><span class="line">                loading: false,</span><br><span class="line">                data: value</span><br><span class="line">            &#125;),</span><br><span class="line">            error =&gt; this.<span class="built_in">set</span>State(&#123;</span><br><span class="line">                loading: false,</span><br><span class="line">                error: error</span><br><span class="line">            &#125;)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        if(this.<span class="keyword">state</span>.loading)&#123;</span><br><span class="line">            return <span class="variable">&lt;span&gt;</span>Loading...<span class="variable">&lt;/span&gt;</span>;</span><br><span class="line">        &#125;else if(this.<span class="keyword">state</span>.error != null)&#123;</span><br><span class="line">            return  <span class="variable">&lt;span&gt;</span>Error: &#123;this.<span class="keyword">state</span>.error.message&#125;<span class="variable">&lt;/span&gt;</span>;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            let repos = this.<span class="keyword">state</span>.data.items;</span><br><span class="line">            let repoList = repos.map(function(repo,index)&#123;</span><br><span class="line">                return(</span><br><span class="line">                    <span class="variable">&lt;li key=&#123;index&#125;&gt;</span></span><br><span class="line">                        <span class="variable">&lt;a href=&#123;repo.html_url&#125;&gt;</span>&#123;repo.name&#125;<span class="variable">&lt;/a&gt;</span>(&#123;repo.stargazers_count&#125; stars)<span class="variable">&lt;br /&gt;</span></span><br><span class="line">                        &#123;repo.description&#125;</span><br><span class="line">                    <span class="variable">&lt;/li&gt;</span>   </span><br><span class="line">                );</span><br><span class="line">            &#125;);</span><br><span class="line">            return(</span><br><span class="line">                <span class="variable">&lt;main&gt;</span></span><br><span class="line">                    <span class="variable">&lt;h1&gt;</span>Most Popular JavaScript Projects <span class="keyword">in</span> Github<span class="variable">&lt;/h1&gt;</span></span><br><span class="line">                    <span class="variable">&lt;ol&gt;</span>&#123;repoList&#125;<span class="variable">&lt;/ol&gt;</span></span><br><span class="line">                <span class="variable">&lt;/main&gt;</span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(<span class="variable">&lt;RipoList promise=&#123;$.getJSON('https://api.github.com/search/repositories?q=javascript&amp;sort=stars')&#125; /&gt;</span>,mountNode);</span><br></pre></td></tr></table></figure>
<h2 id="Add-Ons__u6DFB_u52A0_u63D2_u4EF6"><a href="#Add-Ons__u6DFB_u52A0_u63D2_u4EF6" class="headerlink" title="Add-Ons 添加插件"></a>Add-Ons 添加插件</h2><h3 id="jquery"><a href="#jquery" class="headerlink" title="jquery"></a>jquery</h3><figure class="highlight scala" data-lang=" scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $ from <span class="symbol">'jquer</span>y';</span><br><span class="line"><span class="keyword">import</span> <span class="type">React</span> from <span class="symbol">'reac</span>t';</span><br><span class="line"><span class="keyword">import</span> <span class="type">ReactDOM</span> from <span class="symbol">'react</span>-dom';</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">React</span>.<span class="title">Component</span>&#123;</span></span><br><span class="line">	render()&#123;</span><br><span class="line">		<span class="keyword">return</span>(</span><br><span class="line">			&lt;div&gt;<span class="type">HelloWorld</span>&lt;/div&gt;</span><br><span class="line">		);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">HelloWorld</span> /&gt;,$('#example')[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>
<h3 id="recharts"><a href="#recharts" class="headerlink" title="recharts"></a>recharts</h3><ul>
<li><a href="http://recharts.org/" target="_blank" rel="external">React图表组件库</a></li>
</ul>
<h3 id="bootstrap"><a href="#bootstrap" class="headerlink" title="bootstrap"></a>bootstrap</h3><ul>
<li><a href="https://react-bootstrap.github.io/" target="_blank" rel="external">React组件库</a></li>
</ul>
<h3 id="MarkdownEditor"><a href="#MarkdownEditor" class="headerlink" title="MarkdownEditor"></a>MarkdownEditor</h3><ul>
<li><a href="https://github.com/jonschlinkert/remarkable" title="Markdown解析器" target="_blank" rel="external">MarkDown</a></li>
</ul>
<h2 id="ReactDOM"><a href="#ReactDOM" class="headerlink" title="ReactDOM"></a>ReactDOM</h2><h3 id="render_28_29-2"><a href="#render_28_29-2" class="headerlink" title="render()"></a>render()</h3><figure class="highlight css" data-lang=" css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">ReactDOM</span><span class="class">.render</span>(</span><br><span class="line">	<span class="tag">element</span>,</span><br><span class="line">	<span class="tag">container</span>,</span><br><span class="line">	<span class="attr_selector">[callback]</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="unmountComponentAtNode_28_29"><a href="#unmountComponentAtNode_28_29" class="headerlink" title="unmountComponentAtNode()"></a>unmountComponentAtNode()</h3><figure class="highlight stylus" data-lang=" stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.<span class="function"><span class="title">unmountComponentAtNode</span><span class="params">(container)</span></span></span><br></pre></td></tr></table></figure>
<h3 id="findDOMNode_28_29"><a href="#findDOMNode_28_29" class="headerlink" title="findDOMNode()"></a>findDOMNode()</h3><figure class="highlight stylus" data-lang=" stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.<span class="function"><span class="title">findDOMNode</span><span class="params">(component)</span></span></span><br></pre></td></tr></table></figure>
<p>### </p>
<h4 id="onkeypress"><a href="#onkeypress" class="headerlink" title="onkeypress"></a>onkeypress</h4><p>/<em> 在实例中，我们使用了支持多浏览器的方法，因为 keyCode 属性无法再 Firefox 浏览器中工作。但是 which 属性可以。<br>如果浏览器支持 event.which 则使用 event.which，否则使用 event.keyCode </em>/</p>
<h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><p><a href="http://es6.ruanyifeng.com/" title="阮一峰" target="_blank" rel="external">ECMAScript 6 入门</a></p>
<h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p>用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。</p>
<blockquote>
<p>for循环的计数器</p>
</blockquote>
<figure class="highlight cpp" data-lang=" cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (let i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;&#125;</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(i);</span><br><span class="line"><span class="comment">//ReferenceError: i is not defined</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>下面的代码如果使用var，最后输出的是10</p>
</blockquote>
<figure class="highlight javascript" data-lang=" javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果使用let，声明的变量仅在块级作用域内有效，最后输出的是6</p>
</blockquote>
<figure class="highlight javascript" data-lang=" javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u6982_u51B5"><a href="#u6982_u51B5" class="headerlink" title="概况"></a>概况</h2><p>React 起源于 Facebook 的内部F8项目，用来架设 Instagram 的网站，并于 2013 年 5 月开源。<br>React主要用于构建UI，很多人认为 React 是 MVC 中的 V（视图）。<br>React 拥有较高的性能，代码逻辑非常简单，越来越多的人已开始关注和使用它。E6语法。</p>
<h3 id="React__u7279_u70B9"><a href="#React__u7279_u70B9" class="headerlink" title="React 特点"></a>React 特点</h3><ol>
<li>声明式设计 −React采用声明范式，可以轻松描述应用。</li>
<li>高效 −React通过对DOM的模拟，最大限度地减少与DOM的交互。</li>
<li>灵活 −React可以与已知的库或框架很好地配合。</li>
<li>JSX − JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX ，但我们建议使用它。</li>
<li>组件 − 通过 React 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。</li>
<li>单向响应的数据流 − React 实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单。</li>
</ol>
<ul>
<li><a href="http://facebook.github.io/react/">官网地址</a>]]>
    
    </summary>
    
      <category term="React" scheme="http://luuman.github.io/tags/React/"/>
    
      <category term="React" scheme="http://luuman.github.io/categories/React/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用CSS实现元素垂直居中方案]]></title>
    <link href="http://luuman.github.io/2017/01/02/Induce/CSS/CSSElementAlign/"/>
    <id>http://luuman.github.io/2017/01/02/Induce/CSS/CSSElementAlign/</id>
    <published>2017-01-02T10:29:00.000Z</published>
    <updated>2017-02-18T11:06:16.000Z</updated>
    <content type="html"><![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br><a id="more"></a></p>
<h3 id="u56FA_u5B9A_u9AD8_u5EA6_u7EDD_u5BF9_u5B9A_u4F4D"><a href="#u56FA_u5B9A_u9AD8_u5EA6_u7EDD_u5BF9_u5B9A_u4F4D" class="headerlink" title="固定高度绝对定位"></a>固定高度绝对定位</h3><blockquote>
<p>使用position:absolute,设置left、top、margin-left、margin-top的属性<br>这种方法基本浏览器都能够兼容，不足之处就是需要固定宽高。</p>
</blockquote>
<figure class="highlight css" data-lang=" css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.one</span><span class="rules">&#123;</span><br><span class="line">	<span class="rule"><span class="attribute">position</span>:<span class="value">absolute</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">200px</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">200px</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">top</span>:<span class="value"><span class="number">50%</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">left</span>:<span class="value"><span class="number">50%</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">margin-top</span>:<span class="value">-<span class="number">100px</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">margin-left</span>:<span class="value">-<span class="number">100px</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">background</span>:<span class="value">red</span></span>; </span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p><div class="one">one</div></p>
<style type="text/css">
    .one{
        position:absolute;
        width:200px;
        height:200px;
        top:50%;
        left:50%;
        margin-top:-100px;
        margin-left:-100px;
        background:red; 
    }
</style>

<h3 id="u4F7F_u7528position_3Afixed_2C_u540C_u6837_u8BBE_u7F6Eleft_u3001top_u3001margin-left_u3001margin-top_u7684_u5C5E_u6027"><a href="#u4F7F_u7528position_3Afixed_2C_u540C_u6837_u8BBE_u7F6Eleft_u3001top_u3001margin-left_u3001margin-top_u7684_u5C5E_u6027" class="headerlink" title="使用position:fixed,同样设置left、top、margin-left、margin-top的属性"></a>使用position:fixed,同样设置left、top、margin-left、margin-top的属性</h3><figure class="highlight css" data-lang=" css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.two</span><span class="rules">&#123;</span><br><span class="line">	<span class="rule"><span class="attribute">position</span>:<span class="value">fixed</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">180px</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">180px</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">top</span>:<span class="value"><span class="number">50%</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">left</span>:<span class="value"><span class="number">50%</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">margin-top</span>:<span class="value">-<span class="number">90px</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">margin-left</span>:<span class="value">-<span class="number">90px</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">background</span>:<span class="value">orange</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>大家都知道的position:fixed,IE是不支持这个属性的</p>
<p><div class="two">two</div></p>
<style type="text/css">
    .two{
        position:fixed;
        width:180px;
        height:180px;
        top:50%;
        left:50%;
        margin-top:-90px;
        margin-left:-90px;
        background:orange;
    }
</style>
### 利用position:fixed属性，margin:auto这个必须不要忘记了。
<figure class="highlight css" data-lang=" css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.three</span><span class="rules">&#123;</span><br><span class="line">	<span class="rule"><span class="attribute">position</span>:<span class="value">fixed</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">160px</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">160px</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">top</span>:<span class="value"><span class="number">0</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">right</span>:<span class="value"><span class="number">0</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">bottom</span>:<span class="value"><span class="number">0</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">left</span>:<span class="value"><span class="number">0</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">margin</span>:<span class="value">auto</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">background</span>:<span class="value">pink</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>

<div class="three">three</div>
<style type="text/css">
    .three{
        position:fixed;
        width:160px;
        height:160px;
        top:0;
        right:0;
        bottom:0;
        left:0;
        margin:auto;
        background:pink;
    }
</style>
### 利用position:absolute属性，设置top/bottom/right/left
<figure class="highlight css" data-lang=" css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.four</span><span class="rules">&#123;</span><br><span class="line">	<span class="rule"><span class="attribute">position</span>:<span class="value">absolute</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">140px</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">140px</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">top</span>:<span class="value"><span class="number">0</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">right</span>:<span class="value"><span class="number">0</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">bottom</span>:<span class="value"><span class="number">0</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">left</span>:<span class="value"><span class="number">0</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">margin</span>:<span class="value">auto</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">background</span>:<span class="value">black</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>

<div class="four">four</div>
<style type="text/css">
    .four{
        position:absolute;
        width:140px;
        height:140px;
        top:0;
        right:0;
        bottom:0;
        left:0;
        margin:auto;
        background:black;
    }
</style>
### 文字垂直水平居中
>利用display:table-cell属性使内容垂直居中

<figure class="highlight css" data-lang=" css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.five</span><span class="rules">&#123;</span><br><span class="line">	<span class="rule"><span class="attribute">display</span>:<span class="value">table-cell</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">vertical-align</span>:<span class="value">middle</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">text-align</span>:<span class="value">center</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">120px</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">120px</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">background</span>:<span class="value">purple</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>

<div class="five">five</div>
<style type="text/css">
    .five{
        display:table-cell;
        vertical-align:middle;
        text-align:center;
        width:120px;
        height:120px;
        background:purple;
    }
</style>
### 文字垂直水平居中
>最简单的一种使行内元素居中的方法，使用line-height属性
这种方法也很实用，比如使文字垂直居中对齐

<figure class="highlight css" data-lang=" css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.six</span><span class="rules">&#123;</span><br><span class="line">	<span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">100px</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">100px</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">line-height</span>:<span class="value"><span class="number">100px</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">text-align</span>:<span class="value">center</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">background</span>:<span class="value">gray</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>

<div class="six">six</div>
<style type="text/css">
    .six{
        width:100px;
        height:100px;
        line-height:100px;
        text-align:center;
        background:gray;
    }
</style>
### 文字垂直水平居中
>使用css3的display:-webkit-box属性，再设置-webkit-box-pack:center/-webkit-box-align:center

<figure class="highlight css" data-lang=" css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.seven</span><span class="rules">&#123;</span><br><span class="line">	<span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">90px</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">90px</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">display</span>:<span class="value">-webkit-box</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">-webkit-box-pack</span>:<span class="value">center</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">-webkit-box-align</span>:<span class="value">center</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">background</span>:<span class="value">yellow</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">color</span>:<span class="value">black</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>

<div class="seven">seven</div>
<style type="text/css">
    .seven{
        width:90px;
        height:90px;
        display:-webkit-box;
        -webkit-box-pack:center;
        -webkit-box-align:center;
        background:yellow;
        color:black;
    }
</style>
### CSS translate偏移
>使用css3的新属性transform:translate(x,y)属性
这个方法可以不需要设定固定的宽高，在移动端用的会比较多，在移动端css3兼容的比较好

<figure class="highlight css" data-lang=" css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.eight</span><span class="rules">&#123;</span><br><span class="line">	<span class="rule"><span class="attribute">position</span>:<span class="value">absolute</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">80px</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">80px</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">top</span>:<span class="value"><span class="number">50%</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">left</span>:<span class="value"><span class="number">50%</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">transform</span>:<span class="value"><span class="function">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>)</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"><span class="function">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>)</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">-moz-transform</span>:<span class="value"><span class="function">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>)</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">-ms-transform</span>:<span class="value"><span class="function">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>)</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">background</span>:<span class="value">green</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>

<div class="eight">eight</div>
<style type="text/css">
    .eight{
        position:absolute;
        width:80px;
        height:80px;
        top:50%;
        left:50%;
        transform:translate(-50%,-50%);
        -webkit-transform:translate(-50%,-50%);
        -moz-transform:translate(-50%,-50%);
        -ms-transform:translate(-50%,-50%);
        background:green;
    }
</style>
### before元素
>最高大上的一种，使用:before元素

<figure class="highlight css" data-lang=" css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.nine</span><span class="rules">&#123;</span><br><span class="line">	<span class="rule"><span class="attribute">position</span>:<span class="value">fixed</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">display</span>:<span class="value">block</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">top</span>:<span class="value"><span class="number">0</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">right</span>:<span class="value"><span class="number">0</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">bottom</span>:<span class="value"><span class="number">0</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">left</span>:<span class="value"><span class="number">0</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">text-align</span>:<span class="value">center</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">background</span>:<span class="value"><span class="function">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>)</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.nine</span><span class="pseudo">:before</span><span class="rules">&#123;</span><br><span class="line">	<span class="rule"><span class="attribute">content</span>:<span class="value"><span class="string">''</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">display</span>:<span class="value">inline-block</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">vertical-align</span>:<span class="value">middle</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">100%</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.nine</span> <span class="class">.content</span><span class="rules">&#123;</span><br><span class="line">	<span class="rule"><span class="attribute">display</span>:<span class="value">inline-block</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">vertical-align</span>:<span class="value">middle</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">60px</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">60px</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">line-height</span>:<span class="value"><span class="number">60px</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">color</span>:<span class="value">red</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">background</span>:<span class="value">yellow</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>

<div class="nine"><div class="content">nine</div></div>
<style type="text/css">
    .nine{
        position:fixed;
        display:block;
        top:0;
        right:0;
        bottom:0;
        left:0;
        text-align:center;
        background:rgba(0,0,0,.1);
    }
    .nine:before{
        content:'';
        display:inline-block;
        vertical-align:middle;
        height:100%;
    }
    .nine .content{
        display:inline-block;
        vertical-align:middle;
        width:60px;
        height:60px;
        line-height:60px;
        color:red;
        background:yellow;
    }
</style>]]></content>
    <summary type="html">
    <![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://luuman.github.io/tags/CSS/"/>
    
      <category term="CSS" scheme="http://luuman.github.io/categories/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HTML前端代码规范]]></title>
    <link href="http://luuman.github.io/2016/12/31/Skill/norm/normhtml/"/>
    <id>http://luuman.github.io/2016/12/31/Skill/norm/normhtml/</id>
    <published>2016-12-31T10:29:00.000Z</published>
    <updated>2017-02-18T10:58:36.000Z</updated>
    <content type="html"><![CDATA[<p>　　<strong>规范：</strong>你是否常常碰到以下问题：你总是看不懂他写的代码，或者读起来很吃力；你需要改他的代码却无从下手，或总是要去问他这里是什么改了会不会影响其他代码；你和他一起开发一个产品，你总是怕代码和他有冲突或互相影响；你的代码在多次维护任务之后变得越来越臃肿，越来越难以维护。解决以上问题只需一种方法——读我们的规范！<br><a id="more"></a></p>
<h2 id="u6574_u4F53_u7ED3_u6784"><a href="#u6574_u4F53_u7ED3_u6784" class="headerlink" title="整体结构"></a>整体结构</h2><h3 id="HTML_u57FA_u7840_u8BBE_u65BD"><a href="#HTML_u57FA_u7840_u8BBE_u65BD" class="headerlink" title="HTML基础设施"></a>HTML基础设施</h3><p>文件应以“&lt;!DOCTYPE ……&gt;”首行顶格开始，推荐使用“&lt;!DOCTYPE html&gt;”。<br>必须申明文档的编码charset，且与文件本身编码保持一致，推荐使用UTF-8编码<meta charset="utf-8">。<br>根据页面内容和需求填写适当的keywords和description。<br>页面title是极为重要的不可缺少的一项。</p>
<figure class="highlight xml" data-lang=" xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">title</span>&gt;</span>NEC：更好的CSS方案<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"keywords"</span> <span class="attribute">content</span>=<span class="value">""</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"description"</span> <span class="attribute">content</span>=<span class="value">""</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"viewport"</span> <span class="attribute">content</span>=<span class="value">"width=device-width"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"css/style.css"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"shortcut icon"</span> <span class="attribute">href</span>=<span class="value">"img/favicon.ico"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"apple-touch-icon"</span> <span class="attribute">href</span>=<span class="value">"img/touchicon.png"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="u7ED3_u6784_u987A_u5E8F_u548C_u89C6_u89C9_u987A_u5E8F_u57FA_u672C_u4FDD_u6301_u4E00_u81F4"><a href="#u7ED3_u6784_u987A_u5E8F_u548C_u89C6_u89C9_u987A_u5E8F_u57FA_u672C_u4FDD_u6301_u4E00_u81F4" class="headerlink" title="结构顺序和视觉顺序基本保持一致"></a>结构顺序和视觉顺序基本保持一致</h3><p>按照从上至下、从左到右的视觉顺序书写HTML结构。<br>有时候为了便于搜索引擎抓取，我们也会将重要内容在HTML结构顺序上提前。<br>用div代替table布局，可以使HTML更具灵活性，也方便利用CSS控制。<br>table不建议用于布局，但表现具有明显表格形式的数据，table还是首选。<br>结构、表现、行为三者分离，避免内联<br>使用link将css文件引入，并置于head中。<br>使用script将js文件引入，并置于body底部。<br>保持良好的简洁的树形结构<br>每一个块级元素都另起一行，每一行都使用Tab缩进对齐（head和body的子元素不需要缩进）。删除冗余的行尾的空格。<br>使用4个空格代替1个Tab（大多数编辑器中可设置）。<br>对于内容较为简单的表格，建议将tr写成单行。<br>你也可以在大的模块之间用空行隔开，使模块更清晰。</p>
<figure class="highlight xml" data-lang=" xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 侧栏内容区 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"m-side"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"side"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"sidein"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 热门标签 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"sideblk"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"m-hd3"</span>&gt;</span><span class="tag">&lt;<span class="title">h3</span> <span class="attribute">class</span>=<span class="value">"tit"</span>&gt;</span>热门标签<span class="tag">&lt;/<span class="title">h3</span>&gt;</span> <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">                ...</span><br><span class="line">            <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 最热TOP5 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"sideblk"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"m-hd3"</span>&gt;</span><span class="tag">&lt;<span class="title">h3</span> <span class="attribute">class</span>=<span class="value">"tit"</span>&gt;</span>最热TOP5<span class="tag">&lt;/<span class="title">h3</span>&gt;</span> <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"s-fc02 f-fr"</span>&gt;</span>更多»<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">                ...</span><br><span class="line">            <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /侧栏内容区 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="u53E6_u5916_uFF0C_u8BF7_u505A_u5230_u4EE5_u4E0B_u51E0_u70B9"><a href="#u53E6_u5916_uFF0C_u8BF7_u505A_u5230_u4EE5_u4E0B_u51E0_u70B9" class="headerlink" title="另外，请做到以下几点"></a>另外，请做到以下几点</h3><ol>
<li>结构上如果可以并列书写，就不要嵌套。如果可以写成<code>&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;</code>那么就不要写成<code>&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;</code></li>
<li>如果结构已经可以满足视觉和语义的要求，那么就不要有额外的冗余的结构。比如<code>&lt;div&gt;&lt;h2&gt;&lt;/h2&gt;&lt;/div&gt;</code>已经能满足要求，那么就不要再写成<code>&lt;div&gt;&lt;div&gt;&lt;h2&gt;&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;</code></li>
<li>一个标签上引用的className不要过多，越少越好。比如不要出现这种情况：<code>&lt;div class=&quot;class1 class2 class3 class4&quot;&gt;&lt;/div&gt;</code></li>
<li>对于一个语义化的内部标签，应尽量避免使用className。比如在这样一个列表中，li标签中的itm应去除：<code>&lt;ul class=&quot;m-help&quot;&gt;&lt;li class=&quot;itm&quot;&gt;&lt;/li&gt;&lt;li class=&quot;itm&quot;&gt;&lt;/li&gt;&lt;/ul&gt;</code></li>
</ol>
<h2 id="u4EE3_u7801_u683C_u5F0F"><a href="#u4EE3_u7801_u683C_u5F0F" class="headerlink" title="代码格式"></a>代码格式</h2><h3 id="u8BF4_u660E_u6587_u6848_u7684_u6CE8_u91CA_u65B9_u6CD5"><a href="#u8BF4_u660E_u6587_u6848_u7684_u6CE8_u91CA_u65B9_u6CD5" class="headerlink" title="说明文案的注释方法"></a>说明文案的注释方法</h3><p>采用类似标签闭合的写法，与HTML统一格式；注释文案两头空格，与CSS注释统一格式。</p>
<p>开始注释：<!-- 注释文案 -->（文案两头空格）。<br>结束注释：<!-- /注释文案 -->（文案前加“/”符号，类似标签的闭合）。<br>允许只有开始注释！</p>
<figure class="highlight xml" data-lang=" xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 头部 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"g-hd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- LOGO --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h1</span> <span class="attribute">class</span>=<span class="value">"m-logo"</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span>LOGO<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /LOGO --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导航 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">ul</span> <span class="attribute">class</span>=<span class="value">"m-nav"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span>NAV1<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span>NAV2<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 更多导航项 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /导航 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /头部 --&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="u4EE3_u7801_u672C_u8EAB_u7684_u6CE8_u91CA_u65B9_u6CD5"><a href="#u4EE3_u7801_u672C_u8EAB_u7684_u6CE8_u91CA_u65B9_u6CD5" class="headerlink" title="代码本身的注释方法"></a>代码本身的注释方法</h3><p>单行代码的注释也保持同行，两端空格；多行代码的注释起始和结尾都另起一行并左缩进对齐。</p>
<figure class="highlight xml" data-lang=" xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;h1 class="m-logo"&gt;&lt;a href="#"&gt;LOGO&lt;/a&gt;&lt;/h1&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span><br><span class="line">&lt;ul class="m-nav"&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href="#"&gt;NAV1&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href="#"&gt;NAV2&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">--&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="HTML_u6CE8_u91CA_u5728IE6_u4E2D_u7684BUG"><a href="#HTML_u6CE8_u91CA_u5728IE6_u4E2D_u7684BUG" class="headerlink" title="HTML注释在IE6中的BUG"></a>HTML注释在IE6中的BUG</h3><p>如果两个浮动元素之间存在注释，那么可能导致布局错位或文字的BUG。<br>所以，这种情况下，我们通常将注释去掉，或者索性采用模板语言（ftl、vm）的注释。</p>
<h3 id="u4E25_u683C_u7684_u5D4C_u5957"><a href="#u4E25_u683C_u7684_u5D4C_u5957" class="headerlink" title="严格的嵌套"></a>严格的嵌套</h3><p>尽可能以最严格的xhtml strict标准来嵌套，比如内联元素不能包含块级元素等等。<br>正确闭合标签且必须闭合。</p>
<h3 id="u4E25_u683C_u7684_u5C5E_u6027"><a href="#u4E25_u683C_u7684_u5C5E_u6027" class="headerlink" title="严格的属性"></a>严格的属性</h3><p>属性和值全部小写，每个属性都必须有一个值，每个值必须加双引号。<br>没有值的属性必须使用自己的名称做为值（checked、disabled、readonly、selected等等）。<br>可以省略style标签和script标签的type属性。</p>
<h3 id="u5E38_u7528_u7684_u6807_u7B7E"><a href="#u5E38_u7528_u7684_u6807_u7B7E" class="headerlink" title="常用的标签"></a>常用的标签</h3><table>
<thead>
<tr>
<th>标签</th>
<th>语义</th>
<th style="text-align:center">嵌套常见错误</th>
<th>常用属性（加粗的为不可缺少的或建议的）</th>
</tr>
</thead>
<tbody>
<tr>
<td>a</td>
<td>超链接/锚</td>
<td style="text-align:center">a不可嵌套a</td>
<td>href,name,title,rel,target</td>
</tr>
<tr>
<td>br</td>
<td>换行</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>button</td>
<td>按钮</td>
<td style="text-align:center">不可嵌套表单元素</td>
<td>type,disabled</td>
</tr>
<tr>
<td>dd</td>
<td>定义列表中的定义（描述内容）</td>
<td style="text-align:center">只能以dl为父容器，对应一个dt</td>
<td></td>
</tr>
<tr>
<td>del</td>
<td>文本删除</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>div</td>
<td>块级容器</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>dl</td>
<td>定义列表</td>
<td style="text-align:center">只能嵌套dt和dd</td>
<td></td>
</tr>
<tr>
<td>dt</td>
<td>定义列表中的定义术语</td>
<td style="text-align:center">只能以dl为父容器，对应多个dd</td>
<td></td>
</tr>
<tr>
<td>em</td>
<td>强调文本</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>form</td>
<td>表单</td>
<td style="text-align:center">action</td>
<td>,target,method,name</td>
</tr>
<tr>
<td>h1</td>
<td>标题</td>
<td style="text-align:center">从h1到h6，不可嵌套块级元素</td>
<td></td>
</tr>
<tr>
<td>iframe</td>
<td>内嵌一个网页</td>
<td style="text-align:center">frameborder</td>
<td>,width,height,src,scrolling,name</td>
</tr>
<tr>
<td>img</td>
<td>图像</td>
<td style="text-align:center">alt</td>
<td>,src,width,height</td>
</tr>
<tr>
<td>input</td>
<td>各种表单控件</td>
<td style="text-align:center">type</td>
<td>,name,value,checked,disabled,maxlength,readonly,accesskey</td>
</tr>
<tr>
<td>label</td>
<td>标签为input元素定义标注</td>
<td style="text-align:center">for</td>
<td></td>
</tr>
<tr>
<td>li</td>
<td>列表项</td>
<td style="text-align:center">只能以ul或ol为父容器</td>
<td></td>
</tr>
<tr>
<td>link</td>
<td>引用样式或icon</td>
<td style="text-align:center">不可嵌套任何元素</td>
<td>type,rel,href</td>
</tr>
<tr>
<td>meta</td>
<td>文档信息</td>
<td style="text-align:center">只用于head</td>
<td>content,http-equiv,name</td>
</tr>
<tr>
<td>ol</td>
<td>有序列表</td>
<td style="text-align:center">只能嵌套li</td>
<td></td>
</tr>
<tr>
<td>option</td>
<td>select中的一个选项</td>
<td style="text-align:center">仅用于select</td>
<td>value,selected,disabled</td>
</tr>
<tr>
<td>p</td>
<td>段落</td>
<td style="text-align:center">不能嵌套块级元素</td>
<td></td>
</tr>
<tr>
<td>script</td>
<td>引用脚本</td>
<td style="text-align:center">不可嵌套任何元素</td>
<td>type,src</td>
</tr>
<tr>
<td>select</td>
<td>列表框或下拉框</td>
<td style="text-align:center">只能嵌套option或optgroup</td>
<td>name,disabled,multiple</td>
</tr>
<tr>
<td>span</td>
<td>内联容器</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>strong</td>
<td>强调文本</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>style</td>
<td>引用样式</td>
<td style="text-align:center">不可嵌套任何元素</td>
<td>type,media</td>
</tr>
<tr>
<td>sub</td>
<td>下标</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>sup</td>
<td>上标</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>table</td>
<td>表格</td>
<td style="text-align:center">只可嵌套表格元素</td>
<td>width,align,background,cellpadding,cellspacing,summary,border</td>
</tr>
<tr>
<td>tbody</td>
<td>表格主体</td>
<td style="text-align:center">只用于table</td>
<td></td>
</tr>
<tr>
<td>td</td>
<td>表格中的单元格</td>
<td style="text-align:center">只用于tr</td>
<td>colspan,rowspan</td>
</tr>
<tr>
<td>textarea</td>
<td>多行文本输入控件</td>
<td style="text-align:center">name</td>
<td>,accesskey,disabled,readonly,rows,cols</td>
</tr>
<tr>
<td>tfoot</td>
<td>表格表尾</td>
<td style="text-align:center">只用于table</td>
<td></td>
</tr>
<tr>
<td>th</td>
<td>表格中的标题单元格</td>
<td style="text-align:center">只用于tr</td>
<td>colspan,rowspan</td>
</tr>
<tr>
<td>thead</td>
<td>表格表头</td>
<td style="text-align:center">只用于table</td>
<td></td>
</tr>
<tr>
<td>title</td>
<td>文档标题</td>
<td style="text-align:center">只用于head</td>
<td></td>
</tr>
<tr>
<td>tr</td>
<td>表格行</td>
<td style="text-align:center">嵌套于table或thead、tbody、tfoot</td>
<td></td>
</tr>
<tr>
<td>ul</td>
<td>无序列表</td>
<td style="text-align:center">只能嵌套li</td>
</tr>
</tbody>
</table>
<h2 id="u5185_u5BB9_u8BED_u4E49"><a href="#u5185_u5BB9_u8BED_u4E49" class="headerlink" title="内容语义"></a>内容语义</h2><h3 id="CSS_u6587_u4EF6_u7684_u5206_u7C7B"><a href="#CSS_u6587_u4EF6_u7684_u5206_u7C7B" class="headerlink" title="CSS文件的分类"></a>CSS文件的分类</h3><h3 id="u5185_u5BB9_u7C7B_u578B_u51B3_u5B9A_u4F7F_u7528_u7684_u8BED_u4E49_u6807_u7B7E"><a href="#u5185_u5BB9_u7C7B_u578B_u51B3_u5B9A_u4F7F_u7528_u7684_u8BED_u4E49_u6807_u7B7E" class="headerlink" title="内容类型决定使用的语义标签"></a>内容类型决定使用的语义标签</h3><p>在网页中某种类型的内容必定需要某种特定的HTML标签来承载，也就是我们常常提到的根据你的内容语义化HTML结构。</p>
<h3 id="u52A0_u5F3A_u201C_u8D44_u6E90_u578B_u201D_u5185_u5BB9_u7684_u53EF_u8BBF_u95EE_u6027_u548C_u53EF_u7528_u6027"><a href="#u52A0_u5F3A_u201C_u8D44_u6E90_u578B_u201D_u5185_u5BB9_u7684_u53EF_u8BBF_u95EE_u6027_u548C_u53EF_u7528_u6027" class="headerlink" title="加强“资源型”内容的可访问性和可用性"></a>加强“资源型”内容的可访问性和可用性</h3><p>在资源型的内容上加入描述文案，比如给img添加alt属性，在audio内加入文案和链接等等。</p>
<h3 id="u52A0_u5F3A_u201C_u4E0D_u53EF_u89C1_u201D_u5185_u5BB9_u7684_u53EF_u8BBF_u95EE_u6027"><a href="#u52A0_u5F3A_u201C_u4E0D_u53EF_u89C1_u201D_u5185_u5BB9_u7684_u53EF_u8BBF_u95EE_u6027" class="headerlink" title="加强“不可见”内容的可访问性"></a>加强“不可见”内容的可访问性</h3><p>背景图上的文字应该同时写在html中，并使用css使其不可见，有利于搜索引擎抓取你的内容，也可以在css失效的情况下看到内容。</p>
<h3 id="u9002_u5F53_u4F7F_u7528_u5B9E_u4F53"><a href="#u9002_u5F53_u4F7F_u7528_u5B9E_u4F53" class="headerlink" title="适当使用实体"></a>适当使用实体</h3><p>以实体代替与HTML语法相同的字符，避免浏览解析错误。</p>
<h3 id="u5E38_u7528HTML_u5B57_u7B26_u5B9E_u4F53_uFF08_u5EFA_u8BAE_u4F7F_u7528_u5B9E_u4F53_uFF09_uFF1A"><a href="#u5E38_u7528HTML_u5B57_u7B26_u5B9E_u4F53_uFF08_u5EFA_u8BAE_u4F7F_u7528_u5B9E_u4F53_uFF09_uFF1A" class="headerlink" title="常用HTML字符实体（建议使用实体）："></a>常用HTML字符实体（建议使用实体）：</h3><table>
<thead>
<tr>
<th>字符</th>
<th style="text-align:center">名称</th>
<th>实体名</th>
<th style="text-align:center">实体数</th>
</tr>
</thead>
<tbody>
<tr>
<td>“</td>
<td style="text-align:center">双引号</td>
<td>&quot;</td>
<td style="text-align:center">&#34;</td>
</tr>
<tr>
<td>&amp;</td>
<td style="text-align:center">&amp;符</td>
<td>&amp;</td>
<td style="text-align:center">&#38;</td>
</tr>
<tr>
<td>&lt;</td>
<td style="text-align:center">左尖括号（小于号）</td>
<td>&lt;</td>
<td style="text-align:center">&#60;</td>
</tr>
<tr>
<td>&gt;</td>
<td style="text-align:center">右尖括号（大于号）</td>
<td>&gt;</td>
<td style="text-align:center">&#62;</td>
</tr>
<tr>
<td></td>
<td style="text-align:center">空格</td>
<td>&nbsp;</td>
<td style="text-align:center">&#160;</td>
</tr>
<tr>
<td></td>
<td style="text-align:center">中文全角空格</td>
<td></td>
<td style="text-align:center">&#12288;</td>
</tr>
</tbody>
</table>
<p>常用特殊字符实体（不建议使用实体）：</p>
<table>
<thead>
<tr>
<th>字符</th>
<th style="text-align:center">名称</th>
<th>实体名</th>
<th style="text-align:center">实体数</th>
</tr>
</thead>
<tbody>
<tr>
<td>¥</td>
<td style="text-align:center">元</td>
<td>&yen;</td>
<td style="text-align:center">&#165;</td>
</tr>
<tr>
<td>¦</td>
<td style="text-align:center">断竖线</td>
<td>&brvbar;</td>
<td style="text-align:center">&#166;</td>
</tr>
<tr>
<td>©</td>
<td style="text-align:center">版权</td>
<td>&copy;</td>
<td style="text-align:center">&#169;</td>
</tr>
<tr>
<td>®</td>
<td style="text-align:center">注册商标R</td>
<td>&reg;</td>
<td style="text-align:center">&#174;</td>
</tr>
<tr>
<td>™</td>
<td style="text-align:center">商标TM</td>
<td>&trade;</td>
<td style="text-align:center">&#8482;</td>
</tr>
<tr>
<td>·</td>
<td style="text-align:center">间隔符</td>
<td>&middot;</td>
<td style="text-align:center">&#183;</td>
</tr>
<tr>
<td>«</td>
<td style="text-align:center">左双尖括号</td>
<td>&laquo;</td>
<td style="text-align:center">&#171;</td>
</tr>
<tr>
<td>»</td>
<td style="text-align:center">右双尖括号</td>
<td>&raquo;</td>
<td style="text-align:center">&#187;</td>
</tr>
<tr>
<td>°</td>
<td style="text-align:center">度</td>
<td>&deg;</td>
<td style="text-align:center">&#176;</td>
</tr>
<tr>
<td>×</td>
<td style="text-align:center">乘</td>
<td>&times;</td>
<td style="text-align:center">&#215;</td>
</tr>
<tr>
<td>÷</td>
<td style="text-align:center">除</td>
<td>&divide;</td>
<td style="text-align:center">&#247;</td>
</tr>
<tr>
<td>‰</td>
<td style="text-align:center">千分比</td>
<td>&permil;</td>
<td style="text-align:center">&#8240;</td>
</tr>
</tbody>
</table>
<h2 id="u90AE_u4EF6_u5185_u5BB9"><a href="#u90AE_u4EF6_u5185_u5BB9" class="headerlink" title="邮件内容"></a>邮件内容</h2><h3 id="u90AE_u4EF6_u73AF_u5883"><a href="#u90AE_u4EF6_u73AF_u5883" class="headerlink" title="邮件环境"></a>邮件环境</h3><p>邮件内容所在上下文或者说所在外部容器（以下简称环境）都是由邮箱服务商决定的，这就要求邮件内容需要在任何一种情况下都要正确显示。<br>这些环境可能是以下某几种情况：</p>
<ol>
<li>可能是个iframe，你的内容是被放在body里面的；可能只是个div，你的内容就被放在这个div里面。</li>
<li>可能邮箱自身设置了些css，他可能对你产生未知的影响。</li>
<li>可能根本没有申明doctype，即使申明了，也不是你想要的doctype。</li>
</ol>
<h3 id="u907F_u514D_u88AB_u5D4C_u5957_u5728_u4E0D_u6B63_u786E_u7684_u5BB9_u5668_u91CC"><a href="#u907F_u514D_u88AB_u5D4C_u5957_u5728_u4E0D_u6B63_u786E_u7684_u5BB9_u5668_u91CC" class="headerlink" title="避免被嵌套在不正确的容器里"></a>避免被嵌套在不正确的容器里</h3><p>惑：因为容器可能是body或div，所以，我们邮件内容不应该是一个完整的html。<br>解：所以邮件内容应该是以div为根节点的html片段。</p>
<h3 id="u907F_u514Dcss_u51B2_u7A81_u6216_u88AB_u8986_u76D6"><a href="#u907F_u514Dcss_u51B2_u7A81_u6216_u88AB_u8986_u76D6" class="headerlink" title="避免css冲突或被覆盖"></a>避免css冲突或被覆盖</h3><p>惑：因为环境中可能已经设置了css，比如一些reset、一些.class。<br>解：所以我们只能使用行内style来确保我们的效果，并且在内容根节点上设置基础style，并且尽量使用div、span等无语义标签。</p>
<figure class="highlight xml" data-lang=" xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根节点 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"width:600px;text-align:left;color:#000;font:normal 12px/15px arial,simsun;background:#fff;"</span>&gt;</span></span><br><span class="line">    内容区域</span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 根节点-邮件内容居中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"text-align:center;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"width:600px;margin:0 auto;text-align:left;color:#000;font:normal 12px/15px arial,simsun;background:#fff;"</span>&gt;</span></span><br><span class="line">        内容区域</span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果使用语义化标签，那么需要多写一些style，以避免被环境中的css覆盖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">h2</span> <span class="attribute">style</span>=<span class="value">"width:100px;height:100px;margin:0;padding:0;fong-weight:normal;font-size:12px;"</span>&gt;</span><span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 而使用无语义标签，就可以省下很多style --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"width:100px;height:100px;"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="u907F_u514D_u76D2_u6A21_u578B_u9519_u8BEF"><a href="#u907F_u514D_u76D2_u6A21_u578B_u9519_u8BEF" class="headerlink" title="避免盒模型错误"></a>避免盒模型错误</h3><p>惑：因为doctype的不确定性，我们在写style的时候，应该考虑无论doctype是什么情况，都可以正常显示，doctype影响最大的就是盒模型的解析。<br>解：所以我们要将盒模型拆分开来写，比如我们将原本要定义在某个div上的height和padding分别写到这个div和他的父元素或子元素上。</p>
<figure class="highlight xml" data-lang=" xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"height:100px;padding:20px 0;"</span>&gt;</span>内容<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 上面的写法应该改成以下写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"padding:20px 0;"</span>&gt;</span><span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"height:100px;"</span>&gt;</span>内容<span class="tag">&lt;/<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="u5176_u4ED6_u6CE8_u610F_u4E8B_u9879"><a href="#u5176_u4ED6_u6CE8_u610F_u4E8B_u9879" class="headerlink" title="其他注意事项"></a>其他注意事项</h3><p>因为只能使用行内style，所以清除浮动需要使用额外标签。<br>避免使用绝对定位，可能会被过滤。<br>避免使用js，可能会被过滤。<br>避免使用table布局，不易于修改维护。<br>背景图片或内容图片上的文字信息，必须在代码中可见。<br>如果没有特殊要求，所有a链接都要从新窗口打开，即target=”_blank”，且a标签内容不能为空。<br>所有链接必须设置使用颜色、是否下划线，即style=”text-decoration:;color:;”。<br>重点检查ie！！！</p>
<figure class="highlight xml" data-lang=" xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"width:600px;text-align:left;color:#000;font:normal 12px/15px simsun;background:#d9d9d9;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"height:268px;background:url(images/bg1.jpg) no-repeat;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"height:228px;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"padding:21px 0 0 21px;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://yuedu.163.com/"</span> <span class="attribute">target</span>=<span class="value">"_blank"</span> <span class="attribute">style</span>=<span class="value">"display:block;width:111px;height:28px;overflow:hidden;text-indent:-2000px;text-decoration:none;"</span> <span class="attribute">title</span>=<span class="value">"网易阅读-随时随地品质阅读"</span>&gt;</span>网易阅读-随时随地品质阅读<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">h2</span> <span class="attribute">style</span>=<span class="value">"margin:0;padding:0;width:0;height:0;overflow:hidden;text-indent:-2000px;"</span>&gt;</span>你的iPad够有料吗？iPad不等于愤怒的小鸟！不等于切水果！下载网易阅读，给你的iPad添点料，打造你独一无二的iPad！<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"padding:0 0 0 35px;"</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://itunes.apple.com/cn/app/id421092396?mt=8"</span> <span class="attribute">target</span>=<span class="value">"_blank"</span> <span class="attribute">style</span>=<span class="value">"color:#f00;text-decoration:none;"</span> <span class="attribute">title</span>=<span class="value">"下载网易阅读"</span>&gt;</span>下载网易阅读<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="u53D1_u73B0_u7684_u95EE_u9898_u53CA_u89E3_u51B3_u65B9_u6848"><a href="#u53D1_u73B0_u7684_u95EE_u9898_u53CA_u89E3_u51B3_u65B9_u6848" class="headerlink" title="发现的问题及解决方案"></a>发现的问题及解决方案</h3><p>问题：部分智能手机的邮件客户端可能会有只显示部分的bug（宽度被截）。<br>解决：在外面套一个同宽的table即可。</p>
<figure class="highlight xml" data-lang=" xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">table</span> <span class="attribute">width</span>=<span class="value">"600"</span> <span class="attribute">cellpadding</span>=<span class="value">"0"</span> <span class="attribute">cellspacing</span>=<span class="value">"0"</span> <span class="attribute">border</span>=<span class="value">"0"</span>&gt;</span><span class="tag">&lt;<span class="title">tr</span>&gt;</span><span class="tag">&lt;<span class="title">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"width:600px;text-align:left;color:#000;font:normal 12px/15px simsun;background:#d9d9d9;"</span>&gt;</span></span><br><span class="line">        ......</span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;/<span class="title">tr</span>&gt;</span><span class="tag">&lt;/<span class="title">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="u4F7F_u7528_u6846_u67B6"><a href="#u4F7F_u7528_u6846_u67B6" class="headerlink" title="使用框架"></a>使用框架</h3><p>推荐使用 email框架 来创建邮件内容。</p>
<figure class="highlight xml" data-lang=" xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">table</span> <span class="attribute">width</span>=<span class="value">"600"</span> <span class="attribute">cellpadding</span>=<span class="value">"0"</span> <span class="attribute">cellspacing</span>=<span class="value">"0"</span> <span class="attribute">border</span>=<span class="value">"0"</span>&gt;</span><span class="tag">&lt;<span class="title">tbody</span>&gt;</span><span class="tag">&lt;<span class="title">tr</span>&gt;</span><span class="tag">&lt;<span class="title">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"width:600px;text-align:left;font:12px/15px simsun;color:#000;background:#fff;"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 水平居左的邮件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;/<span class="title">tr</span>&gt;</span><span class="tag">&lt;/<span class="title">tbody</span>&gt;</span><span class="tag">&lt;/<span class="title">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"text-align:center;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">table</span> <span class="attribute">width</span>=<span class="value">"600"</span> <span class="attribute">cellpadding</span>=<span class="value">"0"</span> <span class="attribute">cellspacing</span>=<span class="value">"0"</span> <span class="attribute">border</span>=<span class="value">"0"</span> <span class="attribute">style</span>=<span class="value">"margin:0 auto;"</span>&gt;</span><span class="tag">&lt;<span class="title">tbody</span>&gt;</span><span class="tag">&lt;<span class="title">tr</span>&gt;</span><span class="tag">&lt;<span class="title">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"width:600px;text-align:left;font:12px/15px simsun;color:#000;background:#fff;"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 水平居中的邮件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;/<span class="title">tr</span>&gt;</span><span class="tag">&lt;/<span class="title">tbody</span>&gt;</span><span class="tag">&lt;/<span class="title">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><a href="http://www.jianshu.com/p/8d291d823cc0#" title="web前端规范" target="_blank" rel="external">web前端规范</a><br><a href="https://github.com/mishe/blog/issues/125" title="前端开发 @ 资邦集团（上海）" target="_blank" rel="external">新公司的前端开发规范（初稿） #125</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　<strong>规范：</strong>你是否常常碰到以下问题：你总是看不懂他写的代码，或者读起来很吃力；你需要改他的代码却无从下手，或总是要去问他这里是什么改了会不会影响其他代码；你和他一起开发一个产品，你总是怕代码和他有冲突或互相影响；你的代码在多次维护任务之后变得越来越臃肿，越来越难以维护。解决以上问题只需一种方法——读我们的规范！<br>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://luuman.github.io/tags/CSS/"/>
    
      <category term="Norm" scheme="http://luuman.github.io/categories/Norm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[前端开发代码规范]]></title>
    <link href="http://luuman.github.io/2016/12/31/Skill/norm/normdev/"/>
    <id>http://luuman.github.io/2016/12/31/Skill/norm/normdev/</id>
    <published>2016-12-31T10:29:00.000Z</published>
    <updated>2017-02-18T10:58:36.000Z</updated>
    <content type="html"><![CDATA[<p>　　<strong>规范：</strong>你是否常常碰到以下问题：你总是看不懂他写的代码，或者读起来很吃力；你需要改他的代码却无从下手，或总是要去问他这里是什么改了会不会影响其他代码；你和他一起开发一个产品，你总是怕代码和他有冲突或互相影响；你的代码在多次维护任务之后变得越来越臃肿，越来越难以维护。解决以上问题只需一种方法——读我们的规范！<br><a id="more"></a></p>
<h2 id="u5F00_u53D1_u51C6_u5907"><a href="#u5F00_u53D1_u51C6_u5907" class="headerlink" title="开发准备"></a>开发准备</h2><h3 id="u4E86_u89E3_u4EA7_u54C1_u548C_u8BBE_u8BA1"><a href="#u4E86_u89E3_u4EA7_u54C1_u548C_u8BBE_u8BA1" class="headerlink" title="了解产品和设计"></a>了解产品和设计</h3><ol>
<li>参加需求、交互、视觉会议，了解产品设计和项目成员。</li>
<li>了解产品面向的设备和平台。</li>
<li>了解产品对兼容性的要求以及是否采用响应式设计等。</li>
<li>了解产品要使用的技术（WEB技术、桌面技术、APP技术、模板语言、混合模式等）。</li>
</ol>
<h3 id="u63D0_u51FA_u7591_u95EE_u548C_u89C1_u89E3"><a href="#u63D0_u51FA_u7591_u95EE_u548C_u89C1_u89E3" class="headerlink" title="提出疑问和见解"></a>提出疑问和见解</h3><ol>
<li>在交互或视觉会议中结合技术要求，提出疑问和见解。</li>
<li>提出可能存在的问题（技术实现问题、性能问题等），协商解决方案（如优雅退化）并达成共识。</li>
<li>提出已有新技术可能在产品中的应用场景，协助产品创新。</li>
</ol>
<h3 id="u6280_u672F_u8C03_u7814_u548C_u57F9_u8BAD"><a href="#u6280_u672F_u8C03_u7814_u548C_u57F9_u8BAD" class="headerlink" title="技术调研和培训"></a>技术调研和培训</h3><ol>
<li>是否需要技术调研，提出可能存在的风险。</li>
<li>进行技术调研，产出技术demo，展示demo，反馈调研结果。</li>
<li>技术调研的内容可以先咨询经验丰富的前端工程师或前端技术组。</li>
<li>经验不足或新入职员工，可提出培训申请。</li>
<li>你可以把难以解决的技术问题提交给NEC，NEC将帮助你解决问题。</li>
<li>了解NEC，特别是代码规范和技术demo。</li>
</ol>
<h3 id="u9884_u7B97_u4EBA_u529B_u548C_u65F6_u95F4"><a href="#u9884_u7B97_u4EBA_u529B_u548C_u65F6_u95F4" class="headerlink" title="预算人力和时间"></a>预算人力和时间</h3><ol>
<li>根据项目时间要求及工作量，预算人力和时间。</li>
<li>预算开发周期和阶段性产出。</li>
<li>提醒需求方在项目管理平台中创建项目并加入项目成员，创建SVN并设置成员权限。</li>
</ol>
<h2 id="u5F00_u53D1_u51C6_u5907-1"><a href="#u5F00_u53D1_u51C6_u5907-1" class="headerlink" title="开发准备"></a>开发准备</h2><h3 id="CSS_u6587_u4EF6_u7684_u5206_u7C7B"><a href="#CSS_u6587_u4EF6_u7684_u5206_u7C7B" class="headerlink" title="CSS文件的分类"></a>CSS文件的分类</h3>]]></content>
    <summary type="html">
    <![CDATA[<p>　　<strong>规范：</strong>你是否常常碰到以下问题：你总是看不懂他写的代码，或者读起来很吃力；你需要改他的代码却无从下手，或总是要去问他这里是什么改了会不会影响其他代码；你和他一起开发一个产品，你总是怕代码和他有冲突或互相影响；你的代码在多次维护任务之后变得越来越臃肿，越来越难以维护。解决以上问题只需一种方法——读我们的规范！<br>]]>
    
    </summary>
    
      <category term="Development" scheme="http://luuman.github.io/tags/Development/"/>
    
      <category term="Norm" scheme="http://luuman.github.io/categories/Norm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS前端代码规范]]></title>
    <link href="http://luuman.github.io/2016/12/31/Skill/norm/normCSS/"/>
    <id>http://luuman.github.io/2016/12/31/Skill/norm/normCSS/</id>
    <published>2016-12-31T10:29:00.000Z</published>
    <updated>2017-02-18T10:58:36.000Z</updated>
    <content type="html"><![CDATA[<p>　　<strong>规范：</strong>你是否常常碰到以下问题：你总是看不懂他写的代码，或者读起来很吃力；你需要改他的代码却无从下手，或总是要去问他这里是什么改了会不会影响其他代码；你和他一起开发一个产品，你总是怕代码和他有冲突或互相影响；你的代码在多次维护任务之后变得越来越臃肿，越来越难以维护。解决以上问题只需一种方法——读我们的规范！<br><a id="more"></a></p>
<h2 id="u5206_u7C7B_u65B9_u6CD5"><a href="#u5206_u7C7B_u65B9_u6CD5" class="headerlink" title="分类方法"></a>分类方法</h2><h3 id="CSS_u6587_u4EF6_u7684_u5206_u7C7B"><a href="#CSS_u6587_u4EF6_u7684_u5206_u7C7B" class="headerlink" title="CSS文件的分类"></a>CSS文件的分类</h3><ol>
<li>公共型样式：global<br>“标签的重置和设置默认值”、“统一调用背景图和清除浮动或其他需统一处理的长样式”、“网站通用布局”、“通用模块和其扩展”、“元件和其扩展”、“功能类样式”、“皮肤类样式”。</li>
<li>特殊型样式：index<br>当某个栏目或页面的样式与网站整体差异较大或者维护率较高时，可以独立引用一个样式<br>“特殊的布局、模块和元件及扩展”、“特殊的功能、颜色和背景”，也可以是某个大型控件或模块的独立样式。</li>
<li>皮肤型样式：skin<br>如果产品需要换肤功能，那么我们需要将颜色、背景等抽离出来放在这里。</li>
</ol>
<h3 id="CSS_u5185_u90E8_u7684_u5206_u7C7B_u53CA_u5176_u987A_u5E8F"><a href="#CSS_u5185_u90E8_u7684_u5206_u7C7B_u53CA_u5176_u987A_u5E8F" class="headerlink" title="CSS内部的分类及其顺序"></a>CSS内部的分类及其顺序</h3><ol>
<li>重置（reset）和默认（base）（tags）：消除默认样式和浏览器差异，并设置部分标签的初始样式，以减少后面的重复劳动！你可以根据你的网站需求设置！</li>
<li>统一处理：建议在这个位置统一调用背景图（这里指多个布局或模块或元件共用的图）和清除浮动（这里指通用性较高的布局、模块、元件内的清除）等统一设置处理的样式！</li>
<li>布局（grid）（.g-）：将页面分割为几个大块，通常有头部、主体、主栏、侧栏、尾部等！</li>
<li>模块（module）（.m-）：通常是一个语义化的可以重复使用的较大的整体！比如导航、登录、注册、各种列表、评论、搜索等！</li>
<li>元件（unit）（.u-）：通常是一个不可再分的较为小巧的个体，通常被重复用于各种模块中！比如按钮、输入框、loading、图标等！</li>
<li>功能（function）（.f-）：为方便一些常用样式的使用，我们将这些使用率较高的样式剥离出来，按需使用，通常这些选择器具有固定样式表现，比如清除浮动等！不可滥用！</li>
<li>皮肤（skin）（.s-）：如果你需要把皮肤型的样式抽离出来，通常为文字色、背景色（图）、边框色等，非换肤型网站通常只提取文字色！非换肤型网站不可滥用此类！</li>
<li>状态（.z-）：为状态类样式加入前缀，统一标识，方便识别，她只能组合使用或作为后代出现（.u-ipt.z-dis{}，.m-list li.z-sel{}），具体详见命名规则的扩展相关项。</li>
</ol>
<figure class="highlight css" data-lang=" css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 重置 */</span></span><br><span class="line"><span class="tag">div</span>,<span class="tag">p</span>,<span class="tag">ul</span>,<span class="tag">ol</span>,<span class="tag">li</span><span class="rules">&#123;<span class="rule"><span class="attribute">margin</span>:<span class="value"><span class="number">0</span></span></span>;<span class="rule"><span class="attribute">padding</span>:<span class="value"><span class="number">0</span></span></span>;&#125;</span></span><br><span class="line"><span class="comment">/* 默认 */</span></span><br><span class="line"><span class="tag">strong</span>,<span class="tag">em</span><span class="rules">&#123;<span class="rule"><span class="attribute">font-style</span>:<span class="value">normal</span></span>;<span class="rule"><span class="attribute">font-weight</span>:<span class="value">bold</span></span>;&#125;</span></span><br><span class="line"><span class="comment">/* 统一调用背景图 */</span></span><br><span class="line"><span class="class">.m-logo</span> <span class="tag">a</span>,<span class="class">.m-nav</span> <span class="tag">a</span>,<span class="class">.m-nav</span> <span class="tag">em</span><span class="rules">&#123;<span class="rule"><span class="attribute">background</span>:<span class="value"><span class="function">url</span>(images/sprite.png) no-repeat <span class="number">9999px</span> <span class="number">9999px</span></span></span>;&#125;</span></span><br><span class="line"><span class="comment">/* 统一清除浮动 */</span></span><br><span class="line"><span class="class">.g-bdc</span><span class="pseudo">:after</span>,<span class="class">.m-dimg</span> <span class="tag">ul</span><span class="pseudo">:after</span>,<span class="class">.u-tab</span><span class="pseudo">:after</span><span class="rules">&#123;<span class="rule"><span class="attribute">display</span>:<span class="value">block</span></span>;<span class="rule"><span class="attribute">visibility</span>:<span class="value">hidden</span></span>;<span class="rule"><span class="attribute">clear</span>:<span class="value">both</span></span>;<span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">0</span></span></span>;<span class="rule"><span class="attribute">overflow</span>:<span class="value">hidden</span></span>;<span class="rule"><span class="attribute">content</span>:<span class="value"><span class="string">'.'</span></span></span>;&#125;</span></span><br><span class="line"><span class="class">.g-bdc</span>,<span class="class">.m-dimg</span> <span class="tag">ul</span>,<span class="class">.u-tab</span><span class="rules">&#123;<span class="rule"><span class="attribute">zoom</span>:<span class="value"><span class="number">1</span></span></span>;&#125;</span></span><br><span class="line"><span class="comment">/* 布局 */</span></span><br><span class="line"><span class="class">.g-sd</span><span class="rules">&#123;<span class="rule"><span class="attribute">float</span>:<span class="value">left</span></span>;<span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">300px</span></span></span>;&#125;</span></span><br><span class="line"><span class="comment">/* 模块 */</span></span><br><span class="line"><span class="class">.m-logo</span><span class="rules">&#123;<span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">200px</span></span></span>;<span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">50px</span></span></span>;&#125;</span></span><br><span class="line"><span class="comment">/* 元件 */</span></span><br><span class="line"><span class="class">.u-btn</span><span class="rules">&#123;<span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">20px</span></span></span>;<span class="rule"><span class="attribute">border</span>:<span class="value"><span class="number">1px</span> solid <span class="hexcolor">#333</span></span></span>;&#125;</span></span><br><span class="line"><span class="comment">/* 功能 */</span></span><br><span class="line"><span class="class">.f-tac</span><span class="rules">&#123;<span class="rule"><span class="attribute">text-align</span>:<span class="value">center</span></span>;&#125;</span></span><br><span class="line"><span class="comment">/* 皮肤 */</span></span><br><span class="line"><span class="class">.s-fc</span>,<span class="tag">a</span><span class="class">.s-fc</span><span class="pseudo">:hover</span><span class="rules">&#123;<span class="rule"><span class="attribute">color</span>:<span class="value"><span class="hexcolor">#fff</span></span></span>;&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="u547D_u540D_u89C4_u5219"><a href="#u547D_u540D_u89C4_u5219" class="headerlink" title="命名规则"></a>命名规则</h2><h3 id="u4F7F_u7528_u7C7B_u9009_u62E9_u5668_uFF0C_u653E_u5F03ID_u9009_u62E9_u5668"><a href="#u4F7F_u7528_u7C7B_u9009_u62E9_u5668_uFF0C_u653E_u5F03ID_u9009_u62E9_u5668" class="headerlink" title="使用类选择器，放弃ID选择器"></a>使用类选择器，放弃ID选择器</h3><p>ID在一个页面中的唯一性导致了如果以ID为选择器来写CSS，就无法重用。</p>
<h3 id="NEC_u7279_u6B8A_u5B57_u7B26_uFF1A_u201D-_u201C_u8FDE_u5B57_u7B26"><a href="#NEC_u7279_u6B8A_u5B57_u7B26_uFF1A_u201D-_u201C_u8FDE_u5B57_u7B26" class="headerlink" title="NEC特殊字符：”-“连字符"></a>NEC特殊字符：”-“连字符</h3><p>“-“在本规范中并不表示连字符的含义。<br>她只表示两种含义：分类前缀分隔符、扩展分隔符，详见以下具体规则。</p>
<h3 id="u5206_u7C7B_u7684_u547D_u540D_u65B9_u6CD5_uFF1A_u4F7F_u7528_u5355_u4E2A_u5B57_u6BCD+_u201D-_u201C_u4E3A_u524D_u7F00"><a href="#u5206_u7C7B_u7684_u547D_u540D_u65B9_u6CD5_uFF1A_u4F7F_u7528_u5355_u4E2A_u5B57_u6BCD+_u201D-_u201C_u4E3A_u524D_u7F00" class="headerlink" title="分类的命名方法：使用单个字母+”-“为前缀"></a>分类的命名方法：使用单个字母+”-“为前缀</h3><p>布局（grid）（.g-）；模块（module）（.m-）；元件（unit）（.u-）；功能（function）（.f-）；皮肤（skin）（.s-）；状态（.z-）。<br>对以上的解释详情参见：分类方法中的“CSS内部的分类及其顺序”。<br>注：在你样式中的选择器总是要以上面前五类开头，然后在里面使用后代选择器。<br>　　如果这五类不能满足你的需求，你可以另外定义一个或多个大类，但必须符合单个字母+”-“为前缀的命名规则，即 .x- 的格式。<br>　　特殊：.j-将被专用于JS获取节点，请勿使用.j-定义样式。</p>
<h3 id="u540E_u4EE3_u9009_u62E9_u5668_u547D_u540D"><a href="#u540E_u4EE3_u9009_u62E9_u5668_u547D_u540D" class="headerlink" title="后代选择器命名"></a>后代选择器命名</h3><p>约定不以单个字母+”-“为前缀且长度大于等于2的类选择器为后代选择器，如：.item为m-list模块里的每一个项，.text为m-list模块里的文本部分：.m-list .item{}.m-list .text{}。<br>一个语义化的标签也可以是后代选择器，比如：.m-list li{}。<br>不允许单个字母的类选择器出现，原因详见下面的“模块和元件的后代选择器的扩展类”。<br>通过使用后代选择器的方法，你不需要考虑他的命名是否已被使用，因为他只在当前模块或元件中生效，同样的样式名可以在不同的模块或元件中重复使用，互不干扰；在多人协作或者分模块协作的时候效果尤为明显！<br>后代选择器不需要完整表现结构树层级，尽量能短则短。<br>注：后代选择器不要在页面布局中使用，因为污染的可能性较大；</p>
<pre><code>/* 这里的.itm和.cnt只在.m-list中有效 */
.m-list{margin:0;padding:0;}
.m-list .itm{margin:1px;padding:1px;}
.m-list .cnt{margin-left:100px;}
/* 这里的.cnt和.num只在.m-page中有效 */
.m-page{height:20px;}
.m-page .cnt{text-align:center;}
.m-page .num{border:1px solid #ddd;}
</code></pre><h3 id="u547D_u540D_u5E94_u7B80_u7EA6_u800C_u4E0D_u5931_u8BED_u4E49"><a href="#u547D_u540D_u5E94_u7B80_u7EA6_u800C_u4E0D_u5931_u8BED_u4E49" class="headerlink" title="命名应简约而不失语义"></a>命名应简约而不失语义</h3><pre><code>/* 反对：表现化的或没有语义的命名 */
.m-abc .green2{}
.g-left2{}
/* 推荐：使用有语义的简短的命名 */
.m-list .wrap2{}
.g-side2{}
</code></pre><h3 id="u76F8_u540C_u8BED_u4E49_u7684_u4E0D_u540C_u7C7B_u547D_u540D"><a href="#u76F8_u540C_u8BED_u4E49_u7684_u4E0D_u540C_u7C7B_u547D_u540D" class="headerlink" title="相同语义的不同类命名"></a>相同语义的不同类命名</h3><p>方法：直接加数字或字母区分即可（如：.m-list、.m-list2、.m-list3等，都是列表模块，但是是完全不一样的模块）。<br>其他举例：.f-fw0、.f-fw1、.s-fc0、.s-fc1、.m-logo2、.m-logo3、u-btn、u-btn2等等。</p>
<h3 id="u6A21_u5757_u548C_u5143_u4EF6_u7684_u6269_u5C55_u7C7B_u7684_u547D_u540D_u65B9_u6CD5"><a href="#u6A21_u5757_u548C_u5143_u4EF6_u7684_u6269_u5C55_u7C7B_u7684_u547D_u540D_u65B9_u6CD5" class="headerlink" title="模块和元件的扩展类的命名方法"></a>模块和元件的扩展类的命名方法</h3><p>当A、B、C、…它们类型相同且外形相似区别不大，那么就以它们中出现率最高的做成基类，其他做成基类的扩展。<br>方法：+“-”+数字或字母（如：.m-list的扩展类为.m-list-1、.m-list-2等）。<br>补充：基类自身可以独立使用（如：class=”m-list”即可），扩展类必须基于基类使用（如：class=”m-list m-list-2”）。<br>如果你的扩展类是表示不同状态，那么你可以这样命名：u-btn-dis，u-btn-hov，m-box-sel，m-box-hov等等，然后像这样使用：class=”u-btn u-btn-dis”。<br>如果你的网站可以不兼容IE6等浏览器，那么你标识状态的方法也可以采取独立状态分类（.z-）方法：.u-btn.z-dis，.m-box.z-sel，然后像这样使用：class=”u-btn z-dis”。</p>
<h3 id="u6A21_u5757_u548C_u5143_u4EF6_u7684_u540E_u4EE3_u9009_u62E9_u5668_u7684_u6269_u5C55_u7C7B"><a href="#u6A21_u5757_u548C_u5143_u4EF6_u7684_u540E_u4EE3_u9009_u62E9_u5668_u7684_u6269_u5C55_u7C7B" class="headerlink" title="模块和元件的后代选择器的扩展类"></a>模块和元件的后代选择器的扩展类</h3><p>有时候模块内会有些类似的东西，如果你没有把它们做成元件和扩展，那么也可以使用后代选择器和扩展。<br>后代选择器：.m-login .btn{}。<br>后代选择器扩展：.m-login .btn-1{}，.m-login .btn-dis{}。<br>同样也可以采取独立状态分类（.z-）方法：.m-login .btn.z-dis{}，然后像这样使用：class=”btn z-dis”。<br>注：此方法用于类选择器，直接使用标签做为选择器的则不需要使用此命名方法。<br>注：为防止后代选择器的扩展类和大类命名规范冲突，后代选择器不允许使用单个字母。<br>　　比如：.m-list .a{}是不允许的，因为当这个.a需要扩展的时候就会变成.a-bb，这样就和大类的命名规范冲突。</p>
<h3 id="u5206_u7EC4_u9009_u62E9_u5668_u6709_u65F6_u53EF_u4EE5_u4EE3_u66FF_u6269_u5C55_u65B9_u6CD5"><a href="#u5206_u7EC4_u9009_u62E9_u5668_u6709_u65F6_u53EF_u4EE5_u4EE3_u66FF_u6269_u5C55_u65B9_u6CD5" class="headerlink" title="分组选择器有时可以代替扩展方法"></a>分组选择器有时可以代替扩展方法</h3><p>有时候虽然两个同类型的模块很相似，但是你希望他们之间不要有依赖关系，也就是说你不希望使用扩展的方法，那么你可以通过合并选择器来设置共性的样式。<br>使用本方法的前提是：相同类型、功能和外观都相似，写在同一片代码区域方便维护。</p>
<pre><code>/* 两个元件共性的样式 */
.u-tip1,.u-tip2{}
.u-tip1 .itm,.u-tip2 .itm{}
/* 在分别是两个元件各自的样式 */
/* tip1 */
.u-tip1{}
.u-tip1 .itm{}
/* tip2 */
.u-tip2{}
.u-tip2 .itm{}
</code></pre><h3 id="u9632_u6B62_u6C61_u67D3_u548C_u88AB_u6C61_u67D3"><a href="#u9632_u6B62_u6C61_u67D3_u548C_u88AB_u6C61_u67D3" class="headerlink" title="防止污染和被污染"></a>防止污染和被污染</h3><p>当模块或元件之间互相嵌套，且使用了相同的标签选择器或其他后代选择器，那么里面的选择器就会被外面相同的选择器所影响。<br>所以，如果你的模块或元件可能嵌套或被嵌套于其他模块或元件，那么要慎用标签选择器，必要时采用类选择器，并注意命名方式，可以采用.m-layer .layerxxx、.m-list2 .list2xxx的形式来降低后代选择器的污染性。</p>
<h2 id="u4EE3_u7801_u683C_u5F0F"><a href="#u4EE3_u7801_u683C_u5F0F" class="headerlink" title="代码格式"></a>代码格式</h2><p>选择器、属性和值都使用小写<br>在xhtml标准中规定了所有标签、属性和值都小写，CSS也是如此。</p>
<h3 id="u5355_u884C_u5199_u5B8C_u4E00_u4E2A_u9009_u62E9_u5668_u5B9A_u4E49"><a href="#u5355_u884C_u5199_u5B8C_u4E00_u4E2A_u9009_u62E9_u5668_u5B9A_u4E49" class="headerlink" title="单行写完一个选择器定义"></a>单行写完一个选择器定义</h3><p>便于选择器的寻找和阅读，也便于插入新选择器和编辑，便于模块等的识别。去除多余空格，使代码紧凑减少换行。<br>如果有嵌套定义，可以采取内部单行的形式。</p>
<pre><code>/* 单行定义一个选择器 */
.m-list li,.m-list h3{width:100px;padding:10px;border:1px solid #ddd;}
/* 这是一个有嵌套定义的选择器 */
@media all and (max-width:600px){
    .m-class1 .itm{height:17px;line-height:17px;font-size:12px;}
    .m-class2 .itm{width:100px;overflow:hidden;}
}
@-webkit-keyframes showitm{
    0%{height:0;opacity:0;}
    100%{height:100px;opacity:1;}
}
</code></pre><h3 id="u6700_u540E_u4E00_u4E2A_u503C_u4E5F_u4EE5_u5206_u53F7_u7ED3_u5C3E"><a href="#u6700_u540E_u4E00_u4E2A_u503C_u4E5F_u4EE5_u5206_u53F7_u7ED3_u5C3E" class="headerlink" title="最后一个值也以分号结尾"></a>最后一个值也以分号结尾</h3><p>通常在大括号结束前的值可以省略分号，但是这样做会对修改、添加和维护工作带来不必要的失误和麻烦。</p>
<h3 id="u7701_u7565_u503C_u4E3A0_u65F6_u7684_u5355_u4F4D"><a href="#u7701_u7565_u503C_u4E3A0_u65F6_u7684_u5355_u4F4D" class="headerlink" title="省略值为0时的单位"></a>省略值为0时的单位</h3><p>为节省不必要的字节同时也使阅读方便，我们将0px、0em、0%等值缩写为0。</p>
<pre><code>.m-box{margin:0 10px;background-position:50% 0;}
</code></pre><h3 id="u4F7F_u7528_u5355_u5F15_u53F7"><a href="#u4F7F_u7528_u5355_u5F15_u53F7" class="headerlink" title="使用单引号"></a>使用单引号</h3><p>省略url引用中的引号，其他需要引号的地方使用单引号。</p>
<pre><code>.m-box{background:url(bg.png);}
.m-box:after{content:&apos;.&apos;;}
</code></pre><h3 id="u4F7F_u752816_u8FDB_u5236_u8868_u793A_u989C_u8272_u503C"><a href="#u4F7F_u752816_u8FDB_u5236_u8868_u793A_u989C_u8272_u503C" class="headerlink" title="使用16进制表示颜色值"></a>使用16进制表示颜色值</h3><p>除非你需要透明度而使用rgba，否则都使用#f0f0f0这样的表示方法，并尽量缩写。</p>
<pre><code>.m-box{color:#f00;background:rgba(0,0,0,0.5);}
</code></pre><h3 id="u6839_u636E_u5C5E_u6027_u7684_u91CD_u8981_u6027_u6309_u987A_u5E8F_u4E66_u5199"><a href="#u6839_u636E_u5C5E_u6027_u7684_u91CD_u8981_u6027_u6309_u987A_u5E8F_u4E66_u5199" class="headerlink" title="根据属性的重要性按顺序书写"></a>根据属性的重要性按顺序书写</h3><p>只遵循横向顺序即可，先显示定位布局类属性，后盒模型等自身属性，最后是文本类及修饰类属性。</p>
<p>| → | 显示属性 | 自身属性 | 文本属性和其他修饰 |<br>| | —– |:—-:| —– |:—-:|<br>| | display | width |    font |<br>| | visibility | height |    text-align |<br>| | position | margin | text-decoration |<br>| | float | padding |    vertical-align |<br>| | clear | border |    white-space |<br>| | list-style | overflow | color |<br>| | top | min-width |    background |</p>
<pre><code>.m-box{position:relative;width:600px;margin:0 auto 10px;text-align:center;color:#000;}
</code></pre><p>如果属性间存在关联性，则不要隔开写。</p>
<pre><code>/* 这里的height和line-height有关联性 */
.m-box{position:relative;height:20px;line-height:20px;padding:5px;color:#000;}
</code></pre><h3 id="u79C1_u6709_u5728_u524D_uFF0C_u6807_u51C6_u5728_u540E"><a href="#u79C1_u6709_u5728_u524D_uFF0C_u6807_u51C6_u5728_u540E" class="headerlink" title="私有在前，标准在后"></a>私有在前，标准在后</h3><p>先写带有浏览器私有标志的，后写W3C标准的。</p>
<pre><code>.m-box{-webkit-box-shadow:0 0 0 #000;-moz-box-shadow:0 0 0 #000;box-shadow:0 0 0 #000;}
</code></pre><h3 id="u6CE8_u91CA_u683C_u5F0F_uFF1A/__u6CE8_u91CA_u6587_u5B57_/"><a href="#u6CE8_u91CA_u683C_u5F0F_uFF1A/__u6CE8_u91CA_u6587_u5B57_/" class="headerlink" title="注释格式：/ 注释文字 /"></a>注释格式：/<em> 注释文字 </em>/</h3><p>对选择器的注释统一写在被注释对象的上一行，对属性及值的注释写于分号后。<br>注释内容两端需空格，已确保即使在编码错误的情况下也可以正确解析样式。<br>在必要的情况下，可以使用块状注释，块状注释保持统一的缩进对齐。<br>原则上每个系列的样式都需要有一个注释，言简意赅的表明名称、用途、注意事项等。</p>
<pre><code>/* 块状注释文字
 * 块状注释文字
 * 块状注释文字
 */
.m-list{width:500px;}
.m-list li{height:20px;line-height:20px;/* 这里是对line-height的一个注释 */overflow:hidden;}
.m-list li a{color:#333;}
/* 单行注释文字 */
.m-list li em{color:#666;}
</code></pre><h3 id="u539F_u5219_u4E0A_u4E0D_u5141_u8BB8_u4F7F_u7528Hack"><a href="#u539F_u5219_u4E0A_u4E0D_u5141_u8BB8_u4F7F_u7528Hack" class="headerlink" title="原则上不允许使用Hack"></a>原则上不允许使用Hack</h3><p>很多不兼容问题可以通过改变方法和思路来解决，并非一定需要Hack，根据经验你完全可以绕过某些兼容问题。<br>一种合理的结构和合理的样式，是极少会碰到兼容问题的。<br>由于浏览器自身缺陷，我们无法避开的时候，可以允许使用适当的Hack。</p>
<h3 id="u7EDF_u4E00Hack_u65B9_u6CD5"><a href="#u7EDF_u4E00Hack_u65B9_u6CD5" class="headerlink" title="统一Hack方法"></a>统一Hack方法</h3><p>统一使用“*”和“_”分别对IE7和6进行Hack。如下代码所示：</p>
<pre><code>/* IE7会显示灰色#888，IE6会显示白色#fff，其他浏览器显示黑色#000 */
.m-list{color:#000;*color:#888;_color:#fff;}
</code></pre><h3 id="u5EFA_u8BAE_u5E76_u9002_u5F53_u7F29_u5199_u503C"><a href="#u5EFA_u8BAE_u5E76_u9002_u5F53_u7F29_u5199_u503C" class="headerlink" title="建议并适当缩写值"></a>建议并适当缩写值</h3><p>“建议并适当”是因为缩写总是会包含一系列的值，而有时候我们并不希望设置某一值，反而造成了麻烦，那么这时候你可以不缩写，而是分开写。</p>
<p>当然，在一切可以缩写的情况下，请务必缩写，它最大的好处就是节省了字节，便于维护，并使阅读更加一目了然。</p>
<p>缩写方法请查阅css手册。</p>
<h3 id="u9009_u62E9_u5668_u987A_u5E8F"><a href="#u9009_u62E9_u5668_u987A_u5E8F" class="headerlink" title="选择器顺序"></a>选择器顺序</h3><p>请综合考虑以下顺序依据：</p>
<ol>
<li>从大到小（以选择器的范围为准）</li>
<li>从低到高（以等级上的高低为准）</li>
<li>从先到后（以结构上的先后为准）</li>
<li>从父到子（以结构上的嵌套为准）</li>
</ol>
<figure class="highlight css" data-lang=" css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">以下仅为简单示范：</span><br><span class="line"><span class="comment">/* 从大到小 */</span></span><br><span class="line"><span class="class">.m-list</span> <span class="tag">p</span><span class="rules">&#123;<span class="rule"><span class="attribute">margin</span>:<span class="value"><span class="number">0</span></span></span>;<span class="rule"><span class="attribute">padding</span>:<span class="value"><span class="number">0</span></span></span>;&#125;</span></span><br><span class="line"><span class="class">.m-list</span> <span class="tag">p</span><span class="class">.part</span><span class="rules">&#123;<span class="rule"><span class="attribute">margin</span>:<span class="value"><span class="number">1px</span></span></span>;<span class="rule"><span class="attribute">padding</span>:<span class="value"><span class="number">1px</span></span></span>;&#125;</span></span><br><span class="line"><span class="comment">/* 从低到高 */</span></span><br><span class="line"><span class="class">.m-logo</span> <span class="tag">a</span><span class="rules">&#123;<span class="rule"><span class="attribute">color</span>:<span class="value"><span class="hexcolor">#f00</span></span></span>;&#125;</span></span><br><span class="line"><span class="class">.m-logo</span> <span class="tag">a</span><span class="pseudo">:hover</span><span class="rules">&#123;<span class="rule"><span class="attribute">color</span>:<span class="value"><span class="hexcolor">#fff</span></span></span>;&#125;</span></span><br><span class="line"><span class="comment">/* 从先到后 */</span></span><br><span class="line"><span class="class">.g-hd</span><span class="rules">&#123;<span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">60px</span></span></span>;&#125;</span></span><br><span class="line"><span class="class">.g-bd</span><span class="rules">&#123;<span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">60px</span></span></span>;&#125;</span></span><br><span class="line"><span class="class">.g-ft</span><span class="rules">&#123;<span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">60px</span></span></span>;&#125;</span></span><br><span class="line"><span class="comment">/* 从父到子 */</span></span><br><span class="line"><span class="class">.m-list</span><span class="rules">&#123;<span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">300px</span></span></span>;&#125;</span></span><br><span class="line"><span class="class">.m-list</span> <span class="class">.itm</span><span class="rules">&#123;<span class="rule"><span class="attribute">float</span>:<span class="value">left</span></span>;&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="u9009_u62E9_u5668_u7B49_u7EA7"><a href="#u9009_u62E9_u5668_u7B49_u7EA7" class="headerlink" title="选择器等级"></a>选择器等级</h3><p>a = 行内样式style。<br>b = ID选择器的数量。<br>c = 类、伪类和属性选择器的数量。<br>d = 类型选择器和伪元素选择器的数量。</p>
<table>
<thead>
<tr>
<th>选择器</th>
<th style="text-align:center">等级(a,b,c,d)</th>
</tr>
</thead>
<tbody>
<tr>
<td>style=””</td>
<td style="text-align:center">1,0,0,0</td>
</tr>
<tr>
<td>#wrapper #content {}</td>
<td style="text-align:center">0,2,0,0</td>
</tr>
<tr>
<td>#content .dateposted {}</td>
<td style="text-align:center">0,1,1,0</td>
</tr>
<tr>
<td>div#content {}</td>
<td style="text-align:center">0,1,0,1</td>
</tr>
<tr>
<td>#content p {}</td>
<td style="text-align:center">0,1,0,1</td>
</tr>
<tr>
<td>#content {}</td>
<td style="text-align:center">0,1,0,0</td>
</tr>
<tr>
<td>p.comment .dateposted {}</td>
<td style="text-align:center">0,0,2,1</td>
</tr>
<tr>
<td>div.comment p {}</td>
<td style="text-align:center">0,0,1,2</td>
</tr>
<tr>
<td>.comment p {}</td>
<td style="text-align:center">0,0,1,1</td>
</tr>
<tr>
<td>p.comment {}</td>
<td style="text-align:center">0,0,1,1</td>
</tr>
<tr>
<td>.comment {}</td>
<td style="text-align:center">0,0,1,0</td>
</tr>
<tr>
<td>div p {}</td>
<td style="text-align:center">0,0,0,2</td>
</tr>
<tr>
<td>p {}</td>
<td style="text-align:center">0,0,0,1</td>
</tr>
</tbody>
</table>
<h2 id="u4F18_u5316_u65B9_u6848"><a href="#u4F18_u5316_u65B9_u6848" class="headerlink" title="优化方案"></a>优化方案</h2><h3 id="u503C_u7F29_u5199"><a href="#u503C_u7F29_u5199" class="headerlink" title="值缩写"></a>值缩写</h3><p>缩写值可以减少CSS文件大小，并增加可读性和可维护性。<br>但并非所有的值都必须缩写，因为当一个属性的值缩写时，总是会将所有项都设置一遍，而有时候我们不希望设置值里的某些项。</p>
<pre><code>/* 比如我们用下面这个样式来让某个定宽的容器水平居中，我们要的只是left和right，
 * 而top和bottom不是这个样式要关心的（如果设置了反倒会影响其他样式在这个容器上的使用），
 * 所以这时我们就不需要缩写
 */
.f-mgha{margin-left:auto;margin-right:auto;}
/* 比如下面这个模块的样式设置，我们确实需要设置padding的所有项，于是我们就可以采用缩写 */
.m-link{padding:6px 12px;}
常用的缩写方法请参见代码格式。
</code></pre><h3 id="u907F_u514D_u8017_u6027_u80FD_u7684_u5C5E_u6027"><a href="#u907F_u514D_u8017_u6027_u80FD_u7684_u5C5E_u6027" class="headerlink" title="避免耗性能的属性"></a>避免耗性能的属性</h3><p>以下所举列的属性可能造成渲染性能问题。不过有时候需求大于一切……</p>
<pre><code>/* expression */
.class{width:expression(this.width&gt;100?&apos;100px&apos;:&apos;auto&apos;);}
/* filter */
.class{filter:alpha(opacity=50);}
</code></pre><h3 id="u9009_u62E9_u5668_u5408_u5E76"><a href="#u9009_u62E9_u5668_u5408_u5E76" class="headerlink" title="选择器合并"></a>选择器合并</h3><p>即CSS选择器组合，可以一次定义多个选择器，为你节省很多字节和宝贵时间。<br>通常我们会将定义相同的或者有大部分属性值相同（确实是因为相关而相同）的一系列选择器组合到一起（采用逗号的方法）来统一定义。</p>
<pre><code>/* 以下对布局类选择器统一做了清除浮动的操作 */
.g-hd:after,.g-bd:after,.g-ft:after{display:block;visibility:hidden;clear:both;height:0;content:&quot;.&quot;;}
.g-hd,.g-bd,.g-ft{zoom:1;}
/* 通常background总是会占用很多字节，所以一般情况下，我们都会这样统一调用 */
.m-logo,.m-help,.m-list li,.u-tab li,.u-tab li a{background:url(../images/sprite.png) no-repeat 9999px 9999px;}
.m-logo{background-position:0 0;}
/* 以下是某个元件的写法，因为确实很多元素是联动的或相关的，所以采用了组合写法，可以方便理解和修改 */
.u-tab li,.u-tab li a{display:inline;float:left;height:30px;line-height:30px;}
.u-tab li{margin:0 3px;}
.u-tab li a{padding:0 6px;}
</code></pre><h3 id="u80CC_u666F_u56FE_u4F18_u5316_u5408_u5E76"><a href="#u80CC_u666F_u56FE_u4F18_u5316_u5408_u5E76" class="headerlink" title="背景图优化合并"></a>背景图优化合并</h3><h4 id="u56FE_u7247_u672C_u8EAB_u7684_u4F18_u5316_uFF1A"><a href="#u56FE_u7247_u672C_u8EAB_u7684_u4F18_u5316_uFF1A" class="headerlink" title="图片本身的优化："></a>图片本身的优化：</h4><ol>
<li>图像质量要求和图像文件大小决定你用什么格式的图片，用较小的图片文件呈现较好的图像质量。</li>
<li>当图片色彩过于丰富且无透明要求时，建议采用jpg格式并保存为较高质量。</li>
<li>当图片色彩过于丰富又有透明或半透明要求或阴影效果时，建议采用png24格式，并对IE6进行png8退化（或在不得已情况下使用滤镜）。</li>
<li>当图片色彩不太丰富时无论有无透明要求，请采用png8格式，大多数情况下建议采用这种格式。</li>
<li>当图片有动画时，只能使用gif格式。</li>
<li>你可以使用工具对图片进行再次压缩，但前提是不会影响色彩和透明。</li>
</ol>
<h4 id="u591A_u5F20_u56FE_u7247_u7684_u5408_u5E76_uFF1A"><a href="#u591A_u5F20_u56FE_u7247_u7684_u5408_u5E76_uFF1A" class="headerlink" title="多张图片的合并："></a>多张图片的合并：</h4><ol>
<li>单个图标之间必须保留空隙，空隙大小由容器大小及显示方式决定。这样做的好处是既考虑了“容错性”又提高了图片的可维护性。</li>
<li>图标的排列方式，也由容器大小及显示方式决定。排列方式分为以下几种：横向排列（容器宽度有限）、纵向排列（容器高度有限）、斜线排列（容器宽高不限），靠左排列（容器背景居左）、靠右排列（容器背景居右）、水平居中排列（容器背景水平居中）、垂直居中排列（容器背景垂直居中）。</li>
<li>合并后图片大小不宜超过50K，建议大小在20K-50K之间。</li>
<li>为保证多次修改后的图片质量，请保留一份PSD原始图，修改和添加都在PSD中进行，最后导出png。</li>
</ol>
<h4 id="u5206_u7C7B_u5408_u5E76_uFF1A"><a href="#u5206_u7C7B_u5408_u5E76_uFF1A" class="headerlink" title="分类合并："></a>分类合并：</h4><p>并不是把所有的图标都合并在一张图片里就是最好的，除了要控制图片大小之外还要注意以下方法。</p>
<ol>
<li>按照图片排列方式，把排列方式一样的图片进行合并，便于样式控制。</li>
<li>按照模块或元件，把同属于一个模块或元件的图片进行合并，方便模块或元件的维护。</li>
<li>按照图片大小，把大小一致或差不多的图片进行合并，可充分利用图片空间。</li>
<li>按照图片色彩，把色彩一致或差不多的图片进行合并，保证合并后图片的色彩不过于丰富，可防止色彩失真。</li>
<li>综合以上方法进行合并。</li>
</ol>
<h4 id="Hack_u7684_u907F_u514D"><a href="#Hack_u7684_u907F_u514D" class="headerlink" title="Hack的避免"></a>Hack的避免</h4><ol>
<li>当避免的代价较大时，可以使用Hack而不避免，比如你需要增加很多HTML或多写很多CSS时会得不偿失。</li>
<li>丰富的实战经验可以帮助你了解那些常见问题并用多种不同的思路来避免它，所以经验和思维方法在这里显得很重要。</li>
<li>根据你自己的能力来解决Hack的问题，我们不建议你用一个自己都没有把握的方法来避免Hack，因为也许你这个方法本身存在你没有发现的问题。</li>
</ol>
<h3 id="u5982_u679CCSS_u53EF_u4EE5_u505A_u5230_uFF0C_u5C31_u4E0D_u8981_u4F7F_u7528JS"><a href="#u5982_u679CCSS_u53EF_u4EE5_u505A_u5230_uFF0C_u5C31_u4E0D_u8981_u4F7F_u7528JS" class="headerlink" title="如果CSS可以做到，就不要使用JS"></a>如果CSS可以做到，就不要使用JS</h3><p>让CSS做更多的事，减轻JS开发量。</p>
<ol>
<li>用CSS控制交互或视觉的变化，JS只需要更改className。</li>
<li>利用CSS一次性更改多个节点样式，避免多次渲染，提高渲染效率。</li>
<li>如果你的产品允许不兼容低版本浏览器，那么动画实现可以交给CSS。</li>
</ol>
<h3 id="u4FBF_u4E8E_u9605_u8BFB_u4FEE_u6539"><a href="#u4FBF_u4E8E_u9605_u8BFB_u4FEE_u6539" class="headerlink" title="便于阅读修改"></a>便于阅读修改</h3><p>如果你做到了“CSS规范”的所有要求，自然你也就写出了一个便于阅读和修改的漂亮的CSS。当然，代码格式和命名规则是相对重要一些的。</p>
<h3 id="u6E05_u6670_u7684CSS_u6A21_u5757"><a href="#u6E05_u6670_u7684CSS_u6A21_u5757" class="headerlink" title="清晰的CSS模块"></a>清晰的CSS模块</h3><p>如果你做到了命名规则的要求，你的CSS模块也就清晰可见了。用“注释”来说明每一个模块对于较大的CSS文件来说显得尤为重要。</p>
<h3 id="u6587_u4EF6_u538B_u7F29"><a href="#u6587_u4EF6_u538B_u7F29" class="headerlink" title="文件压缩"></a>文件压缩</h3><p>合理的书写CSS能很大程度上减少文件大小，完成后，在不损坏文件内容的情况下，想尽一切办法压缩你的CSS，你可以借助压缩工具把注释和多余的空格、换行去掉。压缩工具详见：“HTML/CSS工具”部分。</p>
<h3 id="u5176_u4ED6_u683C_u5F0F_u4F18_u5316"><a href="#u5176_u4ED6_u683C_u5F0F_u4F18_u5316" class="headerlink" title="其他格式优化"></a>其他格式优化</h3><p>优化方法请参见代码格式。</p>
<h2 id="u6700_u4F73_u5B9E_u8DF5"><a href="#u6700_u4F73_u5B9E_u8DF5" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="u6700_u4F73_u9009_u62E9_u5668_u5199_u6CD5_uFF08_u6A21_u5757_uFF09"><a href="#u6700_u4F73_u9009_u62E9_u5668_u5199_u6CD5_uFF08_u6A21_u5757_uFF09" class="headerlink" title="最佳选择器写法（模块）"></a>最佳选择器写法（模块）</h3><pre><code>/* 这是某个模块 */
.m-nav{}/* 模块容器 */
.m-nav li,.m-nav a{}/* 先共性  优化组合 */
.m-nav li{}/* 后个性  语义化标签选择器 */
.m-nav a{}/* 后个性中的共性 按结构顺序 */
.m-nav a.a1{}/* 后个性中的个性 */
.m-nav a.a2{}/* 后个性中的个性 */
.m-nav .z-crt a{}/* 交互状态变化 */
.m-nav .z-crt a.a1{}
.m-nav .z-crt a.a2{}
.m-nav .btn{}/* 典型后代选择器 */
.m-nav .btn-1{}/* 典型后代选择器扩展 */
.m-nav .btn-dis{}/* 典型后代选择器扩展（状态） */
.m-nav .btn.z-dis{}/* 作用同上，请二选一（如果可以不兼容IE6时使用） */
.m-nav .m-sch{}/* 控制内部其他模块位置 */
.m-nav .u-sel{}/* 控制内部其他元件位置 */
.m-nav-1{}/* 模块扩展 */
.m-nav-1 li{}
.m-nav-dis{}/* 模块扩展（状态） */
.m-nav.z-dis{}/* 作用同上，请二选一（如果可以不兼容IE6时使用） */
</code></pre><h3 id="u7EDF_u4E00_u8BED_u4E49_u7406_u89E3_u548C_u547D_u540D"><a href="#u7EDF_u4E00_u8BED_u4E49_u7406_u89E3_u548C_u547D_u540D" class="headerlink" title="统一语义理解和命名"></a>统一语义理解和命名</h3><h4 id="u5E03_u5C40_uFF08-g-_uFF09"><a href="#u5E03_u5C40_uFF08-g-_uFF09" class="headerlink" title="布局（.g-）"></a>布局（.g-）</h4><table>
<thead>
<tr>
<th>语义</th>
<th>命名</th>
<th>简写</th>
</tr>
</thead>
<tbody>
<tr>
<td>文档</td>
<td>doc</td>
<td>doc</td>
</tr>
<tr>
<td>头部</td>
<td>head</td>
<td>hd</td>
</tr>
<tr>
<td>主体</td>
<td>body</td>
<td>bd</td>
</tr>
<tr>
<td>尾部</td>
<td>foot</td>
<td>ft</td>
</tr>
<tr>
<td>主栏</td>
<td>main</td>
<td>mn</td>
</tr>
<tr>
<td>主栏子容器</td>
<td>mainc</td>
<td>mnc</td>
</tr>
<tr>
<td>侧栏</td>
<td>side</td>
<td>sd</td>
</tr>
<tr>
<td>侧栏子容器</td>
<td>sidec</td>
<td>sdc</td>
</tr>
<tr>
<td>盒容器</td>
<td>wrap/box</td>
<td>wrap/box</td>
</tr>
</tbody>
</table>
<h4 id="u6A21_u5757_uFF08-m-_uFF09_u3001_u5143_u4EF6_uFF08-u-_uFF09"><a href="#u6A21_u5757_uFF08-m-_uFF09_u3001_u5143_u4EF6_uFF08-u-_uFF09" class="headerlink" title="模块（.m-）、元件（.u-）"></a>模块（.m-）、元件（.u-）</h4><table>
<thead>
<tr>
<th>语义</th>
<th>命名</th>
<th>简写</th>
</tr>
</thead>
<tbody>
<tr>
<td>导航</td>
<td>nav</td>
<td>nav</td>
</tr>
<tr>
<td>子导航</td>
<td>subnav</td>
<td>snav</td>
</tr>
<tr>
<td>面包屑</td>
<td>crumb</td>
<td>crm</td>
</tr>
<tr>
<td>菜单</td>
<td>menu</td>
<td>menu</td>
</tr>
<tr>
<td>选项卡</td>
<td>tab</td>
<td>tab</td>
</tr>
<tr>
<td>标题区</td>
<td>head</td>
<td>title    hd/tt</td>
</tr>
<tr>
<td>内容区</td>
<td>body</td>
<td>content    bd/ct</td>
</tr>
<tr>
<td>列表</td>
<td>list</td>
<td>lst</td>
</tr>
<tr>
<td>表格</td>
<td>table</td>
<td>tb</td>
</tr>
<tr>
<td>表单</td>
<td>form</td>
<td>fm</td>
</tr>
<tr>
<td>热点</td>
<td>hot</td>
<td>hot</td>
</tr>
<tr>
<td>排行</td>
<td>top</td>
<td>top</td>
</tr>
<tr>
<td>登录</td>
<td>login</td>
<td>log</td>
</tr>
<tr>
<td>标志</td>
<td>logo</td>
<td>logo</td>
</tr>
<tr>
<td>广告</td>
<td>advertise</td>
<td>ad</td>
</tr>
<tr>
<td>搜索</td>
<td>search</td>
<td>sch</td>
</tr>
<tr>
<td>幻灯</td>
<td>slide</td>
<td>sld</td>
</tr>
<tr>
<td>提示</td>
<td>tips</td>
<td>tips</td>
</tr>
<tr>
<td>帮助</td>
<td>help</td>
<td>help</td>
</tr>
<tr>
<td>新闻</td>
<td>news</td>
<td>news</td>
</tr>
<tr>
<td>下载</td>
<td>download</td>
<td>dld</td>
</tr>
<tr>
<td>注册</td>
<td>regist</td>
<td>reg</td>
</tr>
<tr>
<td>投票</td>
<td>vote</td>
<td>vote</td>
</tr>
<tr>
<td>版权</td>
<td>copyright</td>
<td>cprt</td>
</tr>
<tr>
<td>结果</td>
<td>result</td>
<td>rst</td>
</tr>
<tr>
<td>标题</td>
<td>title</td>
<td>tt</td>
</tr>
<tr>
<td>按钮</td>
<td>button</td>
<td>btn</td>
</tr>
<tr>
<td>输入</td>
<td>input</td>
<td>ipt</td>
</tr>
</tbody>
</table>
<h4 id="u529F_u80FD_uFF08-f-_uFF09"><a href="#u529F_u80FD_uFF08-f-_uFF09" class="headerlink" title="功能（.f-）"></a>功能（.f-）</h4><table>
<thead>
<tr>
<th>语义</th>
<th>命名</th>
<th>简写</th>
</tr>
</thead>
<tbody>
<tr>
<td>浮动清除</td>
<td>clearboth</td>
<td>cb</td>
</tr>
<tr>
<td>向左浮动</td>
<td>floatleft</td>
<td>fl</td>
</tr>
<tr>
<td>向右浮动</td>
<td>floatright</td>
<td>fr</td>
</tr>
<tr>
<td>内联块级</td>
<td>inlineblock</td>
<td>ib</td>
</tr>
<tr>
<td>文本居中</td>
<td>textaligncenter</td>
<td>tac</td>
</tr>
<tr>
<td>文本居右</td>
<td>textalignright</td>
<td>tar</td>
</tr>
<tr>
<td>文本居左</td>
<td>textalignleft</td>
<td>tal</td>
</tr>
<tr>
<td>垂直居中</td>
<td>verticalalignmiddle</td>
<td>vam</td>
</tr>
<tr>
<td>溢出隐藏</td>
<td>overflowhidden</td>
<td>oh</td>
</tr>
<tr>
<td>完全消失</td>
<td>displaynone</td>
<td>dn</td>
</tr>
<tr>
<td>字体大小</td>
<td>fontsize</td>
<td>fs</td>
</tr>
<tr>
<td>字体粗细</td>
<td>fontweight</td>
<td>fw</td>
</tr>
</tbody>
</table>
<h4 id="u76AE_u80A4_uFF08-s-_uFF09"><a href="#u76AE_u80A4_uFF08-s-_uFF09" class="headerlink" title="皮肤（.s-）"></a>皮肤（.s-）</h4><table>
<thead>
<tr>
<th>语义</th>
<th>命名</th>
<th>简写</th>
</tr>
</thead>
<tbody>
<tr>
<td>字体颜色</td>
<td>fontcolor</td>
<td>fc</td>
</tr>
<tr>
<td>背景</td>
<td>background</td>
<td>bg</td>
</tr>
<tr>
<td>背景颜色</td>
<td>backgroundcolor</td>
<td>bgc</td>
</tr>
<tr>
<td>背景图片</td>
<td>backgroundimage</td>
<td>bgi</td>
</tr>
<tr>
<td>背景定位</td>
<td>backgroundposition</td>
<td>bgp</td>
</tr>
<tr>
<td>边框颜色</td>
<td>bordercolor</td>
<td>bdc</td>
</tr>
</tbody>
</table>
<h4 id="u72B6_u6001_uFF08-z-_uFF09"><a href="#u72B6_u6001_uFF08-z-_uFF09" class="headerlink" title="状态（.z-）"></a>状态（.z-）</h4><table>
<thead>
<tr>
<th>语义</th>
<th>命名</th>
<th>简写</th>
</tr>
</thead>
<tbody>
<tr>
<td>选中</td>
<td>selected</td>
<td>sel</td>
</tr>
<tr>
<td>当前</td>
<td>current</td>
<td>crt</td>
</tr>
<tr>
<td>显示</td>
<td>show</td>
<td>show</td>
</tr>
<tr>
<td>隐藏</td>
<td>hide</td>
<td>hide</td>
</tr>
<tr>
<td>打开</td>
<td>open</td>
<td>open</td>
</tr>
<tr>
<td>关闭</td>
<td>close</td>
<td>close</td>
</tr>
<tr>
<td>出错</td>
<td>error</td>
<td>err</td>
</tr>
<tr>
<td>不可用</td>
<td>disabled</td>
<td>dis</td>
</tr>
</tbody>
</table>
<h2 id="u5178_u578B_u9519_u8BEF"><a href="#u5178_u578B_u9519_u8BEF" class="headerlink" title="典型错误"></a>典型错误</h2><h3 id="u4E0D_u7B26_u5408NEC_u89C4_u8303_u7684_u9009_u62E9_u5668_u7528_u6CD5"><a href="#u4E0D_u7B26_u5408NEC_u89C4_u8303_u7684_u9009_u62E9_u5668_u7528_u6CD5" class="headerlink" title="不符合NEC规范的选择器用法"></a>不符合NEC规范的选择器用法</h3><pre><code>.class{}
</code></pre><p>不要以一个没有类别的样式作为主选择器，这样的选择器只能作为后代选择器使用，比如.m-xxx .class{}。</p>
<pre><code>.m-xxx div{}
</code></pre><p>不要以没有语义的标签作为选择器，这会造成大面积污染，除非你可以断定现在或将来你的这个选择器不会污染其他同类。</p>
<pre><code>.g-xxx .class{}
</code></pre><p>不要在页面布局中使用后代选择器，因为这个后代选择器可能会污染里面的元素。</p>
<pre><code>.g-xxx .m-yyy{}.g-xxx .u-yyy{}
</code></pre><p>不要用布局去控制模块或元件，模块和元件应与布局分离独立。</p>
<pre><code>.m-xxx .f-xxx{}.m-xxx .s-xxx{}
</code></pre><p>不要通过模块或其他类来重定义或修改或添加已经定义好的功能类选择器和皮肤类选择器。</p>
<pre><code>.m-xxx .class .class .class .class{}
</code></pre><p>不要将选择器写的过于冗长，这会额外增加文件大小并且限制了太小范围的选择器，使树形结构过于严格应用范围过于局限，建议3-4个长度之内写完。选择器并不需要完整反映结构嵌套顺序，相反，能简则简。</p>
<pre><code>.m-xxx .m-yyy .zzz{}
</code></pre><p>不要越级控制，如果.zzz是.m-yyy的后代选择器，那么不允许.m-yyy之外的选择器控制或修改.zzz。此时可以使用.m-yyy的扩展来修改.zzz，比如.m-yyy-1 .zzz{}。</p>
<h3 id="u6269_u5C55_u7C7B_u4F7F_u7528_u9519_u8BEF"><a href="#u6269_u5C55_u7C7B_u4F7F_u7528_u9519_u8BEF" class="headerlink" title="扩展类使用错误"></a>扩展类使用错误</h3><p>扩展类必须和其基类同时使用于同一个节点。</p>
<pre><code>错误：
class=&quot;g-xxx g-yyy-1&quot; 
class=&quot;m-xxx-1&quot; 
class=&quot;u-xxx u-yyy-1&quot; 
class=&quot;xxx-yyy&quot;。
正确：
class=&quot;g-xxx g-xxx-1&quot; 
class=&quot;m-xxx m-xxx-1&quot; 
class=&quot;u-yyy u-yyy-1&quot; 
class=&quot;xxx xxx-yyy&quot;。
</code></pre><p>参考资料：<br><a href="http://www.csdn.net/article/2011-12-02/308445" target="_blank" rel="external">编写出色CSS代码的13个建议</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　<strong>规范：</strong>你是否常常碰到以下问题：你总是看不懂他写的代码，或者读起来很吃力；你需要改他的代码却无从下手，或总是要去问他这里是什么改了会不会影响其他代码；你和他一起开发一个产品，你总是怕代码和他有冲突或互相影响；你的代码在多次维护任务之后变得越来越臃肿，越来越难以维护。解决以上问题只需一种方法——读我们的规范！<br>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://luuman.github.io/tags/CSS/"/>
    
      <category term="Norm" scheme="http://luuman.github.io/categories/Norm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[前端代码规范Javascript]]></title>
    <link href="http://luuman.github.io/2016/12/31/Skill/norm/normjs/"/>
    <id>http://luuman.github.io/2016/12/31/Skill/norm/normjs/</id>
    <published>2016-12-31T10:29:00.000Z</published>
    <updated>2017-02-18T10:58:36.000Z</updated>
    <content type="html"><![CDATA[<p>　　<strong>规范：</strong>你是否常常碰到以下问题：你总是看不懂他写的代码，或者读起来很吃力；你需要改他的代码却无从下手，或总是要去问他这里是什么改了会不会影响其他代码；你和他一起开发一个产品，你总是怕代码和他有冲突或互相影响；你的代码在多次维护任务之后变得越来越臃肿，越来越难以维护。解决以上问题只需一种方法——读我们的规范！<br><a id="more"></a></p>
<h2 id="u547D_u540D_u89C4_u5219"><a href="#u547D_u540D_u89C4_u5219" class="headerlink" title="命名规则"></a>命名规则</h2><blockquote>
<p>JavaScript支持大小写<br>统一使用单引号<br>命名使用驼峰法则<br>开头字母大写，表示对象。</p>
</blockquote>
<h3 id="u53D8_u91CF_u547D_u540D"><a href="#u53D8_u91CF_u547D_u540D" class="headerlink" title="变量命名"></a>变量命名</h3><h3 id="u53D8_u91CF_u547D_u540D-1"><a href="#u53D8_u91CF_u547D_u540D-1" class="headerlink" title="变量命名"></a>变量命名</h3><ol>
<li>匈牙利命名：</li>
</ol>
<p>开头字母用变量类型的缩写，其余部分用变量的英文或英文的缩写，要求单词第一个字母大写。</p>
<pre><code>For example: long lsum = 0;&quot;l&quot;是类型的缩写；
s：表示字符串。例如：sName，sHtml；
n：表示数字。例如：nPage，nTotal；
b：表示逻辑。例如：bChecked，bHasLogin；
a：表示数组。例如：aList，aGroup；
r：表示正则表达式。例如：rDomain，rEmail；
f：表示函数。例如：fGetHtml，fInit；
o：表示以上未涉及到的其他对象，例如：oButton，oDate；
g：表示全局变量，例如：gUserName，gLoginTime；
</code></pre><ol>
<li>驼峰式：</li>
</ol>
<p>第一个单词首字母小写，后面其他单词首字母大写。</p>
<pre><code>For example:  firstName 
</code></pre><h3 id="u51FD_u6570_u547D_u540D"><a href="#u51FD_u6570_u547D_u540D" class="headerlink" title="函数命名"></a>函数命名</h3><ol>
<li><p>函数命名：统一使用动词或者动词+名词形式 —- fnInit()</p>
</li>
<li><p>对象方法命名使用fn+对象类名+动词+名词形式   fnAnimateDoRun() </p>
</li>
<li><p>某事件响应函数命名方式为fn+触发事件对象名+事件名或者模块名  fnDivClick()</p>
</li>
</ol>
<p>附常用的动词列表：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th style="text-align:center">含义</th>
<th>名称</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>get</td>
<td style="text-align:center">获取</td>
<td>set</td>
<td style="text-align:center">设置</td>
</tr>
<tr>
<td>add</td>
<td style="text-align:center">增加</td>
<td>remove</td>
<td style="text-align:center">删除</td>
</tr>
<tr>
<td>create</td>
<td style="text-align:center">创建</td>
<td>destory</td>
<td style="text-align:center">移除</td>
</tr>
<tr>
<td>start</td>
<td style="text-align:center">启动</td>
<td>stop</td>
<td style="text-align:center">停止</td>
</tr>
<tr>
<td>open</td>
<td style="text-align:center">打开</td>
<td>close</td>
<td style="text-align:center">关闭</td>
</tr>
<tr>
<td>read</td>
<td style="text-align:center">读取</td>
<td>write</td>
<td style="text-align:center">写入</td>
</tr>
<tr>
<td>load</td>
<td style="text-align:center">载入</td>
<td>save</td>
<td style="text-align:center">保存</td>
</tr>
<tr>
<td>create</td>
<td style="text-align:center">创建</td>
<td>destroy</td>
<td style="text-align:center">销毁</td>
</tr>
<tr>
<td>begin</td>
<td style="text-align:center">开始</td>
<td>end</td>
<td style="text-align:center">结束</td>
</tr>
<tr>
<td>backup</td>
<td style="text-align:center">备份</td>
<td>restore</td>
<td style="text-align:center">恢复</td>
</tr>
<tr>
<td>import</td>
<td style="text-align:center">导入</td>
<td>export</td>
<td style="text-align:center">导出</td>
</tr>
<tr>
<td>split</td>
<td style="text-align:center">分割</td>
<td>merge</td>
<td style="text-align:center">合并</td>
</tr>
<tr>
<td>inject</td>
<td style="text-align:center">注入</td>
<td>extract</td>
<td style="text-align:center">提取</td>
</tr>
<tr>
<td>attach</td>
<td style="text-align:center">附着</td>
<td>detach</td>
<td style="text-align:center">脱离</td>
</tr>
<tr>
<td>bind</td>
<td style="text-align:center">绑定</td>
<td>separate</td>
<td style="text-align:center">分离</td>
</tr>
<tr>
<td>view</td>
<td style="text-align:center">查看</td>
<td>browse</td>
<td style="text-align:center">浏览</td>
</tr>
<tr>
<td>edit</td>
<td style="text-align:center">编辑</td>
<td>modify</td>
<td style="text-align:center">修改</td>
</tr>
<tr>
<td>select</td>
<td style="text-align:center">选取</td>
<td>mark</td>
<td style="text-align:center">标记</td>
</tr>
<tr>
<td>copy</td>
<td style="text-align:center">复制</td>
<td>paste</td>
<td style="text-align:center">粘贴</td>
</tr>
<tr>
<td>undo</td>
<td style="text-align:center">撤销</td>
<td>redo</td>
<td style="text-align:center">重做</td>
</tr>
<tr>
<td>insert</td>
<td style="text-align:center">插入</td>
<td>delete</td>
<td style="text-align:center">移除</td>
</tr>
<tr>
<td>add</td>
<td style="text-align:center">加入</td>
<td>append</td>
<td style="text-align:center">添加</td>
</tr>
<tr>
<td>clean</td>
<td style="text-align:center">清理</td>
<td>clear</td>
<td style="text-align:center">清除</td>
</tr>
<tr>
<td>index</td>
<td style="text-align:center">索引</td>
<td>sort</td>
<td style="text-align:center">排序</td>
</tr>
<tr>
<td>find</td>
<td style="text-align:center">查找</td>
<td>search</td>
<td style="text-align:center">搜索</td>
</tr>
<tr>
<td>increase</td>
<td style="text-align:center">增加</td>
<td>decrease</td>
<td style="text-align:center">减少</td>
</tr>
<tr>
<td>play</td>
<td style="text-align:center">播放</td>
<td>pause</td>
<td style="text-align:center">暂停</td>
</tr>
<tr>
<td>launch</td>
<td style="text-align:center">启动</td>
<td>run</td>
<td style="text-align:center">运行</td>
</tr>
<tr>
<td>compile</td>
<td style="text-align:center">编译</td>
<td>execute</td>
<td style="text-align:center">执行</td>
</tr>
<tr>
<td>debug</td>
<td style="text-align:center">调试</td>
<td>trace</td>
<td style="text-align:center">跟踪</td>
</tr>
<tr>
<td>observe</td>
<td style="text-align:center">观察</td>
<td>listen</td>
<td style="text-align:center">监听</td>
</tr>
<tr>
<td>build</td>
<td style="text-align:center">构建</td>
<td>publish</td>
<td style="text-align:center">发布</td>
</tr>
<tr>
<td>input</td>
<td style="text-align:center">输入</td>
<td>output</td>
<td style="text-align:center">输出</td>
</tr>
<tr>
<td>encode</td>
<td style="text-align:center">编码</td>
<td>decode</td>
<td style="text-align:center">解码</td>
</tr>
<tr>
<td>encrypt</td>
<td style="text-align:center">加密</td>
<td>decrypt</td>
<td style="text-align:center">解密</td>
</tr>
<tr>
<td>compress</td>
<td style="text-align:center">压缩</td>
<td>decompress</td>
<td style="text-align:center">解压缩</td>
</tr>
<tr>
<td>pack</td>
<td style="text-align:center">打包</td>
<td>unpack</td>
<td style="text-align:center">解包</td>
</tr>
<tr>
<td>parse</td>
<td style="text-align:center">解析</td>
<td>emit</td>
<td style="text-align:center">生成</td>
</tr>
<tr>
<td>connect</td>
<td style="text-align:center">连接</td>
<td>disconnect</td>
<td style="text-align:center">断开</td>
</tr>
<tr>
<td>send</td>
<td style="text-align:center">发送</td>
<td>receive</td>
<td style="text-align:center">接收</td>
</tr>
<tr>
<td>download</td>
<td style="text-align:center">下载</td>
<td>upload</td>
<td style="text-align:center">上传</td>
</tr>
<tr>
<td>refresh</td>
<td style="text-align:center">刷新</td>
<td>synchronize</td>
<td style="text-align:center">同步</td>
</tr>
<tr>
<td>update</td>
<td style="text-align:center">更新</td>
<td>revert</td>
<td style="text-align:center">复原</td>
</tr>
<tr>
<td>lock</td>
<td style="text-align:center">锁定</td>
<td>unlock</td>
<td style="text-align:center">解锁</td>
</tr>
<tr>
<td>check</td>
<td style="text-align:center">out</td>
<td>签出</td>
<td style="text-align:center">/check in 签入</td>
</tr>
<tr>
<td>submit</td>
<td style="text-align:center">提交</td>
<td>commit</td>
<td style="text-align:center">交付</td>
</tr>
<tr>
<td>push</td>
<td style="text-align:center">推</td>
<td>pull</td>
<td style="text-align:center">拉</td>
</tr>
<tr>
<td>expand</td>
<td style="text-align:center">展开</td>
<td>collapse</td>
<td style="text-align:center">折叠</td>
</tr>
<tr>
<td>begin</td>
<td style="text-align:center">起始</td>
<td>end</td>
<td style="text-align:center">结束</td>
</tr>
<tr>
<td>start</td>
<td style="text-align:center">开始</td>
<td>finish</td>
<td style="text-align:center">完成</td>
</tr>
<tr>
<td>enter</td>
<td style="text-align:center">进入</td>
<td>exit</td>
<td style="text-align:center">退出</td>
</tr>
<tr>
<td>abort</td>
<td style="text-align:center">放弃</td>
<td>quit</td>
<td style="text-align:center">离开</td>
</tr>
<tr>
<td>obsolete</td>
<td style="text-align:center">废弃</td>
<td>depreciate</td>
<td style="text-align:center">废旧</td>
</tr>
<tr>
<td>collect</td>
<td style="text-align:center">收集</td>
<td>aggregate</td>
<td style="text-align:center">聚集</td>
</tr>
</tbody>
</table>
<p>附上一段代码细细品味</p>
<figure class="highlight actionscript" data-lang=" actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类名</span></span><br><span class="line"><span class="keyword">var</span> ClassName = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//私有变量</span></span><br><span class="line">	<span class="keyword">var</span> _FieldName = <span class="string">"Test Field"</span>;</span><br><span class="line">	<span class="comment">//属性</span></span><br><span class="line">	<span class="keyword">this</span>.PropertyName = <span class="string">"Test Property Name"</span>;</span><br><span class="line">	<span class="comment">//私有方法</span></span><br><span class="line">	<span class="keyword">var</span> functionName = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line">A：加 _ 下划线前缀  </span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.PublicFunctionName = <span class="function"><span class="keyword">function</span><span class="params">(pTestName)</span></span>&#123;<span class="comment">//公有方法 pTestName:参数</span></span><br><span class="line">    <span class="comment">//局部变量</span></span><br><span class="line">    <span class="keyword">var</span> condition = <span class="string">"condition"</span>;</span><br><span class="line">    <span class="comment">//判断</span></span><br><span class="line">    <span class="keyword">if</span>(condition)&#123;</span><br><span class="line">        <span class="keyword">return</span> functionName();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;&#125;</span><br><span class="line">    B：小写开头</span><br><span class="line">    <span class="comment">//数组</span></span><br><span class="line">    <span class="keyword">var</span> nameCol = [<span class="string">"a"</span>,<span class="string">"b"</span>]; </span><br><span class="line">    <span class="comment">//数组项</span></span><br><span class="line">    <span class="keyword">var</span> nameItem = nameCol[<span class="number">0</span>]; </span><br><span class="line">    <span class="comment">//循环</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nameCol.length; i++)&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    C:大写开头</span><br><span class="line">    <span class="keyword">var</span> selectName = <span class="string">"item"</span>;</span><br><span class="line">    <span class="comment">//选择</span></span><br><span class="line">    <span class="keyword">switch</span>(selectName)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"item"</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    D：加小写p前缀</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u533F_u540D_u51FD_u6570"><a href="#u533F_u540D_u51FD_u6570" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>要避免全局变量泛滥， 可以考虑使用匿名函数， 把不需要在外部访问的变量或者函数限制在一个比较小的范围内。</p>
<figure class="highlight xml" data-lang=" xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">例如以下代码:</span><br><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="actionscript"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">func1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> list = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++)&#123;</span><br><span class="line">            <span class="comment">//..</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    func1(); <span class="comment">//　自动运行</span></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这段代码的作用是在页面加载的时候自动执行某些操作， 并不需要被外部调用， 但是它执行过后却留下了一个全局的函数。</p>
<figure class="highlight xml" data-lang=" xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">像这种情况， 非常有必要使用匿名函数：</span><br><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="actionscript"></span><br><span class="line">    (<span class="function"><span class="keyword">function</span> <span class="title">func1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> list = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++)&#123;</span><br><span class="line">            <span class="comment">//..</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)(); <span class="comment">//　自动运行</span></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="u533F_u540D_u51FD_u6570_u7684_u683C_u5F0F_uFF1A"><a href="#u533F_u540D_u51FD_u6570_u7684_u683C_u5F0F_uFF1A" class="headerlink" title="匿名函数的格式："></a>匿名函数的格式：</h3><figure class="highlight actionscript" data-lang=" actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 代码块</span></span><br><span class="line">&#125;)();</span><br><span class="line">如果要带参数的话：</span><br><span class="line">(<span class="function"><span class="keyword">function</span><span class="params">(arg1, arg2, argN)</span></span>&#123;</span><br><span class="line">    <span class="comment">//..</span></span><br><span class="line">&#125;)(arg1, arg2, argN);</span><br></pre></td></tr></table></figure>
<h3 id="u547D_u540D_u7A7A_u95F4"><a href="#u547D_u540D_u7A7A_u95F4" class="headerlink" title="命名空间"></a>命名空间</h3><p>还有另外一个方法可以减少全局变量， 那就是命名空间， 在JS中可以用”对象-属性”来模拟命名空间；</p>
<figure class="highlight xquery" data-lang=" xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">window</span>.com = &#123;&#125;</span><br><span class="line"><span class="keyword">window</span>.com.bytter = &#123;&#125;</span><br><span class="line"><span class="keyword">window</span>.com.bytter.hello = <span class="keyword">function</span>()&#123;</span><br><span class="line">    alert(<span class="string">"hello"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果你要给某个已经存在的页面增加功能， 可能要增加十多个函数， 而那个页面已经存在大量的全局变量和函数， 甚至还有函数跟你新增的函数同名， 怎么办？<br>命名空间是比较好的选择， 你可以创建一个命名空间， 把你的新函数都放在那个命名空间之下， 例如：<br><figure class="highlight xml" data-lang=" xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">button</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">onclick</span>=<span class="value">"pg.check.userAcc()"</span>&gt;</span>检查用户名<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">button</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">onclick</span>=<span class="value">"pg.check.userAcc()"</span>&gt;</span>检查帐号<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line">    <span class="built_in">window</span>.pg = &#123;&#125;</span><br><span class="line">    <span class="built_in">window</span>.pg.check = &#123;</span><br><span class="line">        <span class="comment">// 检查用户名</span></span><br><span class="line">        userName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//..</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 检查帐号</span></span><br><span class="line">        userAcc: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//..</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="u4E92_u4E0D_u5E72_u6270"><a href="#u4E92_u4E0D_u5E72_u6270" class="headerlink" title="互不干扰"></a>互不干扰</h3><p>结合上述的匿名函数和命名空间的使用， 可以把一个页面中自己维护的代码与其它的代码分隔开来， 将与外部代码的耦合降低到最小。</p>
<figure class="highlight xml" data-lang=" xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line">    <span class="comment">// 页面命名空间</span></span><br><span class="line">    <span class="built_in">window</span>.pg = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查用户信息</span></span><br><span class="line">    <span class="comment">// 作者：张三</span></span><br><span class="line">    <span class="comment">// 最后更新： 2012.12.31</span></span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 私有变量</span></span><br><span class="line">        <span class="keyword">var</span> a, b, c;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查用户信息的相关方法</span></span><br><span class="line">        <span class="built_in">window</span>.pg.check = &#123;</span><br><span class="line">            <span class="comment">// 检查用户名</span></span><br><span class="line">            userName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="comment">//..</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 检查帐号</span></span><br><span class="line">            userAcc: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="comment">//..</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    &#125;)(); <span class="comment">// end 张三的代码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="label">xxx功能</span></span></span><br><span class="line">    <span class="comment">// 作者：李四</span></span><br><span class="line">    <span class="comment">// 最后更新： 2012.1.1</span></span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">window</span>.pg.xxx = &#123;</span><br><span class="line">            <span class="comment">//..</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)(); <span class="comment">// end 李四的代码</span></span><br><span class="line"></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="u53D8_u91CF_u58F0_u660E"><a href="#u53D8_u91CF_u58F0_u660E" class="headerlink" title="变量声明"></a>变量声明</h3><p>变量必须在使用前用var进行声明；<br>变量的声明应该放在代码块或者函数的头部；<br>可在一行内声明多个变量， 但要考虑美观易读；</p>
<figure class="highlight php" data-lang=" php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 银行名称, 银行帐号 </span></span><br><span class="line"><span class="keyword">var</span> type, acc;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 银行名称, 银行帐号</span></span><br><span class="line"><span class="keyword">var</span> type = <span class="string">"中国银行"</span>, acc = <span class="string">"xxxxxx"</span>;</span><br><span class="line"><span class="keyword">var</span> type = <span class="string">"中国银行"</span>,   <span class="comment">// 银行名称</span></span><br><span class="line">    acc = <span class="string">"xxxxxx"</span>;      <span class="comment">// 银行帐号</span></span><br><span class="line">尽量使用易于理解的变量名，如：</span><br><span class="line"><span class="keyword">var</span> bankType = <span class="string">"中国银行"</span>,</span><br><span class="line">    bankAccount = <span class="string">"xxxxxx"</span>; </span><br><span class="line"><span class="comment">### 命名</span></span><br><span class="line">普通变量名和函数名采用<span class="string">"小驼峰式命名法"</span>， 如：firstName、lastName</span><br><span class="line">作为构造函数的函数采用<span class="string">"大驼峰式命名法"</span>， 如：</span><br><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//..</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> me = <span class="keyword">new</span> Person();</span><br><span class="line">常量用大写和下划线表示，如：</span><br><span class="line"><span class="keyword">var</span> ROOT_PATH = <span class="string">"/v10/"</span>;</span><br><span class="line">分号</span><br><span class="line">每条语句必须使用分号结尾（特别是需要压缩的js，省略分号常常会导致压缩失败）；</span><br><span class="line">大括号</span><br><span class="line"><span class="keyword">if</span>语句、函数定义、<span class="keyword">try</span>语句等带大括号的结构， 左大括号应紧跟前面的部分：</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//..</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">//..</span></span><br><span class="line">&#125;</span><br><span class="line">使用复合语句时不要省略大括号&#123;&#125;</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ary.length; i++)&#123;</span><br><span class="line">    <span class="keyword">list</span>.push(ary[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ary.length; i++)</span><br><span class="line">    <span class="keyword">list</span>.push(ary[i]);</span><br><span class="line">以提高代码可读性为前提，允许例外：</span><br><span class="line"><span class="keyword">if</span>(!data) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(row) <span class="keyword">list</span>.push(row);</span><br></pre></td></tr></table></figure>
<h3 id="u7A7A_u683C"><a href="#u7A7A_u683C" class="headerlink" title="空格"></a>空格</h3><p>数值操作符(如, +/-/*/% 等)、比较符（大于、小于、等于）两边留空格；<br>逗号、冒号、分号后要留一个空格（如果后面还有内容的话）；<br>行尾不要有空格;<br>点号前后不要出现空格；<br>函数名末尾和左括号之间不要出现空格；<br>字符串<br>表示字符串用单引号或双引号均可， 建议统一使用双引号，<br><figure class="highlight php" data-lang=" php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">但表示html标签时一律使用单引号， 如：</span><br><span class="line"><span class="keyword">var</span> html = <span class="string">'&lt;div class="msg" &gt;&lt;/div&gt;'</span>;</span><br><span class="line">数组</span><br><span class="line">使用简便的方式定义数组：</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">list</span> = <span class="keyword">new</span> <span class="keyword">Array</span>();</span><br><span class="line"><span class="keyword">list</span>[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">list</span>[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">list</span>[<span class="number">2</span>] = <span class="number">3</span>;</span><br></pre></td></tr></table></figure></p>
<h2 id="u6CE8_u91CA_u89C4_u8303"><a href="#u6CE8_u91CA_u89C4_u8303" class="headerlink" title="注释规范"></a>注释规范</h2><h3 id="u5355_u884C_u6CE8_u91CA"><a href="#u5355_u884C_u6CE8_u91CA" class="headerlink" title="单行注释"></a>单行注释</h3><pre><code>语法：
// 这是单行注释
</code></pre><p>使用方式：</p>
<blockquote>
<ol>
<li>单独一行：//(双斜线)与注释文字之间保留一个空格。</li>
<li>在代码后面添加注释：//(双斜线)与代码之间保留一个空格，并且//(双斜线)与注释文字之间保留一个空格。</li>
<li>注释代码：//(双斜线)与代码之间保留一个空格。</li>
</ol>
</blockquote>
<p>示例：</p>
<figure class="highlight kotlin" data-lang=" kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用了一个函数；1)单独在一行</span></span><br><span class="line">setTitle();</span><br><span class="line"><span class="variable"><span class="keyword">var</span> maxCount</span> = <span class="number">10</span>; <span class="comment">// 设置最大量；2)在代码后面注释</span></span><br><span class="line"><span class="comment">// setName(); // 3)注释代码</span></span><br></pre></td></tr></table></figure>
<h3 id="u591A_u884C_u6CE8_u91CA"><a href="#u591A_u884C_u6CE8_u91CA" class="headerlink" title="多行注释"></a>多行注释</h3><pre><code>语法：/* 注释说明 */
</code></pre><p>使用方法：</p>
<blockquote>
<ol>
<li>若开始(/<em>)和结束(</em>/)都在一行，推荐采用单行注释。</li>
<li>若至少三行注释时，第一行为/<em>，最后行为</em>/，其他行以<em>开始，并且注释文字与</em>保留一个空格。</li>
</ol>
</blockquote>
<p>示例：</p>
<figure class="highlight gherkin" data-lang=" gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">*</span></span><br><span class="line"><span class="keyword">*</span> 代码执行到这里后会调用setTitle()函数</span><br><span class="line"><span class="keyword">*</span> setTitle()：设置title的值</span><br><span class="line"><span class="keyword">*</span>/</span><br><span class="line">setTitle();</span><br></pre></td></tr></table></figure>
<h3 id="u51FD_u6570_28_u65B9_u6CD5_29_u6CE8_u91CA"><a href="#u51FD_u6570_28_u65B9_u6CD5_29_u6CE8_u91CA" class="headerlink" title="函数(方法)注释"></a>函数(方法)注释</h3><p>说明：函数(方法)注释也是多行注释的一种，但是包含了特殊的注释要求，参照 javadoc(百度百科)。</p>
<p>语法：</p>
<pre><code>/** 
* 函数说明 
* @关键字 
*/
</code></pre><p>常用注释关键字：(只列出一部分，并不是全部)</p>
<p>示例：</p>
<table>
<thead>
<tr>
<th style="text-align:left">注释名</th>
<th>语法</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">@name</td>
<td>@name 名称</td>
<td>@name WacthClock</td>
</tr>
<tr>
<td style="text-align:left">@author</td>
<td>@author 作者 邮箱</td>
<td>@author Luuman <a href="&#x6d;&#97;&#105;&#108;&#116;&#x6f;&#x3a;&#108;&#x75;&#117;&#109;&#x61;&#110;&#115;&#x40;&#x71;&#x71;&#x2e;&#99;&#111;&#109;">&#108;&#x75;&#117;&#109;&#x61;&#110;&#115;&#x40;&#x71;&#x71;&#x2e;&#99;&#111;&#109;</a></td>
</tr>
<tr>
<td style="text-align:left">@brief</td>
<td>@brief  描述</td>
<td>@brief this is watch for clock in canvas.</td>
</tr>
<tr>
<td style="text-align:left">@dateTime</td>
<td>@dateTime 时间</td>
<td>@dateTime 2016-11-27</td>
</tr>
<tr>
<td style="text-align:left">@moreInfo</td>
<td>@moreInfo 链接</td>
<td>@moreInfo luuman.github.io/[link]</td>
</tr>
<tr>
<td style="text-align:left">@version</td>
<td>@version XX.XX.XX</td>
<td>@version 1.0.3</td>
</tr>
<tr>
<td style="text-align:left">@param</td>
<td>@param 名 {[type]}  描述信息</td>
<td>@param name {String} 传入名称</td>
</tr>
<tr>
<td style="text-align:left">@return</td>
<td>@return {[type]} 描述信息</td>
<td>@return {Boolean} true:可执行;false:不可执行</td>
</tr>
<tr>
<td style="text-align:left">@example</td>
<td>@example 示例代码</td>
<td>@example WacthClock({});</td>
</tr>
</tbody>
</table>
<figure class="highlight gherkin" data-lang=" gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@name     WacthClock              watch clock js</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@author   Luuman                  &lt;luumans@qq.com&gt;</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@brief    this is watch for clock in canvas.</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@dateTime 2016-11-27</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@moreInfo luuman.github.io/[link]</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@version  1.0.0</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param    &#123;[type]&#125;</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param    &#123;[type]&#125;</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param    &#123;[type]&#125;</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@return   &#123;[type]&#125;</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@example WacthClock(&#123;&#125;);</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br></pre></td></tr></table></figure>
<figure class="highlight gherkin" data-lang=" gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"><span class="keyword">*</span> 合并Grid的行</span><br><span class="line"><span class="keyword">*</span> <span class="comment">@param grid &#123;Ext.Grid.Panel&#125; 需要合并的Grid</span></span><br><span class="line"><span class="keyword">*</span> <span class="comment">@param cols &#123;Array&#125; 需要合并列的Index(序号)数组；从0开始计数，序号也包含。</span></span><br><span class="line"><span class="keyword">*</span> <span class="comment">@param isAllSome &#123;Boolean&#125; ：是否2个tr的cols必须完成一样才能进行合并。true：完成一样；false(默认)：不完全一样</span></span><br><span class="line"><span class="keyword">*</span> <span class="comment">@return void</span></span><br><span class="line"><span class="keyword">*</span> <span class="comment">@author polk6 2015/07/21 </span></span><br><span class="line"><span class="keyword">*</span> <span class="comment">@example</span></span><br><span class="line"><span class="keyword">*</span> _________________                             _________________</span><br><span class="line"><span class="keyword">*</span> |<span class="string">  年龄 </span>|<span class="string">  姓名 </span>|<span class="string">                             </span>|<span class="string">  年龄 </span>|<span class="string">  姓名 </span>|</span><br><span class="line"><span class="keyword">*</span> -----------------      mergeCells(grid,[0])   -----------------</span><br><span class="line"><span class="keyword">*</span> |<span class="string">  18   </span>|<span class="string">  张三 </span>|<span class="string">              =&gt;             </span>|<span class="string">       </span>|<span class="string">  张三 </span>|</span><br><span class="line"><span class="keyword">*</span> -----------------                             -  18   ---------</span><br><span class="line"><span class="keyword">*</span> |<span class="string">  18   </span>|<span class="string">  王五 </span>|<span class="string">                             </span>|<span class="string">       </span>|<span class="string">  王五 </span>|</span><br><span class="line"><span class="keyword">*</span> -----------------                             -----------------</span><br><span class="line"><span class="keyword">*</span>/</span><br><span class="line">function mergeCells(grid, cols, isAllSome) &#123;</span><br><span class="line">    // Do Something</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="http://www.cnblogs.com/polk6/p/4660195.html" target="_blank" rel="external">JavaScript 开发规范</a><br><a href="http://www.codeweblog.com/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/" target="_blank" rel="external">javascript学习笔记(一)基础知识</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　<strong>规范：</strong>你是否常常碰到以下问题：你总是看不懂他写的代码，或者读起来很吃力；你需要改他的代码却无从下手，或总是要去问他这里是什么改了会不会影响其他代码；你和他一起开发一个产品，你总是怕代码和他有冲突或互相影响；你的代码在多次维护任务之后变得越来越臃肿，越来越难以维护。解决以上问题只需一种方法——读我们的规范！<br>]]>
    
    </summary>
    
      <category term="Javascript" scheme="http://luuman.github.io/tags/Javascript/"/>
    
      <category term="Norm" scheme="http://luuman.github.io/categories/Norm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React Native Text]]></title>
    <link href="http://luuman.github.io/2016/12/27/FrontFrame/ReactNative/Components/RNCText/"/>
    <id>http://luuman.github.io/2016/12/27/FrontFrame/ReactNative/Components/RNCText/</id>
    <published>2016-12-27T10:29:00.000Z</published>
    <updated>2016-11-16T01:17:12.000Z</updated>
    <content type="html"><![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br><a id="more"></a></p>
<h3 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h3><p>按官方文档的话来说，Text它也支持嵌套，样式和触摸处理。</p>
<h4 id="Props_u5C5E_u6027"><a href="#Props_u5C5E_u6027" class="headerlink" title="Props属性"></a>Props属性</h4><h5 id="accessible_bool"><a href="#accessible_bool" class="headerlink" title="accessible bool"></a>accessible bool</h5><p>文本可以显示的行数<br>clip is working only for iOS</p>
<figure class="highlight ini" data-lang=" ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">accessible=<span class="value">&#123;<span class="keyword">true</span>&#125;</span></span></span><br></pre></td></tr></table></figure>
<h5 id="numberOfLines_number"><a href="#numberOfLines_number" class="headerlink" title="numberOfLines number"></a>numberOfLines number</h5><p>文本可以显示的行数</p>
<figure class="highlight cpp" data-lang=" cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numberOfLines=&#123;<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure>
<h5 id="onLayout_function"><a href="#onLayout_function" class="headerlink" title="onLayout function"></a>onLayout function</h5><p>布局发生变化时调用</p>
<figure class="highlight css" data-lang=" css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="rules">&#123;<span class="rule"><span class="attribute">nativeEvent</span>:<span class="value"> &#123;layout: &#123;x, y, width, height</span></span></span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>
<h5 id="onLongPress_function"><a href="#onLongPress_function" class="headerlink" title="onLongPress function"></a>onLongPress function</h5><p>长按事件</p>
<figure class="highlight actionscript" data-lang=" actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onLongPress=&#123;<span class="keyword">this</span>.increaseSize&#125;&gt;</span><br></pre></td></tr></table></figure>
<h5 id="onPress_function"><a href="#onPress_function" class="headerlink" title="onPress function"></a>onPress function</h5><p>按下或者点击事件</p>
<figure class="highlight autoit" data-lang=" autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onPress=&#123;() =&gt; console.<span class="built_in">log</span>(<span class="string">'1st'</span>)&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u6848_u4F8B"><a href="#u6848_u4F8B" class="headerlink" title="案例"></a>案例</h3><h4 id="u5D4C_u5957_uFF1A"><a href="#u5D4C_u5957_uFF1A" class="headerlink" title="嵌套："></a>嵌套：</h4><figure class="highlight crystal" data-lang=" crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import <span class="constant">React</span>, &#123; <span class="constant">Component</span> &#125; from <span class="string">'react'</span>;</span><br><span class="line">import &#123; <span class="constant">AppRegistry</span>, <span class="constant">Text</span> &#125; from <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TitleNested</span> <span class="title">extends</span> <span class="title">Component</span> &#123;</span></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;<span class="constant">Text</span>&gt;</span><br><span class="line">        <span class="constant">TitleNested</span>地方</span><br><span class="line">        &lt;<span class="constant">Text</span> style=<span class="expansion">&#123;&#123;<span class="symbol">fontWeight:</span> <span class="string">'bold'</span>, <span class="symbol">fontSize:</span> <span class="number">20</span>&#125;&#125;</span>&gt;</span><br><span class="line">          <span class="constant">I</span> am bold地方</span><br><span class="line">          &lt;<span class="constant">Text</span> style=<span class="expansion">&#123;&#123;<span class="symbol">color:</span> <span class="string">'red'</span>&#125;&#125;</span>&gt;</span><br><span class="line">            and red地方</span><br><span class="line">          &lt;<span class="regexp">/Text&gt;</span><br><span class="line">        &lt;/</span><span class="constant">Text</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/Text&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AppRegistry.registerComponent('TitleNested', () =&gt; TitleNested);</span></span><br></pre></td></tr></table></figure>
<h4 id="u7B80_u4E66_uFF1A"><a href="#u7B80_u4E66_uFF1A" class="headerlink" title="简书："></a>简书：</h4><figure class="highlight javascript" data-lang=" javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">'use strict'</span>;</span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  AppRegistry,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  Text,</span><br><span class="line">  View</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TitleStyle</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=<span class="value">&#123;styles.container&#125;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=<span class="value">&#123;styles.title_view&#125;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.title_text&#125;</span>&gt;</span>简书<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">numberOfLines</span>=<span class="value">&#123;1&#125;</span> <span class="attribute">style</span>=<span class="value">&#123;styles.content_title_text&#125;</span>&gt;</span>不想过低配的人生，请先看看这本书<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=<span class="value">&#123;styles.source_view&#125;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.source_text&#125;</span>&gt;</span>余小鱼MsYu<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.source_text&#125;</span>&gt;</span>阅读7975<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">accessibilityLabel</span>=<span class="value">&#123;'Tap</span> <span class="attribute">me</span>!'&#125; <span class="attribute">accessible</span>=<span class="value">&#123;true&#125;</span> <span class="attribute">numberOfLines</span>=<span class="value">&#123;2&#125;</span> <span class="attribute">style</span>=<span class="value">&#123;styles.content_title_text&#125;</span>&gt;</span>我们熟悉的两种人生姿势：“飞黄腾达”和“赖在地上”。雾满拦江告诉你第三种：两脚不离大地，拼命向上生长。 ——《我不过低配的人生》<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.content_text&#125;</span>&gt;</span>作者是雾满拦江。乍一看，这名字很熟，似乎在哪里见过或听过，但具体不太了解。随即翻开简介，了解到：著名作家，“心学讲武堂”创始人，幽默写史领军人物。他写历史、职场，也写百态人情。其人特立独行、学识颇丰，其文辛辣生猛、犀利幽默，读之可以下酒。代表作有《神奇圣人王阳明》《别笑，这是大清正史》《民国就是这么生猛》《推背图中的历史》等。<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">    )</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">  container: &#123;</span><br><span class="line">    flex: <span class="number">1</span>,</span><br><span class="line">    backgroundColor:<span class="string">'#FFF'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">   title_view:&#123;</span><br><span class="line">    flexDirection:<span class="string">'row'</span>,</span><br><span class="line">    height:<span class="number">50</span>,</span><br><span class="line">    justifyContent: <span class="string">'center'</span>,</span><br><span class="line">    alignItems: <span class="string">'center'</span>,</span><br><span class="line">    backgroundColor: <span class="string">'#E45E46'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">   title_text:&#123;</span><br><span class="line">    color:<span class="string">'#FFF'</span>,</span><br><span class="line">    fontSize:<span class="number">20</span>,</span><br><span class="line">    textAlign:<span class="string">'center'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  source_view:&#123;</span><br><span class="line">    flexDirection:<span class="string">'row'</span>,</span><br><span class="line">    height:<span class="number">20</span>,</span><br><span class="line">    marginTop:<span class="number">10</span>,</span><br><span class="line">    justifyContent: <span class="string">'space-between'</span>,</span><br><span class="line">    alignItems: <span class="string">'center'</span>,</span><br><span class="line">    backgroundColor:<span class="string">'#FFF'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  source_text:&#123;</span><br><span class="line">    color:<span class="string">'#b1b1b1'</span>,</span><br><span class="line">    fontSize:<span class="number">14</span>,</span><br><span class="line">    marginLeft:<span class="number">25</span>,</span><br><span class="line">    marginRight:<span class="number">25</span>,</span><br><span class="line">    textAlign:<span class="string">'center'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  content_title_text:&#123;</span><br><span class="line">    color:<span class="string">'#343434'</span>,</span><br><span class="line">    fontSize:<span class="number">20</span>,</span><br><span class="line">    marginTop:<span class="number">8</span>,</span><br><span class="line">    marginLeft:<span class="number">25</span>,</span><br><span class="line">    marginRight:<span class="number">25</span>,</span><br><span class="line">    textAlign:<span class="string">'left'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  content_text:&#123;</span><br><span class="line">    color:<span class="string">'#b2b2b2'</span>,</span><br><span class="line">    fontSize:<span class="number">14</span>,</span><br><span class="line">    lineHeight: <span class="number">22</span>,</span><br><span class="line">    marginTop:<span class="number">12</span>,</span><br><span class="line">    marginLeft:<span class="number">25</span>,</span><br><span class="line">    marginRight:<span class="number">25</span>,</span><br><span class="line">    textAlign:<span class="string">'left'</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">AppRegistry.registerComponent(<span class="string">'TitleStyle'</span>, () =&gt; TitleStyle);</span><br></pre></td></tr></table></figure>
<h4 id="u65B0_u6D6A_uFF1A"><a href="#u65B0_u6D6A_uFF1A" class="headerlink" title="新浪："></a>新浪：</h4><p>header.js<br><figure class="highlight javascript" data-lang=" javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">'use strict'</span>;</span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  AppRegistry,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  PixelRatio,</span><br><span class="line">  Text,</span><br><span class="line">  View,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Header</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=<span class="value">&#123;styles.flexs&#125;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.title&#125;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.wangyi&#125;</span>&gt;</span>网易<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.xinwen&#125;</span>&gt;</span>新闻<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Text</span>&gt;</span>有态度"<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">    )</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">  flexs:&#123;</span><br><span class="line">    marginTop: <span class="number">25</span>,</span><br><span class="line">    height: <span class="number">50</span>,</span><br><span class="line">    borderBottomWidth: <span class="number">3</span>/PixelRatio.get(),</span><br><span class="line">    borderBottomColor: <span class="string">'#EF2D36'</span>,</span><br><span class="line">    alignItems: <span class="string">'center'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  title:&#123;</span><br><span class="line">    fontSize: <span class="number">25</span>,</span><br><span class="line">    fontWeight: <span class="string">'bold'</span>,</span><br><span class="line">    alignItems: <span class="string">'center'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  wangyi:&#123;</span><br><span class="line">    color: <span class="string">'#CD1D1C'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  xinwen:&#123;</span><br><span class="line">    color: <span class="string">'#FFF'</span>,</span><br><span class="line">    backgroundColor: <span class="string">'#CD1D1C'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Header;</span><br></pre></td></tr></table></figure></p>
<p>index.android.js<br><figure class="highlight scala" data-lang=" scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">'use</span> strict';</span><br><span class="line"><span class="keyword">import</span> <span class="type">React</span>, &#123; <span class="type">Component</span> &#125; from <span class="symbol">'reac</span>t';</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="type">AppRegistry</span>,</span><br><span class="line">  <span class="type">StyleSheet</span>,</span><br><span class="line">  <span class="type">Text</span>,</span><br><span class="line">  <span class="type">PixelRatio</span>,</span><br><span class="line">  <span class="type">View</span>,</span><br><span class="line">&#125; from <span class="symbol">'react</span>-native';</span><br><span class="line"></span><br><span class="line"><span class="comment">// const Header = require('./header');</span></span><br><span class="line"><span class="keyword">import</span> <span class="type">Header</span> from './header';</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Component</span> &#123;</span></span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;<span class="type">View</span> style=&#123;styles.listItem&#125;&gt;</span><br><span class="line">        &lt;<span class="type">Text</span> style=&#123;styles.listItemFont&#125;&gt;&#123;<span class="keyword">this</span>.props.title&#125;&lt;/<span class="type">Text</span>&gt;</span><br><span class="line">      &lt;/<span class="type">View</span>&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImportantNews</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Component</span> &#123;</span></span><br><span class="line">  show(title)&#123;</span><br><span class="line">    alert(title);</span><br><span class="line">    console.log(title);</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">var</span> news = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i in <span class="keyword">this</span>.props.news)&#123;</span><br><span class="line">      <span class="keyword">var</span> text=(</span><br><span class="line">        &lt;<span class="type">Text</span></span><br><span class="line">          onPress=&#123;<span class="keyword">this</span>.show.bind(<span class="keyword">this</span>,<span class="keyword">this</span>.props.news[i])&#125;</span><br><span class="line">          numberOfLines=&#123;<span class="number">1</span>&#125;</span><br><span class="line">          style=&#123;styles.newsItem&#125;</span><br><span class="line">          key=&#123;i&#125;</span><br><span class="line">        &gt;&#123;<span class="keyword">this</span>.props.news[i]&#125;&lt;/<span class="type">Text</span>&gt;</span><br><span class="line">      );</span><br><span class="line">      news.push(text);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;<span class="type">View</span> style=&#123;styles.flexs&#125;&gt;</span><br><span class="line">        &lt;<span class="type">Text</span> style=&#123;styles.newsTitle&#125;&gt;今日要闻&lt;/<span class="type">Text</span>&gt;</span><br><span class="line">        &#123;news&#125;</span><br><span class="line">      &lt;/<span class="type">View</span>&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">luumans</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Component</span> &#123;</span></span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;<span class="type">View</span> style=&#123;styles.flexs&#125;&gt;</span><br><span class="line">        &lt;<span class="type">Header</span>&gt;&lt;/<span class="type">Header</span>&gt;</span><br><span class="line">        &lt;<span class="type">List</span> title='这些 <span class="type">Android</span> 技术会很火'&gt;&lt;/<span class="type">List</span>&gt;</span><br><span class="line">        &lt;<span class="type">List</span> title='为什么整个互联网行业都缺前端工程师？'&gt;&lt;/<span class="type">List</span>&gt;</span><br><span class="line">        &lt;<span class="type">List</span> title=<span class="symbol">'Android</span> 开发中的日常积累'&gt;&lt;/<span class="type">List</span>&gt;</span><br><span class="line">        &lt;<span class="type">List</span> title='一个神奇的控件'&gt;&lt;/<span class="type">List</span>&gt;</span><br><span class="line">        &lt;<span class="type">ImportantNews</span></span><br><span class="line">          news=&#123;[</span><br><span class="line">            '找到问题了 注解框架没有获取到控件id :sweat:',</span><br><span class="line">            '我之前也遇到过，可能是一个bug吧，不知道怎么解决',</span><br><span class="line">            '非常喜欢。准备看着你的打一遍，能看懂，但是自己就敲不出来了，谢谢分享',</span><br><span class="line">            '不知道怎么上的首页',</span><br><span class="line">          ]&#125;&gt;</span><br><span class="line">        &lt;/<span class="type">ImportantNews</span>&gt;</span><br><span class="line">      &lt;/<span class="type">View</span>&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const styles = <span class="type">StyleSheet</span>.create(&#123;</span><br><span class="line">  flexs:&#123;</span><br><span class="line">    flex: <span class="number">1</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  listItem:&#123;</span><br><span class="line">    height: <span class="number">40</span>,</span><br><span class="line">    marginLeft: <span class="number">10</span>,</span><br><span class="line">    marginRight: <span class="number">10</span>,</span><br><span class="line">    borderBottomWidth: <span class="number">3</span>/<span class="type">PixelRatio</span>.get(),</span><br><span class="line">    borderBottomColor: '#<span class="type">DDD</span>',</span><br><span class="line">    justifyContent: <span class="symbol">'cente</span>r',</span><br><span class="line">  &#125;,</span><br><span class="line">  listItemFont:&#123;</span><br><span class="line">    fontSize: <span class="number">16</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  newsTitle:&#123;</span><br><span class="line">    fontSize: <span class="number">20</span>,</span><br><span class="line">    fontWeight: <span class="symbol">'bol</span>d',</span><br><span class="line">    color: '#<span class="type">CD1D1C</span>',</span><br><span class="line">    marginLeft: <span class="number">10</span>,</span><br><span class="line">    marginTop: <span class="number">10</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  newsItem:&#123;</span><br><span class="line">    fontSize: <span class="number">15</span>,</span><br><span class="line">    lineHeight: <span class="number">40</span>,</span><br><span class="line">    marginLeft: <span class="number">10</span>,</span><br><span class="line">    marginRight: <span class="number">10</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="type">AppRegistry</span>.registerComponent(<span class="symbol">'luuman</span>s', () =&gt; luumans);</span><br></pre></td></tr></table></figure></p>
<!-- #### StyleSheet样式
##### color color
##### fontFamily ReactPropTypes.string
##### fontSize ReactPropTypes.number
##### fontStyle ReactPropTypes.oneOf(['normal', 'italic'])
##### fontWeight ReactPropTypes.oneOf(
    ['normal' /*default*/, 'bold','100', '200', '300', '400', '500', '600', '700', '800', '900']
)
##### Specifies font weight. The values 'normal' and 'bold' are supported for most fonts. Not all fonts have a variant for each of the numeric values, in that case the ##### closest one is chosen.

##### lineHeight ReactPropTypes.number
##### textAlign ReactPropTypes.oneOf(
    ['auto' /*default*/, 'left', 'right', 'center', 'justify']
)
##### Specifies text alignment. The value 'justify' is only supported on iOS and fallbacks to left on Android.

##### textDecorationLine ReactPropTypes.oneOf(
    ['none' /*default*/, 'underline', 'line-through', 'underline line-through']
)
##### textShadowColor color
##### textShadowOffset ReactPropTypes.shape(
    {width: ReactPropTypes.number, height: ReactPropTypes.number}
)
##### textShadowRadius ReactPropTypes.number
##### androidtextAlignVertical ReactPropTypes.oneOf(
    ['auto' /*default*/, 'top', 'bottom', 'center']
)
##### iosfontVariant ReactPropTypes.arrayOf(
    ReactPropTypes.oneOf([
      'small-caps',
      'oldstyle-nums',
      'lining-nums',
      'tabular-nums',
      'proportional-nums',
    ])
)
##### iosletterSpacing ReactPropTypes.number
##### iostextDecorationColor color
##### iostextDecorationStyle ReactPropTypes.oneOf(
    ['solid' /*default*/, 'double', 'dotted','dashed']
)
##### ioswritingDirection ReactPropTypes.oneOf(
    ['auto' /*default*/, 'ltr', 'rtl']
) -->
]]></content>
    <summary type="html">
    <![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br>]]>
    
    </summary>
    
      <category term="ReactNative" scheme="http://luuman.github.io/tags/ReactNative/"/>
    
      <category term="FrontFrame" scheme="http://luuman.github.io/categories/FrontFrame/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React Native Image]]></title>
    <link href="http://luuman.github.io/2016/12/27/FrontFrame/ReactNative/Components/RNCImage/"/>
    <id>http://luuman.github.io/2016/12/27/FrontFrame/ReactNative/Components/RNCImage/</id>
    <published>2016-12-27T10:29:00.000Z</published>
    <updated>2016-11-16T01:17:12.000Z</updated>
    <content type="html"><![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br><a id="more"></a><br>看看官网的案例，提供两种来源的图片：本地、服务器。<!-- 当然它也支持在android中显 示GIF 和 WebP 图片，方式如下： --></p>
<figure class="highlight crystal" data-lang=" crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import <span class="constant">React</span>, &#123; <span class="constant">Component</span> &#125; from <span class="string">'react'</span>;</span><br><span class="line">import &#123; <span class="constant">AppRegistry</span>, <span class="constant">View</span>, <span class="constant">Image</span> &#125; from <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DisplayAnImage</span> <span class="title">extends</span> <span class="title">Component</span> &#123;</span></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;<span class="constant">View</span>&gt;</span><br><span class="line">        &lt;<span class="constant">Image</span></span><br><span class="line">          source=&#123;<span class="keyword">require</span>(<span class="string">'./img/favicon.png'</span>)&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;<span class="constant">Image</span></span><br><span class="line">          style=<span class="expansion">&#123;&#123;<span class="symbol">width:</span> <span class="number">50</span>, <span class="symbol">height:</span> <span class="number">50</span>&#125;&#125;</span></span><br><span class="line">          source=<span class="expansion">&#123;&#123;<span class="symbol">uri:</span> <span class="string">'https://facebook.github.io/react/img/logo_og.png'</span>&#125;&#125;</span></span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;<span class="regexp">/View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/</span><span class="regexp">/ App registration and rendering</span><br><span class="line">AppRegistry.registerComponent('DisplayAnImage', () =&gt; DisplayAnImage);</span></span><br></pre></td></tr></table></figure>
<h3 id="u56FE_u7247_u6837_u5F0F"><a href="#u56FE_u7247_u6837_u5F0F" class="headerlink" title="图片样式"></a>图片样式</h3><p>关于图片样式的设计，介于前端开发我们会考虑适配问题，通过flex-rem来进行适配。但是做了demo发现以下特点：</p>
<ol>
<li>Image组件必须设置图片高度，否则不会显示。本地图片可以不设置尺寸，会按照图片的大小显示，服务器上的图片必须设置图片高度。</li>
<li>通过在两台Android手机测试发现，宽度可以不设置。高度不够，图片不会压扁，系统将截取中间部分，多余的图片将不会显示。（但是，官网提供的demo却不尽人意，原理是什么）</li>
<li>想要通过PixelRatio来控制显示的大小，但是同样的屏幕设备设备像素相同，但是分辨率却不同1.5/3</li>
<li>React Native 布局样式的单位是不是 pt、px，而是 dp。</li>
</ol>
<figure class="highlight handlebars" data-lang=" handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">'use strict';</span><br><span class="line">import React, &#123; Component &#125; from 'react';</span><br><span class="line">import &#123;</span><br><span class="line">  AppRegistry,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  Text,</span><br><span class="line">  PixelRatio,</span><br><span class="line">  Image,</span><br><span class="line">  ScrollView,</span><br><span class="line">  View,</span><br><span class="line">&#125; from 'react-native';</span><br><span class="line"></span><br><span class="line">class StyleImg extends Component &#123;</span><br><span class="line">  render()&#123;</span><br><span class="line">    var url = (&#123;</span><br><span class="line">      uri: 'http://7u2psp.com2.z0.glb.qiniucdn.com/576d0f99f1f58390384.jpg?imageView2/1/w/'+ 1000 * PixelRatio.get() +'/h/' + 1000 * PixelRatio.get() +'/q/100'</span><br><span class="line">    &#125;);</span><br><span class="line">    var image = (&#123;</span><br><span class="line">      uri: 'http://7u2psp.com2.z0.glb.qiniucdn.com/576d0f99f1f58390384.jpg?imageView2/1/w/'+ 1000 * PixelRatio.get() +'/h/' + 1000 * PixelRatio.get() +'/q/100'</span><br><span class="line">    &#125;);</span><br><span class="line">    return (</span><br><span class="line">      <span class="tag">&lt;<span class="title">ScrollView</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span> = &#123;<span class="attribute">styles.pad</span>&#125;&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span> = &#123;<span class="attribute">styles.pad</span>&#125;&gt;</span>图片裁剪是否压扁(同一片源)<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Image</span> <span class="attribute">source</span>=<span class="value">&#123;url&#125;</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;<span class="variable">width</span>: 180,<span class="variable">height</span>: 240&#125;&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Image</span> <span class="attribute">source</span>=<span class="value">&#123;url&#125;</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;<span class="variable">width</span>: 180,<span class="variable">height</span>: 180&#125;&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span> = &#123;<span class="attribute">styles.pad</span>&#125;&gt;</span>设备适配<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Text</span>&gt;</span>PixelRatio：&#123;PixelRatio.get()&#125;<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span> = &#123;<span class="attribute">styles.pad</span>&#125;&gt;</span>高度&#123;300 * PixelRatio.get()&#125;<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Text</span>&gt;</span>想用服务器的截图功能，但是好像rn实现了这样的功能。<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Image</span> <span class="attribute">source</span>=<span class="value">&#123;image&#125;</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;<span class="variable">height</span>: 300 * <span class="variable">PixelRatio.get</span>()&#125;&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span> = &#123;<span class="attribute">styles.pad</span>&#125;&gt;</span>PixelRatio 设备适配<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Text</span>&gt;</span>width: 160 * &#123;PixelRatio.get()&#125; , height: 213 * &#123;PixelRatio.get()&#125;<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Image</span> <span class="attribute">source</span>=<span class="value">&#123;url&#125;</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;<span class="variable">width</span>: 160 * <span class="variable">PixelRatio.get</span>(),<span class="variable">height</span>: 213 * <span class="variable">PixelRatio.get</span>()&#125;&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">ScrollView</span>&gt;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const styles = StyleSheet.create(&#123;</span><br><span class="line">  pad:&#123;</span><br><span class="line">    padding: 10,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">AppRegistry.registerComponent('StyleImg', () =&gt; StyleImg);</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br>]]>
    
    </summary>
    
      <category term="ReactNative" scheme="http://luuman.github.io/tags/ReactNative/"/>
    
      <category term="FrontFrame" scheme="http://luuman.github.io/categories/FrontFrame/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React Native TextInput]]></title>
    <link href="http://luuman.github.io/2016/12/27/FrontFrame/ReactNative/Components/RNCTextInput/"/>
    <id>http://luuman.github.io/2016/12/27/FrontFrame/ReactNative/Components/RNCTextInput/</id>
    <published>2016-12-27T10:29:00.000Z</published>
    <updated>2016-11-16T01:17:12.000Z</updated>
    <content type="html"><![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br><a id="more"></a><br>TextInput 是一个允许用户输入文本的基础组件。</p>
<figure class="highlight crystal" data-lang=" crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import <span class="constant">React</span>, &#123; <span class="constant">Component</span> &#125; from <span class="string">'react'</span>;</span><br><span class="line">import &#123; <span class="constant">AppRegistry</span>, <span class="constant">Text</span>, <span class="constant">TextInput</span>, <span class="constant">View</span> &#125; from <span class="string">'react-native'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PizzaTranslator</span> <span class="title">extends</span> <span class="title">Component</span> &#123;</span></span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">	<span class="keyword">super</span>(props);</span><br><span class="line">	this.state = &#123;<span class="symbol">text:</span> <span class="string">''</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">	  &lt;<span class="constant">View</span> style=<span class="expansion">&#123;&#123;<span class="symbol">padding:</span> <span class="number">10</span>&#125;&#125;</span>&gt;</span><br><span class="line">		&lt;<span class="constant">TextInput</span></span><br><span class="line">		  style=<span class="expansion">&#123;&#123;<span class="symbol">height:</span> <span class="number">40</span>&#125;&#125;</span></span><br><span class="line">		  placeholder=<span class="string">"Type here to translate!"</span></span><br><span class="line">		  onChangeText=&#123;(text) =&gt; this.setState(&#123;text&#125;)&#125;</span><br><span class="line">		/&gt;</span><br><span class="line">		&lt;<span class="constant">Text</span> style=<span class="expansion">&#123;&#123;<span class="symbol">padding:</span> <span class="number">10</span>, <span class="symbol">fontSize:</span> <span class="number">42</span>&#125;&#125;</span>&gt;</span><br><span class="line">		  &#123;this.state.text.split(<span class="string">' '</span>).map((word) =&gt; word &amp;&amp; <span class="string">'🍕'</span>).join(<span class="string">' '</span>)&#125;</span><br><span class="line">		&lt;<span class="regexp">/Text&gt;</span><br><span class="line">	  &lt;/</span><span class="constant">View</span>&gt;</span><br><span class="line">	);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="constant">AppRegistry</span>.registerComponent(<span class="string">'PizzaTranslator'</span>, () =&gt; <span class="constant">PizzaTranslator</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight handlebars" data-lang=" handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">import React, &#123; Component &#125; from 'react';</span><br><span class="line">import &#123;</span><br><span class="line">  AppRegistry,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  Text,</span><br><span class="line">  View,</span><br><span class="line">  TextInput</span><br><span class="line">&#125; from 'react-native';</span><br><span class="line">class TextInputDemo extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">	return (</span><br><span class="line">	  <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=<span class="value">&#123;styles.container&#125;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=<span class="value">&#123;styles.top_half_view&#125;</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=<span class="value">&#123;styles.title_view&#125;</span>&gt;</span></span><br><span class="line">			 <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.title_text&#125;</span>&gt;</span></span><br><span class="line">			   邮箱登录</span><br><span class="line">			<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">		 </span><br><span class="line">		  <span class="tag">&lt;<span class="title">TextInput</span> </span><br><span class="line">			  <span class="attribute">style</span>=<span class="value">&#123;styles.textinput&#125;</span></span><br><span class="line">			  <span class="attribute">placeholder</span>=<span class="value">'邮箱'</span></span><br><span class="line">			  <span class="attribute">numberOfLines</span>=<span class="value">&#123;1&#125;</span></span><br><span class="line">			  <span class="attribute">autoFocus</span>=<span class="value">&#123;true&#125;</span></span><br><span class="line">			  <span class="attribute">underlineColorAndroid</span>=<span class="value">&#123;'#e1e1e1'&#125;</span></span><br><span class="line">		  /&gt;</span></span><br><span class="line">		   <span class="tag">&lt;<span class="title">TextInput</span> </span><br><span class="line">			  <span class="attribute">style</span>=<span class="value">&#123;styles.textinput&#125;</span></span><br><span class="line">			  <span class="attribute">placeholder</span>=<span class="value">'密码'</span></span><br><span class="line">			  <span class="attribute">numberOfLines</span>=<span class="value">&#123;1&#125;</span></span><br><span class="line">			  <span class="attribute">secureTextEntry</span>=<span class="value">&#123;true&#125;</span></span><br><span class="line">			  <span class="attribute">underlineColorAndroid</span>=<span class="value">&#123;'#e1e1e1'&#125;</span></span><br><span class="line">		  /&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;<span class="variable">backgroundColor</span>:'<span class="begin-block">#ffffff</span>',<span class="variable">flexDirection</span>:'<span class="variable">row</span>',<span class="variable">alignItems</span>:'<span class="variable">center</span>',<span class="variable">justifyContent</span>:'<span class="variable">center</span>'&#125;&#125;</span><span class="xml"><span class="tag">&gt;</span></span><br><span class="line">			 <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=<span class="value">&#123;styles.style_view_register&#125;</span>&gt;</span></span><br><span class="line">			  <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;<span class="variable">color</span>:'#5<span class="variable">ac</span>4<span class="variable">ef</span>'&#125;&#125;</span><span class="xml"><span class="tag">&gt;</span></span><br><span class="line">				注册</span><br><span class="line">			  <span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">			 <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">			 </span><br><span class="line">			 <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=<span class="value">&#123;styles.style_view_login&#125;</span>&gt;</span></span><br><span class="line">			  <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;<span class="variable">color</span>:'<span class="variable">white</span>'&#125;&#125;</span><span class="xml"><span class="tag">&gt;</span></span><br><span class="line">				登录</span><br><span class="line">			  <span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">			 <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.bottom_text&#125;</span>&gt;</span></span><br><span class="line">			忘了密码?点此找回</span><br><span class="line">		  <span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=<span class="value">&#123;styles.bottom_half_view&#125;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">	);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">const styles = StyleSheet.create(&#123;</span><br><span class="line">  container: &#123;</span><br><span class="line">	flex: 1,</span><br><span class="line">	backgroundColor: 'white',</span><br><span class="line">  &#125;,</span><br><span class="line">  title_view:&#123;</span><br><span class="line">	flexDirection:'row',</span><br><span class="line">	height:50,</span><br><span class="line">	alignItems: 'center',</span><br><span class="line">	backgroundColor:'#27b5ee',</span><br><span class="line">  &#125;,</span><br><span class="line">  title_text:&#123;</span><br><span class="line">	color:'white',</span><br><span class="line">	fontSize:22,</span><br><span class="line">	marginLeft:20,</span><br><span class="line">	textAlign:'center'</span><br><span class="line">  &#125;,</span><br><span class="line">  top_half_view:&#123;</span><br><span class="line">	flex: 1.3,</span><br><span class="line">	backgroundColor: 'white',</span><br><span class="line">  &#125;,</span><br><span class="line">  bottom_half_view:&#123;</span><br><span class="line">	flex: 1,</span><br><span class="line">	backgroundColor: '#eeeeee',</span><br><span class="line">  &#125;,</span><br><span class="line">  textinput: &#123;</span><br><span class="line">	backgroundColor:'#fff',</span><br><span class="line">	marginTop:5,</span><br><span class="line">	marginLeft:20,</span><br><span class="line">	marginRight:20,</span><br><span class="line">	textAlign:'left',</span><br><span class="line">  &#125;,</span><br><span class="line">  style_view_login:&#123;  </span><br><span class="line">	  flex:1,</span><br><span class="line">	  marginTop:20,</span><br><span class="line">	  marginLeft:20,</span><br><span class="line">	  marginRight:20,</span><br><span class="line">	  backgroundColor:'#27b5ee',</span><br><span class="line">	  height:35,</span><br><span class="line">	  borderRadius:5,</span><br><span class="line">	  justifyContent: 'center',</span><br><span class="line">	  alignItems: 'center',</span><br><span class="line">  &#125;,</span><br><span class="line">  style_view_register:&#123;  </span><br><span class="line">	  flex:1,</span><br><span class="line">	  marginTop:20,</span><br><span class="line">	  marginLeft:20,</span><br><span class="line">	  marginRight:20,</span><br><span class="line">	  borderColor:'#5ac4ef',</span><br><span class="line">	  borderWidth: 1,</span><br><span class="line">	  height:35,</span><br><span class="line">	  borderRadius:5,</span><br><span class="line">	  justifyContent: 'center',</span><br><span class="line">	  alignItems: 'center',</span><br><span class="line">  &#125;,</span><br><span class="line">  bottom_text:&#123;</span><br><span class="line">	color:'#27b5ee',</span><br><span class="line">	fontSize:14,</span><br><span class="line">	marginTop:10,</span><br><span class="line">	marginLeft:20,</span><br><span class="line">	textAlign:'left',</span><br><span class="line">	fontWeight:'bold'</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">AppRegistry.registerComponent('TextInputDemo', () =&gt; TextInputDemo);</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br>]]>
    
    </summary>
    
      <category term="ReactNative" scheme="http://luuman.github.io/tags/ReactNative/"/>
    
      <category term="FrontFrame" scheme="http://luuman.github.io/categories/FrontFrame/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React Native 组件]]></title>
    <link href="http://luuman.github.io/2016/12/27/FrontFrame/ReactNative/Components/RNComponents/"/>
    <id>http://luuman.github.io/2016/12/27/FrontFrame/ReactNative/Components/RNComponents/</id>
    <published>2016-12-27T10:29:00.000Z</published>
    <updated>2016-11-16T01:17:12.000Z</updated>
    <content type="html"><![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br><a id="more"></a></p>
<p>我们要想理解React Native应用的基本结构，我们首先需要先了解一些基本的React的概念，比如JSX语法、组件、state状态以及props属性。所以这篇我们重点讲讲Props，state和style样式。今天讲解的内容，都是根据React Native官方文档上的内容来的。</p>
<h3 id="u7EC4_u4EF6_u5316_u5F00_u53D1_uFF1A"><a href="#u7EC4_u4EF6_u5316_u5F00_u53D1_uFF1A" class="headerlink" title="组件化开发："></a>组件化开发：</h3><p>组件的颗粒度设计主要取决于应用的结构设计。将公共部分拆分复用，提供公共组件。</p>
<p>导出组件Header：<br><figure class="highlight openscad" data-lang=" openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">module</span>.<span class="title">exports</span> =</span> Header;</span><br></pre></td></tr></table></figure></p>
<p>引入组件Header：<br><figure class="highlight scala" data-lang=" scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const <span class="type">Header</span> = require('./header');</span><br><span class="line"><span class="keyword">import</span> <span class="type">Header</span> from './header';</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">luumans</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Component</span> &#123;</span></span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;<span class="type">Header</span>&gt;&lt;/<span class="type">Header</span>&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><p>AppRegistry模式是React Native中最基本的模块，也是最常用的模块。</p>
<figure class="highlight xml" data-lang=" xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">'use strict';</span><br><span class="line">import React, &#123; Component &#125; from 'react';</span><br><span class="line">import &#123;</span><br><span class="line">  AppRegistry,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  Text,</span><br><span class="line">  PixelRatio,</span><br><span class="line">  View,</span><br><span class="line">&#125; from 'react-native';</span><br><span class="line"></span><br><span class="line">class luumans extends Component &#123;</span><br><span class="line">  render()&#123;</span><br><span class="line">    return (</span><br><span class="line">      <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=<span class="value">&#123;styles.flexs&#125;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=<span class="value">&#123;styles.container&#125;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span> = &#123;[<span class="attribute">styles.item</span>,<span class="attribute">styles.center</span>]&#125;&gt;</span><span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.title&#125;</span>&gt;</span>酒店<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span> = &#123;[<span class="attribute">styles.item</span>,<span class="attribute">styles.lineLeftRight</span>]&#125;&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=<span class="value">&#123;[styles.flexs,styles.center,styles.lineCenter]&#125;</span>&gt;</span><span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.title&#125;</span>&gt;</span>海外酒店<span class="tag">&lt;/<span class="title">Text</span>&gt;</span><span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=<span class="value">&#123;[styles.flexs,styles.center]&#125;</span>&gt;</span><span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.title&#125;</span>&gt;</span>特色酒店<span class="tag">&lt;/<span class="title">Text</span>&gt;</span><span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span> = &#123;<span class="attribute">styles.item</span>&#125;&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=<span class="value">&#123;[styles.flexs,styles.center,styles.lineCenter]&#125;</span>&gt;</span><span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.title&#125;</span>&gt;</span>团购<span class="tag">&lt;/<span class="title">Text</span>&gt;</span><span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=<span class="value">&#123;[styles.flexs,styles.center]&#125;</span>&gt;</span><span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.title&#125;</span>&gt;</span>客栈、公寓<span class="tag">&lt;/<span class="title">Text</span>&gt;</span><span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const styles = StyleSheet.create(&#123;</span><br><span class="line">  container:&#123;</span><br><span class="line">    flexDirection: 'row',</span><br><span class="line">    height: 80,</span><br><span class="line">    borderRadius: 5,</span><br><span class="line">    marginTop: 200,</span><br><span class="line">    marginLeft: 5,</span><br><span class="line">    marginRight: 5,</span><br><span class="line">    backgroundColor: '#FF0067',</span><br><span class="line">  &#125;,</span><br><span class="line">  item:&#123;</span><br><span class="line">    flex: 1,</span><br><span class="line">    height: 80,</span><br><span class="line">  &#125;,</span><br><span class="line">  title:&#123;</span><br><span class="line">    fontSize: 16,</span><br><span class="line">    fontWeight: 'bold',</span><br><span class="line">    color: '#FFF',</span><br><span class="line">  &#125;,</span><br><span class="line">  center:&#123;</span><br><span class="line">    justifyContent: 'center',</span><br><span class="line">    alignItems: 'center',</span><br><span class="line">  &#125;,</span><br><span class="line">  flexs:&#123;</span><br><span class="line">    flex: 1,</span><br><span class="line">  &#125;,</span><br><span class="line">  lineCenter: &#123;</span><br><span class="line">    borderBottomWidth: 1/PixelRatio.get(),</span><br><span class="line">    borderColor: '#FFF',</span><br><span class="line">  &#125;,</span><br><span class="line">  lineLeftRight: &#123;</span><br><span class="line">    borderLeftWidth: 1/PixelRatio.get(),</span><br><span class="line">    borderRightWidth: 1/PixelRatio.get(),</span><br><span class="line">    borderColor: '#FFF',</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">AppRegistry.registerComponent('luumans', () =&gt; luumans);</span><br></pre></td></tr></table></figure>
<h3 id="Navigator"><a href="#Navigator" class="headerlink" title="Navigator"></a>Navigator</h3><h4 id="u5C5E_u6027"><a href="#u5C5E_u6027" class="headerlink" title="属性"></a>属性</h4><h5 id="configureScene"><a href="#configureScene" class="headerlink" title="configureScene"></a>configureScene</h5><p>可选的函数，用来配置场景动画和手势。会带有两个参数调用，一个是当前的路由，一个是当前的路由栈。然后它应当返回一个场景配置对象<br><figure class="highlight stylus" data-lang=" stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(route, routeStack) =&gt; Navigator<span class="class">.SceneConfigs</span><span class="class">.FloatFromRight</span></span><br></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th>环境依赖：</th>
</tr>
</thead>
<tbody>
<tr>
<td>PushFromRight (默认)</td>
</tr>
<tr>
<td>FloatFromRight</td>
</tr>
<tr>
<td>FloatFromLeft</td>
</tr>
<tr>
<td>FloatFromBottom</td>
</tr>
<tr>
<td>FloatFromBottomAndroid</td>
</tr>
<tr>
<td>FadeAndroid</td>
</tr>
<tr>
<td>HorizontalSwipeJump</td>
</tr>
<tr>
<td>HorizontalSwipeJumpFromRight</td>
</tr>
<tr>
<td>VerticalUpSwipeJump</td>
</tr>
<tr>
<td>VerticalDownSwipeJump</td>
</tr>
</tbody>
</table>
<figure class="highlight scala" data-lang=" scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">'use</span> strict';</span><br><span class="line"><span class="keyword">import</span> <span class="type">React</span>, &#123; <span class="type">Component</span> &#125; from <span class="symbol">'reac</span>t';</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="type">AppRegistry</span>,</span><br><span class="line">  <span class="type">StyleSheet</span>,</span><br><span class="line">  <span class="type">Text</span>,</span><br><span class="line">  <span class="type">PixelRatio</span>,</span><br><span class="line">  <span class="type">Navigator</span>,</span><br><span class="line">  <span class="type">Image</span>,</span><br><span class="line">  <span class="type">View</span>,</span><br><span class="line">  <span class="type">ScrollView</span>,</span><br><span class="line">&#125; from <span class="symbol">'react</span>-native';</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="type">Xinlang</span> from './app/page/xinlang';</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Component</span> &#123;</span></span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  _pressButton()&#123;</span><br><span class="line">    const &#123;navigator&#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="comment">//为什么这里可以取得 props.navigator?请看上文:</span></span><br><span class="line">    <span class="comment">//&lt;Component &#123;...route.params&#125; navigator=&#123;navigator&#125; /&gt;</span></span><br><span class="line">    <span class="comment">//这里传递了navigator作为props</span></span><br><span class="line">    <span class="keyword">if</span>(navigator)&#123;</span><br><span class="line">      navigator.push(&#123;</span><br><span class="line">        name: <span class="symbol">'Xinlan</span>g',</span><br><span class="line">        component: <span class="type">Xinlang</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;<span class="type">ScrollView</span> style=&#123;styles.flex&#125;&gt;</span><br><span class="line">        &lt;<span class="type">Text</span> style=&#123;styles.listItem&#125; onPress=&#123;<span class="keyword">this</span>._pressButton.bind(<span class="keyword">this</span>)&#125;&gt;这些<span class="type">Android</span>技术会很火&lt;/<span class="type">Text</span>&gt;</span><br><span class="line">        &lt;<span class="type">Text</span> style=&#123;styles.listItem&#125; onPress=&#123;<span class="keyword">this</span>._pressButton.bind(<span class="keyword">this</span>)&#125;&gt;为什么整个互联网行业都缺前端工程师？&lt;/<span class="type">Text</span>&gt;</span><br><span class="line">        &lt;<span class="type">Text</span> style=&#123;styles.listItem&#125; onPress=&#123;<span class="keyword">this</span>._pressButton.bind(<span class="keyword">this</span>)&#125;&gt;一个神奇的控件&lt;/<span class="type">Text</span>&gt;</span><br><span class="line">      &lt;/<span class="type">ScrollView</span>&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Detail</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Component</span> &#123;</span></span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  _pressButton()&#123;</span><br><span class="line">    const &#123;navigator&#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">if</span>(navigator)&#123;</span><br><span class="line">      <span class="comment">//很熟悉吧，入栈出栈~ 把当前的页面pop掉，这里就返回到了上一个页面:List了</span></span><br><span class="line">      navigator.pop();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;<span class="type">ScrollView</span> style=&#123;styles.flex&#125;&gt;</span><br><span class="line">        &lt;<span class="type">Text</span> style=&#123;styles.listItem&#125; onPress=&#123;<span class="keyword">this</span>._pressButton.bind(<span class="keyword">this</span>)&#125;&gt;name&lt;/<span class="type">Text</span>&gt;</span><br><span class="line">      &lt;/<span class="type">ScrollView</span>&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">luumans</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Component</span> &#123;</span></span><br><span class="line">  render()&#123;</span><br><span class="line">    let defaultName = <span class="symbol">'Lis</span>t';</span><br><span class="line">    let defaultComponent = <span class="type">List</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;<span class="type">Navigator</span></span><br><span class="line">        initialRoute = &#123;&#123;name: defaultName, component: defaultComponent&#125;&#125;</span><br><span class="line">        <span class="comment">//配置场景</span></span><br><span class="line">        configureScene = &#123;</span><br><span class="line">          (route) =&gt; &#123;</span><br><span class="line">            <span class="comment">//这个是页面之间跳转时候的动画，具体有哪些？可以看这个目录下，有源代码的: node_modules/react-native/Libraries/CustomComponents/Navigator/NavigatorSceneConfigs.js</span></span><br><span class="line">            <span class="keyword">return</span> <span class="type">Navigator</span>.<span class="type">SceneConfigs</span>.<span class="type">PushFromRight</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        renderScene = &#123;</span><br><span class="line">          (route,navigator) =&gt; &#123;</span><br><span class="line">            let <span class="type">Component</span> = route.component;</span><br><span class="line">            <span class="keyword">return</span> &lt;<span class="type">Component</span> &#123;...route.params&#125; navigator = &#123;navigator&#125; /&gt;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const styles = <span class="type">StyleSheet</span>.create(&#123;</span><br><span class="line">  flexs:&#123;</span><br><span class="line">    flex: <span class="number">1</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  listItem:&#123;</span><br><span class="line">    height: <span class="number">40</span>,</span><br><span class="line">    marginLeft: <span class="number">10</span>,</span><br><span class="line">    marginRight: <span class="number">10</span>,</span><br><span class="line">    borderBottomWidth: <span class="number">3</span>/<span class="type">PixelRatio</span>.get(),</span><br><span class="line">    borderBottomColor: '#<span class="type">DDD</span>',</span><br><span class="line">    justifyContent: <span class="symbol">'cente</span>r',</span><br><span class="line">    lineHeight: <span class="number">30</span>,</span><br><span class="line">    fontSize: <span class="number">16</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="type">AppRegistry</span>.registerComponent(<span class="symbol">'luuman</span>s', () =&gt; luumans);</span><br></pre></td></tr></table></figure>
<h3 id="NavigatorIOS"><a href="#NavigatorIOS" class="headerlink" title="NavigatorIOS"></a>NavigatorIOS</h3><h3 id="TextInput"><a href="#TextInput" class="headerlink" title="TextInput"></a>TextInput</h3><h4 id="u5C5E_u6027-1"><a href="#u5C5E_u6027-1" class="headerlink" title="属性"></a>属性</h4><h5 id="placeholder"><a href="#placeholder" class="headerlink" title="placeholder"></a>placeholder</h5><figure class="highlight ini" data-lang=" ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">placeholder=<span class="value"><span class="string">"Red placeholder text color"</span></span></span></span><br></pre></td></tr></table></figure>
<h5 id="placeholderTextColor"><a href="#placeholderTextColor" class="headerlink" title="placeholderTextColor"></a>placeholderTextColor</h5><figure class="highlight ini" data-lang=" ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">placeholderTextColor=<span class="value"><span class="string">"red"</span></span></span></span><br></pre></td></tr></table></figure>
<h5 id="defaultValue"><a href="#defaultValue" class="headerlink" title="defaultValue"></a>defaultValue</h5><figure class="highlight ini" data-lang=" ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">defaultValue=<span class="value"><span class="string">"Same BackgroundColor as View "</span></span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight autohotkey" data-lang=" autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="escape">``</span><span class="escape">`</span><br><span class="line"></span>#####</span><br></pre></td></tr></table></figure>
<figure class="highlight vala" data-lang=" vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="preprocessor">#####</span></span><br></pre></td></tr></table></figure>
<figure class="highlight http" data-lang=" http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="vala"><span class="preprocessor">#####</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight http" data-lang=" http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="vala"><span class="preprocessor">#####</span></span></span><br></pre></td></tr></table></figure>
<p>```</p>
<p><a href="&quot;&quot;"></a></p>
<h3 id="ActivityIndicator"><a href="#ActivityIndicator" class="headerlink" title="ActivityIndicator"></a>ActivityIndicator</h3><h3 id="ActivityIndicatorIOS"><a href="#ActivityIndicatorIOS" class="headerlink" title="ActivityIndicatorIOS"></a>ActivityIndicatorIOS</h3><h3 id="DatePickerIOS"><a href="#DatePickerIOS" class="headerlink" title="DatePickerIOS"></a>DatePickerIOS</h3><h3 id="DrawerLayoutAndroid"><a href="#DrawerLayoutAndroid" class="headerlink" title="DrawerLayoutAndroid"></a>DrawerLayoutAndroid</h3><h3 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h3><h3 id="KeyboardAvoidingView"><a href="#KeyboardAvoidingView" class="headerlink" title="KeyboardAvoidingView"></a>KeyboardAvoidingView</h3><h3 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h3><h3 id="MapView"><a href="#MapView" class="headerlink" title="MapView"></a>MapView</h3><h3 id="Modal"><a href="#Modal" class="headerlink" title="Modal"></a>Modal</h3><h3 id="Navigator-1"><a href="#Navigator-1" class="headerlink" title="Navigator"></a>Navigator</h3><h3 id="NavigatorIOS-1"><a href="#NavigatorIOS-1" class="headerlink" title="NavigatorIOS"></a>NavigatorIOS</h3><h3 id="Picker"><a href="#Picker" class="headerlink" title="Picker"></a>Picker</h3><h3 id="PickerIOS"><a href="#PickerIOS" class="headerlink" title="PickerIOS"></a>PickerIOS</h3><h3 id="ProgressBarAndroid"><a href="#ProgressBarAndroid" class="headerlink" title="ProgressBarAndroid"></a>ProgressBarAndroid</h3><h3 id="ProgressViewIOS"><a href="#ProgressViewIOS" class="headerlink" title="ProgressViewIOS"></a>ProgressViewIOS</h3><h3 id="RefreshControl"><a href="#RefreshControl" class="headerlink" title="RefreshControl"></a>RefreshControl</h3><h3 id="ScrollView"><a href="#ScrollView" class="headerlink" title="ScrollView"></a>ScrollView</h3><h3 id="SegmentedControlIOS"><a href="#SegmentedControlIOS" class="headerlink" title="SegmentedControlIOS"></a>SegmentedControlIOS</h3><h3 id="Slider"><a href="#Slider" class="headerlink" title="Slider"></a>Slider</h3><h3 id="SliderIOS"><a href="#SliderIOS" class="headerlink" title="SliderIOS"></a>SliderIOS</h3><h3 id="StatusBar"><a href="#StatusBar" class="headerlink" title="StatusBar"></a>StatusBar</h3><h3 id="SnapshotViewIOS"><a href="#SnapshotViewIOS" class="headerlink" title="SnapshotViewIOS"></a>SnapshotViewIOS</h3><h3 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h3><h3 id="SwitchAndroid"><a href="#SwitchAndroid" class="headerlink" title="SwitchAndroid"></a>SwitchAndroid</h3><h3 id="SwitchIOS"><a href="#SwitchIOS" class="headerlink" title="SwitchIOS"></a>SwitchIOS</h3><h3 id="TabBarIOS"><a href="#TabBarIOS" class="headerlink" title="TabBarIOS"></a>TabBarIOS</h3><h3 id="TabBarIOS-Item"><a href="#TabBarIOS-Item" class="headerlink" title="TabBarIOS.Item"></a>TabBarIOS.Item</h3><h3 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h3><h3 id="TextInput-1"><a href="#TextInput-1" class="headerlink" title="TextInput"></a>TextInput</h3><h3 id="ToolbarAndroid"><a href="#ToolbarAndroid" class="headerlink" title="ToolbarAndroid"></a>ToolbarAndroid</h3><h3 id="TouchableHighlight"><a href="#TouchableHighlight" class="headerlink" title="TouchableHighlight"></a>TouchableHighlight</h3><h3 id="TouchableNativeFeedback"><a href="#TouchableNativeFeedback" class="headerlink" title="TouchableNativeFeedback"></a>TouchableNativeFeedback</h3><h3 id="TouchableOpacity"><a href="#TouchableOpacity" class="headerlink" title="TouchableOpacity"></a>TouchableOpacity</h3><h3 id="TouchableWithoutFeedback"><a href="#TouchableWithoutFeedback" class="headerlink" title="TouchableWithoutFeedback"></a>TouchableWithoutFeedback</h3><h3 id="View-1"><a href="#View-1" class="headerlink" title="View"></a>View</h3><h3 id="ViewPagerAndroid"><a href="#ViewPagerAndroid" class="headerlink" title="ViewPagerAndroid"></a>ViewPagerAndroid</h3><h3 id="WebView"><a href="#WebView" class="headerlink" title="WebView"></a>WebView</h3>]]></content>
    <summary type="html">
    <![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br>]]>
    
    </summary>
    
      <category term="ReactNative" scheme="http://luuman.github.io/tags/ReactNative/"/>
    
      <category term="FrontFrame" scheme="http://luuman.github.io/categories/FrontFrame/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React Native 实战封装组件]]></title>
    <link href="http://luuman.github.io/2016/12/26/FrontFrame/ReactNative/RNTest/"/>
    <id>http://luuman.github.io/2016/12/26/FrontFrame/ReactNative/RNTest/</id>
    <published>2016-12-26T10:29:00.000Z</published>
    <updated>2016-11-16T01:17:12.000Z</updated>
    <content type="html"><![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br><a id="more"></a></p>
<h2 id="JSX_u5B9E_u6218"><a href="#JSX_u5B9E_u6218" class="headerlink" title="JSX实战"></a>JSX实战</h2><p>Reactnative中没有DOM的概念，只有组件的概念，所以我们HTML标签、DOM操作是无效的。但是组件的生命周期、JSX语法、事件绑定、自定义属性等，ReactNative与React.js是一样的。</p>
<h3 id="u5C01_u88C5Box_u7EC4_u4EF6"><a href="#u5C01_u88C5Box_u7EC4_u4EF6" class="headerlink" title="封装Box组件"></a>封装Box组件</h3><figure class="highlight scala" data-lang=" scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">'use</span> strict';</span><br><span class="line"><span class="keyword">import</span> <span class="type">React</span>, &#123; <span class="type">Component</span> &#125; from <span class="symbol">'reac</span>t';</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="type">AppRegistry</span>,</span><br><span class="line">  <span class="type">StyleSheet</span>,</span><br><span class="line">  <span class="type">Text</span>,</span><br><span class="line">  <span class="type">View</span></span><br><span class="line">&#125; from <span class="symbol">'react</span>-native';</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Component</span>&#123;</span></span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;<span class="type">View</span> style=&#123;[<span class="type">BoxStyles</span>.box,<span class="type">BoxStyles</span>[<span class="keyword">this</span>.props.width],<span class="type">BoxStyles</span>[<span class="keyword">this</span>.props.height]]&#125;&gt;</span><br><span class="line">          &lt;<span class="type">View</span>  style=&#123;[<span class="type">BoxStyles</span>.top,<span class="type">BoxStyles</span>.height50,<span class="type">BoxStyles</span>[<span class="keyword">this</span>.props.classBg]]&#125;&gt;&lt;<span class="type">Text</span>&gt;top&lt;/<span class="type">Text</span>&gt;&lt;/<span class="type">View</span>&gt;</span><br><span class="line">          &lt;<span class="type">View</span> style=&#123;[<span class="type">BoxStyles</span>[<span class="keyword">this</span>.props.childName]]&#125;&gt;</span><br><span class="line">            &lt;<span class="type">View</span> style=&#123;[<span class="type">BoxStyles</span>.left,<span class="type">BoxStyles</span>[<span class="keyword">this</span>.props.classBg]]&#125;&gt;&lt;<span class="type">Text</span>&gt;left&lt;/<span class="type">Text</span>&gt;&lt;/<span class="type">View</span>&gt;</span><br><span class="line">            &#123;<span class="keyword">this</span>.props.children&#125;</span><br><span class="line">            &lt;<span class="type">View</span> style=&#123;[<span class="type">BoxStyles</span>.right,<span class="type">BoxStyles</span>[<span class="keyword">this</span>.props.classBg]]&#125;&gt;&lt;<span class="type">Text</span>&gt;right&lt;/<span class="type">Text</span>&gt;&lt;/<span class="type">View</span>&gt;</span><br><span class="line">          &lt;/<span class="type">View</span>&gt;</span><br><span class="line">          &lt;<span class="type">View</span> style=&#123;[<span class="type">BoxStyles</span>.bottom,<span class="type">BoxStyles</span>.height50,<span class="type">BoxStyles</span>[<span class="keyword">this</span>.props.classBg]]&#125;&gt;&lt;<span class="type">Text</span>&gt;bottom&lt;/<span class="type">Text</span>&gt;&lt;/<span class="type">View</span>&gt;</span><br><span class="line">          &lt;<span class="type">View</span> style=&#123;[<span class="type">BoxStyles</span>.label]&#125;&gt;&lt;<span class="type">Text</span>&gt;&#123;<span class="keyword">this</span>.props.boxName&#125;&lt;/<span class="type">Text</span>&gt;&lt;/<span class="type">View</span>&gt;</span><br><span class="line">        &lt;/<span class="type">View</span>&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MargginBox</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Component</span>&#123;</span></span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;<span class="type">View</span> style=&#123;[<span class="type">BoxStyles</span>.margginBox]&#125;&gt;</span><br><span class="line">          &lt;<span class="type">Box</span>  childName=<span class="string">"borderBox"</span>  height=<span class="string">"height400"</span> width=<span class="string">"width400"</span> boxName=<span class="string">"margin"</span> classBg=<span class="string">"bgred"</span>&gt;&#123;<span class="keyword">this</span>.props.children&#125;&lt;/<span class="type">Box</span>&gt;</span><br><span class="line">        &lt;/<span class="type">View</span>&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BorderBox</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Component</span>&#123;</span></span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;<span class="type">Box</span> childName=<span class="string">"paddingBox"</span>  height=<span class="string">"height300"</span> width=<span class="string">"width300"</span> boxName=<span class="string">"border"</span> classBg=<span class="string">"bggreen"</span> &gt;&#123;<span class="keyword">this</span>.props.children&#125;&lt;/<span class="type">Box</span>&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PaddingBox</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Component</span>&#123;</span></span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;<span class="type">Box</span> childName=<span class="string">"elementBox"</span>  height=<span class="string">"height200"</span> width=<span class="string">"width200"</span> boxName=<span class="string">"padding"</span> classBg=<span class="string">"bgyellow"</span> &gt;&#123;<span class="keyword">this</span>.props.children&#125;&lt;/<span class="type">Box</span>&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElementBox</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Component</span>&#123;</span></span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;<span class="type">View</span> style=&#123;[<span class="type">BoxStyles</span>.box,<span class="type">BoxStyles</span>.height100]&#125;&gt;</span><br><span class="line">          &lt;<span class="type">View</span> style=&#123;[<span class="type">BoxStyles</span>.measureBox]&#125;&gt;</span><br><span class="line">            &lt;<span class="type">View</span> style=&#123;[<span class="type">BoxStyles</span>.right]&#125;&gt;&lt;<span class="type">Text</span>&gt;height&lt;/<span class="type">Text</span>&gt;&lt;/<span class="type">View</span>&gt;</span><br><span class="line">          &lt;/<span class="type">View</span>&gt;</span><br><span class="line">          &lt;<span class="type">View</span> style=&#123;[<span class="type">BoxStyles</span>.bottom,<span class="type">BoxStyles</span>.height50]&#125; &gt;&lt;<span class="type">Text</span>&gt;width&lt;/<span class="type">Text</span>&gt;&lt;/<span class="type">View</span>&gt;</span><br><span class="line">          &lt;<span class="type">View</span> style=&#123;[<span class="type">BoxStyles</span>.label]&#125;&gt;&lt;<span class="type">Text</span>&gt;element&lt;/<span class="type">Text</span>&gt;&lt;/<span class="type">View</span>&gt;</span><br><span class="line">          &lt;<span class="type">View</span> style=&#123;[<span class="type">BoxStyles</span>.widthdashed]&#125;&gt;&lt;/<span class="type">View</span>&gt;</span><br><span class="line">          &lt;<span class="type">View</span> style=&#123;[<span class="type">BoxStyles</span>.heightdashed]&#125;&gt;&lt;/<span class="type">View</span>&gt;</span><br><span class="line">        &lt;/<span class="type">View</span>&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">luumans</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Component</span> &#123;</span></span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;<span class="type">MargginBox</span>&gt;</span><br><span class="line">          &lt;<span class="type">BorderBox</span>&gt;</span><br><span class="line">            &lt;<span class="type">PaddingBox</span>&gt;</span><br><span class="line">              &lt;<span class="type">ElementBox</span>&gt;</span><br><span class="line">              &lt;/<span class="type">ElementBox</span>&gt;</span><br><span class="line">            &lt;/<span class="type">PaddingBox</span>&gt;</span><br><span class="line">          &lt;/<span class="type">BorderBox</span>&gt;</span><br><span class="line">        &lt;/<span class="type">MargginBox</span>&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const <span class="type">BoxStyles</span> = <span class="type">StyleSheet</span>.create(&#123;</span><br><span class="line">  height50:&#123;</span><br><span class="line">    height: <span class="number">50</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  height400:&#123;</span><br><span class="line">    height: <span class="number">400</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  height300:&#123;</span><br><span class="line">    height: <span class="number">300</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  height200:&#123;</span><br><span class="line">    height: <span class="number">200</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  height100:&#123;</span><br><span class="line">    height: <span class="number">100</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  width400:&#123;</span><br><span class="line">    width: <span class="number">400</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  width300:&#123;</span><br><span class="line">    width: <span class="number">300</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  width200:&#123;</span><br><span class="line">    width: <span class="number">200</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  width100:&#123;</span><br><span class="line">    width: <span class="number">100</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  bgred: &#123;</span><br><span class="line">    backgroundColor:'#<span class="number">6</span>AC5AC',</span><br><span class="line">  &#125;,</span><br><span class="line">  bggreen: &#123;</span><br><span class="line">    backgroundColor: '#<span class="number">414142</span>',</span><br><span class="line">  &#125;,</span><br><span class="line">  bgyellow: &#123;</span><br><span class="line">    backgroundColor: '#<span class="type">D64078</span>',</span><br><span class="line">  &#125;,</span><br><span class="line">  box: &#123;</span><br><span class="line">    flexDirection: <span class="symbol">'colum</span>n',</span><br><span class="line">    flex: <span class="number">1</span>,</span><br><span class="line">    position: <span class="symbol">'relativ</span>e',</span><br><span class="line">  &#125;,</span><br><span class="line">  label: &#123;</span><br><span class="line">    top: <span class="number">0</span>,</span><br><span class="line">    left: <span class="number">0</span>,</span><br><span class="line">    paddingTop: <span class="number">0</span>,</span><br><span class="line">    paddingRight: <span class="number">3</span>,</span><br><span class="line">    paddingBottom: <span class="number">3</span>,</span><br><span class="line">    paddingLeft: <span class="number">0</span>,</span><br><span class="line">    position: <span class="symbol">'absolut</span>e',</span><br><span class="line">    backgroundColor: '#<span class="type">FDC72F</span>',</span><br><span class="line">  &#125;,</span><br><span class="line">  top: &#123;</span><br><span class="line">    justifyContent: <span class="symbol">'cente</span>r',</span><br><span class="line">    alignItems: <span class="symbol">'cente</span>r',</span><br><span class="line">  &#125;,</span><br><span class="line">  bottom: &#123;</span><br><span class="line">    justifyContent: <span class="symbol">'cente</span>r',</span><br><span class="line">    alignItems: <span class="symbol">'cente</span>r',</span><br><span class="line">  &#125;,</span><br><span class="line">  right: &#123;</span><br><span class="line">    width: <span class="number">50</span>,</span><br><span class="line">    justifyContent: <span class="symbol">'space</span>-around',</span><br><span class="line">    alignItems: <span class="symbol">'cente</span>r',</span><br><span class="line">  &#125;,</span><br><span class="line">  left: &#123;</span><br><span class="line">    width: <span class="number">50</span>,</span><br><span class="line">    justifyContent: <span class="symbol">'space</span>-around',</span><br><span class="line">    alignItems: <span class="symbol">'cente</span>r',</span><br><span class="line">  &#125;,</span><br><span class="line">  heightdashed: &#123;</span><br><span class="line">    bottom: <span class="number">0</span>,</span><br><span class="line">    top: <span class="number">0</span>,</span><br><span class="line">    right: <span class="number">20</span>,</span><br><span class="line">    borderLeftWidth: <span class="number">1</span>,</span><br><span class="line">    position: <span class="symbol">'absolut</span>e',</span><br><span class="line">    borderLeftColor: '#<span class="type">FDC72F</span>',</span><br><span class="line">  &#125;,</span><br><span class="line">  widthdashed: &#123;</span><br><span class="line">    bottom: <span class="number">25</span>,</span><br><span class="line">    left: <span class="number">0</span>,</span><br><span class="line">    right: <span class="number">0</span>,</span><br><span class="line">    borderTopWidth: <span class="number">1</span>,</span><br><span class="line">    position: <span class="symbol">'absolut</span>e',</span><br><span class="line">    borderTopColor: '#<span class="type">FDC72F</span>',</span><br><span class="line">  &#125;,</span><br><span class="line">  yellow: &#123;</span><br><span class="line">    color: '#<span class="type">FDC72F</span>',</span><br><span class="line">    fontWeight:<span class="symbol">'90</span>0',</span><br><span class="line">  &#125;,</span><br><span class="line">  white: &#123;</span><br><span class="line">    color: <span class="symbol">'whit</span>e',</span><br><span class="line">    fontWeight:<span class="symbol">'90</span>0',</span><br><span class="line">  &#125;,</span><br><span class="line">  margginBox:&#123;</span><br><span class="line">    position: <span class="symbol">'absolut</span>e',</span><br><span class="line">    top: <span class="number">100</span>,</span><br><span class="line">    paddingLeft:<span class="number">7</span>,</span><br><span class="line">    paddingRight:<span class="number">7</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  borderBox:&#123;</span><br><span class="line">    flex: <span class="number">1</span>,</span><br><span class="line">    justifyContent: <span class="symbol">'space</span>-between',</span><br><span class="line">    flexDirection: <span class="symbol">'ro</span>w',</span><br><span class="line">  &#125;,</span><br><span class="line">  paddingBox:&#123;</span><br><span class="line">    flex: <span class="number">1</span>,</span><br><span class="line">    justifyContent: <span class="symbol">'space</span>-between',</span><br><span class="line">    flexDirection: <span class="symbol">'ro</span>w',</span><br><span class="line">  &#125;,</span><br><span class="line">  elementBox:&#123;</span><br><span class="line">    flex: <span class="number">1</span>,</span><br><span class="line">    justifyContent: <span class="symbol">'space</span>-between',</span><br><span class="line">    flexDirection: <span class="symbol">'ro</span>w',</span><br><span class="line">  &#125;,</span><br><span class="line">  measureBox:&#123;</span><br><span class="line">    flex: <span class="number">1</span>,</span><br><span class="line">    flexDirection: <span class="symbol">'ro</span>w',</span><br><span class="line">    justifyContent: <span class="symbol">'flex</span>-end',</span><br><span class="line">    alignItems:<span class="symbol">'flex</span>-end',</span><br><span class="line">  &#125;,</span><br><span class="line">  container: &#123;</span><br><span class="line">    flex: <span class="number">1</span>,</span><br><span class="line">    justifyContent: <span class="symbol">'cente</span>r',</span><br><span class="line">    alignItems: <span class="symbol">'cente</span>r',</span><br><span class="line">    backgroundColor: '#<span class="type">F5FCFF</span>',</span><br><span class="line">  &#125;,</span><br><span class="line">  welcome: &#123;</span><br><span class="line">    fontSize: <span class="number">20</span>,</span><br><span class="line">    textAlign: <span class="symbol">'cente</span>r',</span><br><span class="line">    margin: <span class="number">10</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  instructions: &#123;</span><br><span class="line">    textAlign: <span class="symbol">'cente</span>r',</span><br><span class="line">    color: '#<span class="number">333333</span>',</span><br><span class="line">    marginBottom: <span class="number">5</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="type">AppRegistry</span>.registerComponent(<span class="symbol">'luuman</span>s', () =&gt; luumans);</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br>]]>
    
    </summary>
    
      <category term="ReactNative" scheme="http://luuman.github.io/tags/ReactNative/"/>
    
      <category term="FrontFrame" scheme="http://luuman.github.io/categories/FrontFrame/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React Native 基础]]></title>
    <link href="http://luuman.github.io/2016/12/26/FrontFrame/ReactNative/RNBasics/"/>
    <id>http://luuman.github.io/2016/12/26/FrontFrame/ReactNative/RNBasics/</id>
    <published>2016-12-26T02:29:00.000Z</published>
    <updated>2016-11-16T01:17:12.000Z</updated>
    <content type="html"><![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br><a id="more"></a><br>React Native看起来和react.js很像，最近也有不少框架开源，Weex基于Vue.js。ReactNative通过自定义组件，来实现接近原生操作，实现开平台效果。</p>
<p>官方文档地址：<br><a href="https://facebook.github.io/react-native/docs/props.html" target="_blank" rel="external">Props</a><br><a href="https://facebook.github.io/react-native/docs/state.html" target="_blank" rel="external">state</a><br><a href="https://facebook.github.io/react-native/docs/style.html" target="_blank" rel="external">style</a></p>
<h2 id="props__u5C5E_u6027"><a href="#props__u5C5E_u6027" class="headerlink" title="props 属性"></a>props 属性</h2><p>大多数组件在创建的时候就可以用各种参数来进行定制。用于定制的这些参数就称为props（属性）。所谓props，就是属性传递，而且是单向传递的。属性多的时候，可以传递一个对象，这是es6中的语法。</p>
<h3 id="u6848_u4F8B"><a href="#u6848_u4F8B" class="headerlink" title="案例"></a>案例</h3><figure class="highlight scala" data-lang=" scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="type">React</span>, &#123; <span class="type">Component</span> &#125; from <span class="symbol">'reac</span>t';</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="type">AppRegistry</span>, <span class="type">Image</span> &#125; from <span class="symbol">'react</span>-native';</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">luumans</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Component</span> &#123;</span></span><br><span class="line">  render() &#123;</span><br><span class="line">	let pic = &#123;</span><br><span class="line">	  uri: <span class="symbol">'https</span>:<span class="comment">//upload.wikimedia.org/wikipedia/commons/d/de/Bananavarieties.jpg'</span></span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">	  &lt;<span class="type">Image</span> source=&#123;pic&#125; style=&#123;&#123;width: <span class="number">193</span>, height: <span class="number">110</span>&#125;&#125;/&gt;</span><br><span class="line">	);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">AppRegistry</span>.registerComponent(<span class="symbol">'luuman</span>s', () =&gt; luumans);</span><br></pre></td></tr></table></figure>
<p>当我们使用Image组件，可以使用source的props属性uri来控制显示什么图片。</p>
<p>注意：<br>注意{pic}外围有一层括号，我们需要用括号来把pic这个变量嵌入到JSX语句中。我们可以把任意合法的JavaScript表达式通过括号嵌入到JSX语句中。</p>
<p>为了更好的说明props的用法和概念，我把上面的例子又修改了一下，我的这个例子只是为了更好的说明props属性的用法，不建议大家这么使用，毕竟image是现成的基础组件。</p>
<h3 id="u5B98_u7F51_u81EA_u5B9A_u4E49_u5C5E_u6027"><a href="#u5B98_u7F51_u81EA_u5B9A_u4E49_u5C5E_u6027" class="headerlink" title="官网自定义属性"></a>官网自定义属性</h3><figure class="highlight scala" data-lang=" scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="type">React</span>, &#123; <span class="type">Component</span> &#125; from <span class="symbol">'reac</span>t';</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="type">AppRegistry</span>,</span><br><span class="line">  <span class="type">StyleSheet</span>,</span><br><span class="line">  <span class="type">Text</span>,</span><br><span class="line">  <span class="type">Image</span>,</span><br><span class="line">  <span class="type">View</span></span><br><span class="line">&#125; from <span class="symbol">'react</span>-native';</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Img</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Component</span> &#123;</span></span><br><span class="line">  render() &#123;</span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">	  &lt;<span class="type">Image</span> source=&#123;<span class="keyword">this</span>.props.url&#125; style=&#123;&#123;width: <span class="number">120</span>, height: <span class="number">80</span>&#125;&#125;/&gt;</span><br><span class="line">	);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UrlProps</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Component</span> &#123;</span></span><br><span class="line">  render() &#123;</span><br><span class="line">	let pic = &#123;</span><br><span class="line">	  uri: <span class="symbol">'https</span>:<span class="comment">//upload.wikimedia.org/wikipedia/commons/d/de/Bananavarieties.jpg'</span></span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">	  &lt;<span class="type">View</span> style=&#123;&#123;padding: <span class="number">10</span>&#125;&#125;&gt;</span><br><span class="line">		&lt;<span class="type">Img</span> url =&#123;pic&#125;/&gt;</span><br><span class="line">	  &lt;/<span class="type">View</span>&gt;</span><br><span class="line">	);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">AppRegistry</span>.registerComponent(<span class="symbol">'UrlProp</span>s', () =&gt; <span class="type">UrlProps</span>);</span><br></pre></td></tr></table></figure>
<p>自己定义了个自定义组件Img，定义了个image的属性，通过单向数据传递实现。在自定义的Img组件中的，Image组件中引用了我们定义的image属性。这样一对比，可能大家就更能清楚的理解了props的用法了。说白了就是定制属性，然后传值。</p>
<p>注意：image是小些的， 大些的Image是官方图片基础组件。</p>
<h3 id="u81EA_u5B9A_u4E49_u5C5E_u6027"><a href="#u81EA_u5B9A_u4E49_u5C5E_u6027" class="headerlink" title="自定义属性"></a>自定义属性</h3><figure class="highlight scala" data-lang=" scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="type">React</span>, &#123; <span class="type">Component</span> &#125; from <span class="symbol">'reac</span>t';</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="type">AppRegistry</span>, <span class="type">Text</span>, <span class="type">View</span> &#125; from <span class="symbol">'react</span>-native';</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeting</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Component</span> &#123;</span></span><br><span class="line">  render() &#123;</span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">	  &lt;<span class="type">Text</span>&gt;<span class="type">Hello</span> &#123;<span class="keyword">this</span>.props.name&#125;!&lt;/<span class="type">Text</span>&gt;</span><br><span class="line">	);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LotsOfGreetings</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Component</span> &#123;</span></span><br><span class="line">  render() &#123;</span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">	  &lt;<span class="type">View</span> style=&#123;&#123;alignItems: <span class="symbol">'cente</span>r'&#125;&#125;&gt;</span><br><span class="line">		&lt;<span class="type">Greeting</span> name=<span class="symbol">'Rexxa</span>r' /&gt;</span><br><span class="line">		&lt;<span class="type">Greeting</span> name=<span class="symbol">'Jain</span>a' /&gt;</span><br><span class="line">		&lt;<span class="type">Greeting</span> name=<span class="symbol">'Valeer</span>a' /&gt;</span><br><span class="line">	  &lt;/<span class="type">View</span>&gt;</span><br><span class="line">	);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">AppRegistry</span>.registerComponent(<span class="symbol">'LotsOfGreeting</span>s', () =&gt; <span class="type">LotsOfGreetings</span>);</span><br></pre></td></tr></table></figure>
<p>意思就是：自定义了一个名为Greeting的组件，然后，属性名为name，传不同的name值，在Text显示不同的名字。</p>
<h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><p>React靠一个state来维护状态，当state发生变化则更新DOM。控制一个组件，一般有两种数据类型，一种是props，一种是state。props是在父组件中设置，一旦指定，它的生命周期是不可以改变的。对于组件中数据的变化，我们是通过state来控制的。<br>一般情况下，我们初始化state状态，是在constructor构造函数中，然后如果需要改变时，我们可以调用setState方法。官方给的例子时一个闪烁的文字的例子，看看官网的例子是如何制作文字闪烁效果的。</p>
<h3 id="u5B9A_u65F6_u5237_u65B0"><a href="#u5B9A_u65F6_u5237_u65B0" class="headerlink" title="定时刷新"></a>定时刷新</h3><figure class="highlight scala" data-lang=" scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="type">React</span>, &#123; <span class="type">Component</span> &#125; from <span class="symbol">'reac</span>t';</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="type">AppRegistry</span>, <span class="type">Text</span>, <span class="type">View</span> &#125; from <span class="symbol">'react</span>-native';</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RTitle</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Component</span> &#123;</span></span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">	<span class="keyword">super</span>(props);</span><br><span class="line">	<span class="keyword">this</span>.state = &#123; showText: <span class="literal">true</span> &#125;;</span><br><span class="line">	<span class="comment">// 每1000毫秒对showText状态做一次取反操作</span></span><br><span class="line">	setInterval(() =&gt; &#123;</span><br><span class="line">	  <span class="keyword">this</span>.setState(&#123; showText: !<span class="keyword">this</span>.state.showText &#125;);</span><br><span class="line">	&#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">	<span class="comment">// 根据当前showText的值决定是否显示text内容</span></span><br><span class="line">	let display = <span class="keyword">this</span>.state.showText ? <span class="keyword">this</span>.props.text : ' ';</span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">	  &lt;<span class="type">Text</span>&gt;&#123;display&#125;&lt;/<span class="type">Text</span>&gt;</span><br><span class="line">	);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReloadTitle</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Component</span> &#123;</span></span><br><span class="line">  render() &#123;</span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">	  &lt;<span class="type">View</span>&gt;</span><br><span class="line">		&lt;<span class="type">RTitle</span> text=<span class="symbol">'I</span> love to <span class="type">RTitle</span>' /&gt;</span><br><span class="line">		&lt;<span class="type">RTitle</span> text=<span class="symbol">'Yes</span> <span class="type">RTitleing</span> is so great' /&gt;</span><br><span class="line">		&lt;<span class="type">RTitle</span> text=<span class="symbol">'Why</span> did they ever take <span class="keyword">this</span> out of <span class="type">HTML</span>' /&gt;</span><br><span class="line">		&lt;<span class="type">RTitle</span> text=<span class="symbol">'Look</span> at me look at me look at me' /&gt;</span><br><span class="line">	  &lt;/<span class="type">View</span>&gt;</span><br><span class="line">	);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">AppRegistry</span>.registerComponent(<span class="symbol">'ReloadTitl</span>e', () =&gt; <span class="type">ReloadTitle</span>);</span><br></pre></td></tr></table></figure>
<p>自定义了一个RTitle组件，在构造函数中初始化了state，然后写了一个定时器，每个1秒改变一次状态，然后setState,然后在渲染render()方法中，判断状态的变化，如果是true，显示文字，false显示空。这样一闪一闪的效果就出来了。<br>然后我们在ReloadTitle中使用RTitle组件，并传入我们需要的文字内容即可。<br>其实在实际开发中，我们不需要设置定时器来改变状态，一般情况下，我们都是在获取到服务器的数据时或者用户输入时，更新状态去显示最新的数据。这是我们就是通过setState来做到的。</p>
<h2 id="StyleSheet"><a href="#StyleSheet" class="headerlink" title="StyleSheet"></a>StyleSheet</h2><p>在React Native中，你并不需要学习什么特殊的语法来定义样式。我们仍然是使用JavaScript来写样式。所有的核心组件都接受名为style的属性。这些样式名基本上是遵循了web上的CSS的命名，只是按照JS的语法要求使用了驼峰命名法，例如将background-color改为backgroundColor。</p>
<figure class="highlight accesslog" data-lang=" accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const <span class="string">[name]</span> = StyleSheet.create(&#123;</span><br><span class="line">  <span class="string">[name]</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="u6837_u5F0F_u5F15_u5165"><a href="#u6837_u5F0F_u5F15_u5165" class="headerlink" title="样式引入"></a>样式引入</h3><ol>
<li><p>外联</p>
<figure class="highlight apache" data-lang=" apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;View style = &#123;styles.item&#125;&gt;</span><span class="tag">&lt;/View&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>内联</p>
<figure class="highlight crystal" data-lang=" crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="constant">View</span> style = <span class="expansion">&#123;&#123;<span class="symbol">flex:</span> <span class="number">1</span>,<span class="symbol">height:</span> <span class="number">80</span>,<span class="symbol">borderWidth:</span> <span class="number">1</span>,<span class="symbol">borderColor:</span> <span class="string">'#000'</span>,&#125;&#125;</span>&gt;&lt;<span class="regexp">/View&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>多个样式</p>
<figure class="highlight groovy" data-lang=" groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;View style = &#123;[styles.item,styles.items,&#123;<span class="string">flex:</span> <span class="number">1</span>,<span class="string">height:</span> <span class="number">80</span>,<span class="string">borderWidth:</span> <span class="number">1</span>,<span class="string">borderColor:</span> <span class="string">'#000'</span>,&#125;]&#125;&gt;&lt;/View&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="TitleStyle"><a href="#TitleStyle" class="headerlink" title="TitleStyle"></a>TitleStyle</h3><figure class="highlight crystal" data-lang=" crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import <span class="constant">React</span>, &#123; <span class="constant">Component</span> &#125; from <span class="string">'react'</span>;</span><br><span class="line">import &#123; <span class="constant">AppRegistry</span>, <span class="constant">StyleSheet</span>, <span class="constant">Text</span>, <span class="constant">View</span> &#125; from <span class="string">'react-native'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TitleStyle</span> <span class="title">extends</span> <span class="title">Component</span> &#123;</span></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;<span class="constant">View</span>&gt;</span><br><span class="line">        &lt;<span class="constant">Text</span> style=&#123;styles.red&#125;&gt;just red&lt;<span class="regexp">/Text&gt;</span><br><span class="line">        &lt;Text style=&#123;styles.bigblue&#125;&gt;just bigblue&lt;/</span><span class="constant">Text</span>&gt;</span><br><span class="line">        &lt;<span class="constant">Text</span> style=&#123;[styles.bigblue, styles.red]&#125;&gt;bigblue, <span class="keyword">then</span> red&lt;<span class="regexp">/Text&gt;</span><br><span class="line">        &lt;Text style=&#123;[styles.red, styles.bigblue]&#125;&gt;red, then bigblue&lt;/</span><span class="constant">Text</span>&gt;</span><br><span class="line">        &lt;<span class="constant">Text</span> style=<span class="expansion">&#123;&#123;<span class="symbol">color:</span><span class="string">'red'</span> , <span class="symbol">fontSize:</span><span class="number">30</span>&#125;&#125;</span>&gt;</span><br><span class="line">          <span class="constant">Style</span> </span><br><span class="line">          &lt;<span class="constant">Text</span> style=<span class="expansion">&#123;&#123;<span class="symbol">color:</span><span class="string">'blue'</span>&#125;&#125;</span>&gt;</span><br><span class="line">            <span class="constant">Title</span></span><br><span class="line">          &lt;<span class="regexp">/Text&gt;</span><br><span class="line">        &lt;/</span><span class="constant">Text</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">const styles = StyleSheet.create(&#123;</span><br><span class="line">  bigblue: &#123;</span><br><span class="line">  color: 'blue',</span><br><span class="line">  fontWeight: 'bold',</span><br><span class="line">  fontSize: 30,</span><br><span class="line">  &#125;,</span><br><span class="line">  red: &#123;</span><br><span class="line">  color: 'red',</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">AppRegistry.registerComponent('TitleStyle', () =&gt; TitleStyle);</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br>]]>
    
    </summary>
    
      <category term="ReactNative" scheme="http://luuman.github.io/tags/ReactNative/"/>
    
      <category term="FrontFrame" scheme="http://luuman.github.io/categories/FrontFrame/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React Native IOS环境搭建]]></title>
    <link href="http://luuman.github.io/2016/12/25/FrontFrame/ReactNative/RNSetOX/"/>
    <id>http://luuman.github.io/2016/12/25/FrontFrame/ReactNative/RNSetOX/</id>
    <published>2016-12-25T11:29:00.000Z</published>
    <updated>2016-11-16T01:17:12.000Z</updated>
    <content type="html"><![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br><a id="more"></a></p>
<h2 id="React_Native_u521D_u63A2"><a href="#React_Native_u521D_u63A2" class="headerlink" title="React Native初探"></a>React Native初探</h2><!-- learn once,write everywhere! -->
<p>ReactNative是Facebook在2015年React开发者大会上公开的应用开发框架，一个可以用React开发原生应用的框架。</p>
<h3 id="u6280_u672F_u80CC_u666F"><a href="#u6280_u672F_u80CC_u666F" class="headerlink" title="技术背景"></a>技术背景</h3><p>FaceBook =&gt; HTML5、NativeApp<br>HybridApp =&gt; Native + Web 混合模式</p>
<h3 id="u7279_u70B9_uFF1A"><a href="#u7279_u70B9_uFF1A" class="headerlink" title="特点："></a>特点：</h3><p>JSX语法（扩展的JS语法）、组件化模式、Virtual Dom、DataBinding单向数据流、可以实现Chrome的调试</p>
<h3 id="u57FA_u672C_u6A21_u5F0F_uFF1A"><a href="#u57FA_u672C_u6A21_u5F0F_uFF1A" class="headerlink" title="基本模式："></a>基本模式：</h3><p>每个React应用可视为组件的组合，而每个React组件由属性（Property）和状态（state）来配置，当状态发生变化时更新UI，组件的结构是由虚拟的DOM来维护，确保了实际更新的DOM只包括真正产生了状态变化的部分。</p>
<h3 id="u540C_u7C7B_u578B_u7684_u4EE3_u7801_uFF1A"><a href="#u540C_u7C7B_u578B_u7684_u4EE3_u7801_uFF1A" class="headerlink" title="同类型的代码："></a>同类型的代码：</h3><p>GoogleSky、Titanium、NativeScript（太重）、鸟巢（支付宝）、BeeFrameWork<br>综合起来：强大的社区，简单的学习，简单的开发、简单的应用。</p>
<h3 id="u8DE8_u5E73_u53F0_u5F00_u53D1_u6846_u67B6"><a href="#u8DE8_u5E73_u53F0_u5F00_u53D1_u6846_u67B6" class="headerlink" title="跨平台开发框架"></a>跨平台开发框架</h3><p>优点；</p>
<ol>
<li>跨平台、兼容web、ios、android三大主流平台</li>
<li>React调用原生控件，性能优于H5框架</li>
<li>更好的手势识别</li>
<li>实时部署更新，再也不用担心应用市场审核缓慢</li>
</ol>
<p>设计理念：既拥有Native的用户体验，又保留React的开发效率！</p>
<p>Facebook官方使用React Native开发的应用：Groups、Ads Manager、F8、Adverts Manger、天猫IPad、Chinese Flashcards</p>
<h3 id="ReactNative_u63D0_u4F9B_u4E86_u90A3_u4E9B_u80FD_u529B"><a href="#ReactNative_u63D0_u4F9B_u4E86_u90A3_u4E9B_u80FD_u529B" class="headerlink" title="ReactNative提供了那些能力"></a>ReactNative提供了那些能力</h3><ol>
<li>基于原生UI组件</li>
<li>手势识别</li>
<li>基于FlexBox的CSS布局模式</li>
<li>跨平台开发</li>
<li>基于React、jsx组件化开发模式</li>
</ol>
<h2 id="IOS_u73AF_u5883_u642D_u5EFA"><a href="#IOS_u73AF_u5883_u642D_u5EFA" class="headerlink" title="IOS环境搭建"></a>IOS环境搭建</h2><table>
<thead>
<tr>
<th>环境依赖：</th>
</tr>
</thead>
<tbody>
<tr>
<td>OSX</td>
</tr>
<tr>
<td>Xcode</td>
</tr>
<tr>
<td>Node</td>
</tr>
<tr>
<td>sublime</td>
</tr>
</tbody>
</table>
<h3 id="u5B89_u88C5Homebrew_uFF1A"><a href="#u5B89_u88C5Homebrew_uFF1A" class="headerlink" title="安装Homebrew："></a>安装Homebrew：</h3><p>Homebrew, Mac系统的包管理器，用于安装NodeJS和一些其他必需的工具软件。通过homebrew安装Node、watchman、flow</p>
<h4 id="u5B89_u88C5Homebrew_uFF1A-1"><a href="#u5B89_u88C5Homebrew_uFF1A-1" class="headerlink" title="安装Homebrew："></a>安装<a href="http://brew.sh/" title="Homebrew官网" target="_blank" rel="external">Homebrew</a>：</h4><figure class="highlight bash" data-lang=" bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby <span class="operator">-e</span> <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure>
<p>注：在Max OS X 10.11（El Capitan)版本中，homebrew在安装软件时可能会碰到/usr/local目录不可写的权限问题。可以使用下面的命令修复：</p>
<figure class="highlight bash" data-lang=" bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R `whoami` /usr/<span class="built_in">local</span></span><br></pre></td></tr></table></figure>
<h4 id="u67E5_u770B_u662F_u5426_u5B89_u88C5homebrew"><a href="#u67E5_u770B_u662F_u5426_u5B89_u88C5homebrew" class="headerlink" title="查看是否安装homebrew"></a>查看是否安装homebrew</h4><figure class="highlight armasm" data-lang=" armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span>-v</span><br></pre></td></tr></table></figure>
<h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><figure class="highlight bash" data-lang=" bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure>
<h3 id="Watchman"><a href="#Watchman" class="headerlink" title="Watchman"></a>Watchman</h3><p>Watchman是由Facebook提供的监视文件系统变更的工具。安装此工具可以提高开发时的性能（packager可以快速捕捉文件的变化从而实现实时刷新）。<br><figure class="highlight bash" data-lang=" bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install watchman 检测文件变化</span><br></pre></td></tr></table></figure></p>
<h3 id="Flow"><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h3><p>Flow是一个静态的JS类型检查工具。译注：你在很多示例中看到的奇奇怪怪的冒号问号，以及方法参数中像类型一样的写法，都是属于这个flow工具的语法。这一语法并不属于ES标准，只是Facebook自家的代码规范。所以新手可以直接跳过（即不需要安装这一工具，也不建议去费力学习flow相关语法）。<br><figure class="highlight bash" data-lang=" bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install flow 检测js语法</span><br></pre></td></tr></table></figure></p>
<figure class="highlight bash" data-lang=" bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clear 清理屏幕</span><br></pre></td></tr></table></figure>
<h3 id="React_Native"><a href="#React_Native" class="headerlink" title="React Native"></a>React Native</h3><p>React Native的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务<br><figure class="highlight bash" data-lang=" bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g react-native-cli 全局安装react native</span><br></pre></td></tr></table></figure></p>
<p>如果你看到EACCES: permission denied这样的权限报错，那么请参照上文的homebrew译注，修复/usr/local目录的所有权：<br><figure class="highlight bash" data-lang=" bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R `whoami` /usr/<span class="built_in">local</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br>]]>
    
    </summary>
    
      <category term="ReactNative" scheme="http://luuman.github.io/tags/ReactNative/"/>
    
      <category term="FrontFrame" scheme="http://luuman.github.io/categories/FrontFrame/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React Native开发工具]]></title>
    <link href="http://luuman.github.io/2016/12/25/FrontFrame/ReactNative/RNTools/"/>
    <id>http://luuman.github.io/2016/12/25/FrontFrame/ReactNative/RNTools/</id>
    <published>2016-12-25T10:29:00.000Z</published>
    <updated>2016-11-16T01:17:12.000Z</updated>
    <content type="html"><![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br><a id="more"></a></p>
<h2 id="Sublime_3"><a href="#Sublime_3" class="headerlink" title="Sublime 3"></a>Sublime 3</h2><h3 id="ReactJS"><a href="#ReactJS" class="headerlink" title="ReactJS"></a><a href="https://github.com/facebookarchive/sublime-react" target="_blank" rel="external">ReactJS</a></h3><h3 id="Emmet"><a href="#Emmet" class="headerlink" title="Emmet"></a><a href="&quot;Ctrl + E&quot;">Emmet</a></h3><figure class="highlight apache" data-lang=" apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">View</span>&gt;Text</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;View&gt;</span></span><br><span class="line">  <span class="tag">&lt;Text&gt;</span><span class="tag">&lt;/Text&gt;</span></span><br><span class="line"><span class="tag">&lt;/View&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Terminal"><a href="#Terminal" class="headerlink" title="Terminal"></a><a href="&quot;&quot;">Terminal</a></h3><p>上面添加了Terminal插件，在sublime里，直接用快捷键 command+shift+T，打开终端，然后执行如下命令运行 Android 应用程序：</p>
<h3 id="react-native-snippets"><a href="#react-native-snippets" class="headerlink" title="react-native-snippets"></a><a href="https://github.com/Shrugs/react-native-snippets" target="_blank" rel="external">react-native-snippets</a></h3><h3 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a><a href="https://github.com/babel/babel-sublime" target="_blank" rel="external">Babel</a></h3><p>babel插件支持ES6语法和JSX语法，要比sublime-react看起来更舒服。出现问题也会提示。</p>
<p>安装：<br>搜索“Babel”，安装后将jsx文件格式设置成（Syntax -&gt; Open all with current extension as… -&gt; Babel -&gt; JavaScript (Babel)）</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br>]]>
    
    </summary>
    
      <category term="ReactNative" scheme="http://luuman.github.io/tags/ReactNative/"/>
    
      <category term="FrontFrame" scheme="http://luuman.github.io/categories/FrontFrame/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React Native Android环境搭建（Window）]]></title>
    <link href="http://luuman.github.io/2016/12/25/FrontFrame/ReactNative/RNSetAndroid/"/>
    <id>http://luuman.github.io/2016/12/25/FrontFrame/ReactNative/RNSetAndroid/</id>
    <published>2016-12-25T10:29:00.000Z</published>
    <updated>2016-11-16T01:17:12.000Z</updated>
    <content type="html"><![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br><a id="more"></a></p>
<h2 id="Android_u73AF_u5883_u642D_u5EFA_uFF08Window_u4E0B_uFF09"><a href="#Android_u73AF_u5883_u642D_u5EFA_uFF08Window_u4E0B_uFF09" class="headerlink" title="Android环境搭建（Window下）"></a>Android环境搭建（Window下）</h2><table>
<thead>
<tr>
<th>环境依赖：</th>
</tr>
</thead>
<tbody>
<tr>
<td>Git</td>
</tr>
<tr>
<td>Node</td>
</tr>
<tr>
<td>Python 2</td>
</tr>
<tr>
<td>Android Studio</td>
</tr>
<tr>
<td>react-native-cli</td>
</tr>
<tr>
<td>Microsoft C++ 环境</td>
</tr>
<tr>
<td>android 6.0 真机</td>
</tr>
</tbody>
</table>
<h3 id="u5B89_u88C5java_JDk"><a href="#u5B89_u88C5java_JDk" class="headerlink" title="安装java JDk"></a>安装java JDk</h3><p>从Java官网下载<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">Java SE Development Kit 7 Downloads</a>并安装。请注意选择x86还是x64版本。推荐将JDK的bin目录加入系统PATH环境变量。（安装JDK、JRE）</p>
<h4 id="u914D_u7F6E_u73AF_u5883_u53D8_u91CF_uFF1A"><a href="#u914D_u7F6E_u73AF_u5883_u53D8_u91CF_uFF1A" class="headerlink" title="配置环境变量："></a>配置环境变量：</h4><blockquote>
<p>系统变量→新建 JAVA_HOME 变量</p>
</blockquote>
<figure class="highlight bash" data-lang=" bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\Java\jdk1.<span class="number">7.0</span>_79</span><br></pre></td></tr></table></figure>
<blockquote>
<p>系统变量→寻找 Path 变量→编辑</p>
</blockquote>
<figure class="highlight bash" data-lang=" bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>系统变量→新建 CLASSPATH 变量→编辑</p>
</blockquote>
<figure class="highlight bash" data-lang=" bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar</span><br></pre></td></tr></table></figure>
<blockquote>
<p>java -version 查看Java版本</p>
</blockquote>
<h3 id="u5B89_u88C5Python_2"><a href="#u5B89_u88C5Python_2" class="headerlink" title="安装Python 2"></a>安装Python 2</h3><p>从官网下载并安装<a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000" title="Python 2.7教程 - 廖雪峰的官方网站" target="_blank" rel="external">python 2.7.x</a>（3.x版本不行）</p>
<h3 id="Android_Studio"><a href="#Android_Studio" class="headerlink" title="Android Studio"></a>Android Studio</h3><p><a href="http://www.android-studio.org/index.php/download" target="_blank" rel="external">Android Studio</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br>]]>
    
    </summary>
    
      <category term="ReactNative" scheme="http://luuman.github.io/tags/ReactNative/"/>
    
      <category term="FrontFrame" scheme="http://luuman.github.io/categories/FrontFrame/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React Native初探]]></title>
    <link href="http://luuman.github.io/2016/12/25/FrontFrame/ReactNative/RN/"/>
    <id>http://luuman.github.io/2016/12/25/FrontFrame/ReactNative/RN/</id>
    <published>2016-12-25T01:29:00.000Z</published>
    <updated>2016-11-16T01:17:12.000Z</updated>
    <content type="html"><![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br><a id="more"></a></p>
<h2 id="React_Native_u521D_u63A2"><a href="#React_Native_u521D_u63A2" class="headerlink" title="React Native初探"></a>React Native初探</h2><!-- learn once,write everywhere! -->
<p>ReactNative是Facebook在2015年React开发者大会上公开的应用开发框架，一个可以用React开发原生应用的框架。</p>
<h3 id="u6280_u672F_u80CC_u666F"><a href="#u6280_u672F_u80CC_u666F" class="headerlink" title="技术背景"></a>技术背景</h3><p>FaceBook =&gt; HTML5、NativeApp<br>HybridApp =&gt; Native + Web 混合模式</p>
<h3 id="u7279_u70B9_uFF1A"><a href="#u7279_u70B9_uFF1A" class="headerlink" title="特点："></a>特点：</h3><p>JSX语法（扩展的JS语法）、组件化模式、Virtual Dom、DataBinding单向数据流、可以实现Chrome的调试</p>
<h3 id="u57FA_u672C_u6A21_u5F0F_uFF1A"><a href="#u57FA_u672C_u6A21_u5F0F_uFF1A" class="headerlink" title="基本模式："></a>基本模式：</h3><p>每个React应用可视为组件的组合，而每个React组件由属性（Property）和状态（state）来配置，当状态发生变化时更新UI，组件的结构是由虚拟的DOM来维护，确保了实际更新的DOM只包括真正产生了状态变化的部分。</p>
<h3 id="u540C_u7C7B_u578B_u7684_u4EE3_u7801_uFF1A"><a href="#u540C_u7C7B_u578B_u7684_u4EE3_u7801_uFF1A" class="headerlink" title="同类型的代码："></a>同类型的代码：</h3><p>GoogleSky、Titanium、NativeScript（太重）、鸟巢（支付宝）、BeeFrameWork<br>综合起来：强大的社区，简单的学习，简单的开发、简单的应用。</p>
<h3 id="u8DE8_u5E73_u53F0_u5F00_u53D1_u6846_u67B6"><a href="#u8DE8_u5E73_u53F0_u5F00_u53D1_u6846_u67B6" class="headerlink" title="跨平台开发框架"></a>跨平台开发框架</h3><p>优点；</p>
<ol>
<li>跨平台、兼容web、ios、android三大主流平台</li>
<li>React调用原生控件，性能优于H5框架</li>
<li>更好的手势识别</li>
<li>实时部署更新，再也不用担心应用市场审核缓慢</li>
</ol>
<p>设计理念：既拥有Native的用户体验，又保留React的开发效率！</p>
<p>Facebook官方使用React Native开发的应用：Groups、Ads Manager、F8、Adverts Manger、天猫IPad、Chinese Flashcards</p>
<h3 id="ReactNative_u63D0_u4F9B_u4E86_u90A3_u4E9B_u80FD_u529B"><a href="#ReactNative_u63D0_u4F9B_u4E86_u90A3_u4E9B_u80FD_u529B" class="headerlink" title="ReactNative提供了那些能力"></a>ReactNative提供了那些能力</h3><ol>
<li>基于原生UI组件</li>
<li>手势识别</li>
<li>基于FlexBox的CSS布局模式</li>
<li>跨平台开发</li>
<li>基于React、jsx组件化开发模式</li>
</ol>
<h2 id="u9879_u76EE_u7ED3_u6784"><a href="#u9879_u76EE_u7ED3_u6784" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight 1c" data-lang=" 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ReactNative     (项目名称)</span><br><span class="line"><span class="string">|–node_modules                  node模块</span></span><br><span class="line">    <span class="string">|–react-native              ReactNative引用工程文件</span></span><br><span class="line"><span class="string">|–app                           app页面</span></span><br><span class="line">    <span class="string">|–index.android.js          android工程备份</span></span><br><span class="line">    <span class="string">|–index.ios.js              ios工程备份</span></span><br><span class="line"><span class="string">|–index.android.js              android工程（开发文件）</span></span><br><span class="line"><span class="string">|–index.ios.js                  ios工程（开发文件）</span></span><br><span class="line"><span class="string">|–android              android项目</span></span><br><span class="line"><span class="string">|–ios                  ios项目</span></span><br><span class="line">    <span class="string">|–*.xcodeproj               Xcode启动文件</span></span><br><span class="line"><span class="string">|–package.json         工程信息数据</span></span><br></pre></td></tr></table></figure>
<p>注：android与ios有什么区别？<br>关于android与ios开发，大部分只要将开发好的文件相互拷贝，修改android与ios独有的部分控件即可。整体的逻辑思路保持一致即可。</p>
<h3 id="u8BBE_u5907_u8C03_u8BD5_u5DE5_u5177"><a href="#u8BBE_u5907_u8C03_u8BD5_u5DE5_u5177" class="headerlink" title="设备调试工具"></a>设备调试工具</h3><p>摇晃设备或按Menu键</p>
<table>
<thead>
<tr>
<th>chance</th>
<th>选项</th>
</tr>
</thead>
<tbody>
<tr>
<td>Reload</td>
<td>刷新</td>
</tr>
<tr>
<td>Debug Js Remotely</td>
<td>远程调试js</td>
</tr>
<tr>
<td>Enable Live Reload</td>
<td>启动实时刷新</td>
</tr>
<tr>
<td>Enable Hot Reloading</td>
<td>启动热刷新</td>
</tr>
<tr>
<td>Toggle Inspector</td>
<td>标签调试</td>
</tr>
<tr>
<td>Show Perf Monitor</td>
<td>显示性能监视器</td>
</tr>
<tr>
<td>Capture Heap</td>
<td></td>
</tr>
<tr>
<td>Start/Stop Sampling Profiler</td>
<td>启动/停止检测器</td>
</tr>
<tr>
<td>Dev Settings</td>
<td>设备设置</td>
</tr>
</tbody>
</table>
<h4 id="Debug_Js_Remotely_js_u8FDC_u7A0B_u8C03_u8BD5"><a href="#Debug_Js_Remotely_js_u8FDC_u7A0B_u8C03_u8BD5" class="headerlink" title="Debug Js Remotely   js远程调试"></a>Debug Js Remotely   js远程调试</h4><p>此时，会打开页面调试Tab页面<a href="http://localhost:8081/debugger-ui" target="_blank" rel="external">Tab页面</a>，可以用浏览器访问<a href="http://localhost:8081/index.android.bundle?platform=android" title="link" target="_blank" rel="external">android</a>看看是否可以看到打包后的脚本（看到很长的js代码就对了）。第一次访问通常需要十几秒，并且在packager的命令行可以看到形如[====]的进度条。</p>
<p>如果你遇到了ERROR Watcher took too long to load的报错，请尝试修改node_modules/react-native/packager/react-packager/src/FileWatcher/index.js，将其中的MAX_WAIT_TIME 从25000改为更大的值（单位是毫秒）</p>
<h4 id="Enable_Live_Reload__u542F_u52A8_u5B9E_u65F6_u5237_u65B0"><a href="#Enable_Live_Reload__u542F_u52A8_u5B9E_u65F6_u5237_u65B0" class="headerlink" title="Enable Live Reload   启动实时刷新"></a>Enable Live Reload   启动实时刷新</h4><h4 id="Enable_Hot_Reloading__u542F_u52A8_u70ED_u5237_u65B0"><a href="#Enable_Hot_Reloading__u542F_u52A8_u70ED_u5237_u65B0" class="headerlink" title="Enable Hot Reloading   启动热刷新"></a>Enable Hot Reloading   启动热刷新</h4><p><a href="http://mp.weixin.qq.com/s?__biz=MzAwMTYwNzE2Mg==&amp;mid=2651036597&amp;idx=1&amp;sn=8169e1d806ebece54403ff6902b05e36#rd&amp;utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">React Native 热加载（Hot Reload）原理简介</a></p>
<h4 id="Toggle_Inspector__u6807_u7B7E_u8C03_u8BD5"><a href="#Toggle_Inspector__u6807_u7B7E_u8C03_u8BD5" class="headerlink" title="Toggle Inspector   标签调试"></a>Toggle Inspector   标签调试</h4><h4 id="Show_Perf_Monitor__u663E_u793A_u6027_u80FD_u76D1_u89C6_u5668"><a href="#Show_Perf_Monitor__u663E_u793A_u6027_u80FD_u76D1_u89C6_u5668" class="headerlink" title="Show Perf Monitor   显示性能监视器"></a>Show Perf Monitor   显示性能监视器</h4><h4 id="Capture_Heap"><a href="#Capture_Heap" class="headerlink" title="Capture Heap"></a>Capture Heap</h4><h4 id="Start/Stop_Sampling_Profiler__u542F_u52A8/_u505C_u6B62_u68C0_u6D4B_u5668"><a href="#Start/Stop_Sampling_Profiler__u542F_u52A8/_u505C_u6B62_u68C0_u6D4B_u5668" class="headerlink" title="Start/Stop Sampling Profiler   启动/停止检测器"></a>Start/Stop Sampling Profiler   启动/停止检测器</h4><h4 id="Dev_Settings__u8BBE_u5907_u8BBE_u7F6E"><a href="#Dev_Settings__u8BBE_u5907_u8BBE_u7F6E" class="headerlink" title="Dev Settings   设备设置"></a>Dev Settings   设备设置</h4><p><a href="&quot;&quot;"></a><br>Bebugging 调试<br>Debug server host &amp; port for device 调试服务器主机和端口</p>
<figure class="highlight cpp" data-lang=" cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb devices 查询设备ID</span><br><span class="line"></span><br><span class="line">adb reverse tcp:<span class="number">8081</span> tcp:<span class="number">8081</span></span><br></pre></td></tr></table></figure>
<h4 id="u63D0_u793A_u4FE1_u606F"><a href="#u63D0_u793A_u4FE1_u606F" class="headerlink" title="提示信息"></a>提示信息</h4><p>应用内的错误与警告提示（红屏和黄屏）#红屏或黄屏提示都只会在开发版本中显示，正式的离线包中是不会显示的。</p>
<p><a href="http://blog.csdn.net/quanqinyang/article/details/52215652" target="_blank" rel="external">React Native调试技巧与心得</a></p>
<h4 id="u7B80_u5355_u7684_u5217_u8868Demo"><a href="#u7B80_u5355_u7684_u5217_u8868Demo" class="headerlink" title="简单的列表Demo"></a>简单的列表Demo</h4><figure class="highlight handlebars" data-lang=" handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">import React, &#123; Component &#125; from 'react';</span><br><span class="line">import &#123;</span><br><span class="line">  AppRegistry,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  Text,</span><br><span class="line">  View,</span><br><span class="line">  ScrollView,</span><br><span class="line">  Image,</span><br><span class="line">&#125; from 'react-native';</span><br><span class="line"></span><br><span class="line">export default class luumans extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      <span class="tag">&lt;<span class="title">ScrollView</span> <span class="attribute">style</span>=<span class="value">&#123;styles.container&#125;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Image</span></span><br><span class="line">          <span class="attribute">source</span>=</span></span><span class="expression">&#123;&#123;<span class="variable">uri</span>: '<span class="variable">http</span>:/<span class="end-block">/jiuye-res.jikexueyuan.com</span><span class="end-block">/zhiye</span><span class="end-block">/showcase</span><span class="end-block">/attach-</span>/20161013/2<span class="variable">a</span>7<span class="variable">bf</span>0<span class="variable">a</span>0<span class="variable">-d</span>94<span class="variable">d-</span>40<span class="variable">d</span>4<span class="variable">-a</span>244<span class="variable">-</span>20<span class="variable">e</span>5<span class="variable">a</span>5<span class="variable">e</span>359<span class="variable">e</span>6<span class="variable">.jpg</span>'&#125;&#125;</span><span class="xml"><span class="tag"></span><br><span class="line">          <span class="attribute">style</span>=<span class="value">&#123;styles.images&#125;</span></span><br><span class="line">        /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.title&#125;</span>&gt;</span>『微信小程序』从基础到实战<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.teacher&#125;</span>&gt;</span>勾股<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.time&#125;</span>&gt;</span>2013-07-11<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Image</span></span><br><span class="line">          <span class="attribute">source</span>=</span></span><span class="expression">&#123;&#123;<span class="variable">uri</span>: '<span class="variable">http</span>:/<span class="end-block">/jiuye-res.jikexueyuan.com</span><span class="end-block">/zhiye</span><span class="end-block">/showcase</span><span class="end-block">/attach-</span>59<span class="variable">b</span>4<span class="variable">a</span>27<span class="variable">d-e</span>431<span class="variable">-</span>4<span class="variable">f</span>49<span class="variable">-aa</span>25<span class="variable">-</span>6<span class="variable">b</span>94<span class="variable">cccd</span>8229<span class="variable">.jpg</span>'&#125;&#125;</span><span class="xml"><span class="tag"></span><br><span class="line">          <span class="attribute">style</span>=<span class="value">&#123;styles.images&#125;</span></span><br><span class="line">        /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.title&#125;</span>&gt;</span>基于Go语言的短链接服务实战<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.teacher&#125;</span>&gt;</span>小鱼<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.time&#125;</span>&gt;</span>2013-07-11<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Image</span></span><br><span class="line">          <span class="attribute">source</span>=</span></span><span class="expression">&#123;&#123;<span class="variable">uri</span>: '<span class="variable">http</span>:/<span class="end-block">/jiuye-res.jikexueyuan.com</span><span class="end-block">/zhiye</span><span class="end-block">/showcase</span><span class="end-block">/attach-</span>0<span class="variable">da</span>69660<span class="variable">-</span>4<span class="variable">fcc-</span>45<span class="variable">d</span>1<span class="variable">-</span>9<span class="variable">b</span>84<span class="variable">-</span>88271851<span class="variable">f</span>57<span class="variable">f.jpg</span>'&#125;&#125;</span><span class="xml"><span class="tag"></span><br><span class="line">          <span class="attribute">style</span>=<span class="value">&#123;styles.images&#125;</span></span><br><span class="line">        /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.title&#125;</span>&gt;</span>基于Python的静态爬虫实战<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.teacher&#125;</span>&gt;</span>飞雪<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.time&#125;</span>&gt;</span>2013-07-11<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">ScrollView</span>&gt;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const styles = StyleSheet.create(&#123;</span><br><span class="line">  container: &#123;</span><br><span class="line">    flex: 1,</span><br><span class="line">    backgroundColor: '#F2F2F2',</span><br><span class="line">    margin: 5,</span><br><span class="line">    borderWidth: 1,</span><br><span class="line">    borderColor: '#d2d2d2',</span><br><span class="line">  &#125;,</span><br><span class="line">  title: &#123;</span><br><span class="line">    fontSize: 15,</span><br><span class="line">    marginLeft: 10,</span><br><span class="line">    color: '#333333',</span><br><span class="line">    textAlign: 'left',</span><br><span class="line">  &#125;,</span><br><span class="line">  images: &#123;</span><br><span class="line">    height: 200,</span><br><span class="line">    margin: 10,</span><br><span class="line">  &#125;,</span><br><span class="line">  teacher: &#123;</span><br><span class="line">    fontSize: 13,</span><br><span class="line">    marginLeft: 10,</span><br><span class="line">    color: '#525252',</span><br><span class="line">    textAlign: 'left',</span><br><span class="line">  &#125;,</span><br><span class="line">  time: &#123;</span><br><span class="line">    fontSize: 13,</span><br><span class="line">    marginLeft: 10,</span><br><span class="line">    color: '#2d854a',</span><br><span class="line">    textAlign: 'left',</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AppRegistry.registerComponent('luumans', () =&gt; luumans);</span></span><br></pre></td></tr></table></figure>
<p>列表控件Listview：</p>
<h2 id="Flexbox_u5E03_u5C40"><a href="#Flexbox_u5E03_u5C40" class="headerlink" title="Flexbox布局"></a>Flexbox布局</h2><p><img src="http://www.th7.cn/d/file/p/2016/08/30/532c0a8f1bc8b3d4037a61d7efc61d36.jpg" alt=""></p>
<h3 id="u4EC0_u4E48_u4E8BFlexbox"><a href="#u4EC0_u4E48_u4E8BFlexbox" class="headerlink" title="什么事Flexbox"></a>什么事Flexbox</h3><p>Flexbox是css 3中引入的布局模型“弹性盒子模型”，通过弹性的方式来对齐和分布容器中的内容空间，使其能够适应不同屏幕的宽度。React Native中Flexbox是这个规范的子集。</p>
<h3 id="u89E3_u51B3_u95EE_u9898"><a href="#u89E3_u51B3_u95EE_u9898" class="headerlink" title="解决问题"></a>解决问题</h3><p>浮动布局<br>不同宽度屏幕的适配<br>宽度自动分配<br>水平垂直居中</p>
<h3 id="u76F8_u5173_u8D44_u6599_uFF1A"><a href="#u76F8_u5173_u8D44_u6599_uFF1A" class="headerlink" title="相关资料："></a>相关资料：</h3><p><a href="https://github.com/facebook/react-native" title="A framework for building native apps with React." target="_blank" rel="external">facebook/react-native</a><br><a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="external">A Complete Guide to Flexbox</a><br><a href="https://github.com/tmallfe/tmallfe.github.io/issues/19" target="_blank" rel="external">react-native 之布局篇</a><br><a href="http://caibaojian.com/flexbox-guide.html" target="_blank" rel="external">flexbox-CSS3弹性盒模型flexbox完整版教程</a><br><a href="http://blog.csdn.net/u014486880/article/details/51385688" target="_blank" rel="external">React-Native之flexbox布局篇</a><br><a href="http://www.lcode.org/react-native/" title="qing" target="_blank" rel="external">React Native专题</a><br><a href="http://godcoder.me/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/React-Native/" title="非著名程序员" target="_blank" rel="external">React Native专题</a></p>
<p><a href="http://www.w3.org/TR/css3-flexbox/" target="_blank" rel="external">Flexbox in the CSS specifications</a><br><a href="https://developer.mozilla.org/en-US/docs/CSS/Tutorials/Using_CSS_flexible_boxes" target="_blank" rel="external">Flexbox at MDN</a><br><a href="http://dev.opera.com/articles/view/flexbox-basics/" target="_blank" rel="external">Flexbox at Opera</a><br><a href="http://weblog.bocoup.com/dive-into-flexbox/" target="_blank" rel="external">Diving into Flexbox by Bocoup</a><br><a href="http://css-tricks.com/using-flexbox/" target="_blank" rel="external">Mixing syntaxes for best browser support on CSS-Tricks</a><br><a href="http://www.alsacreations.com/tuto/lire/1493-css3-flexbox-layout-module.html" target="_blank" rel="external">Flexbox by Raphael Goetter (FR)</a><br><a href="http://bennettfeely.com/flexplorer/" target="_blank" rel="external">Flexplorer by Bennett Feely</a><br><a href="http://devbryce.com/site/flexbox/" target="_blank" rel="external">http://devbryce.com/site/flexbox/</a><br><a href="http://css.doyoe.com/properties/flex/index.htm" target="_blank" rel="external">http://css.doyoe.com/properties/flex/index.htm</a><br><a href="http://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="external">http://css-tricks.com/snippets/css/a-guide-to-flexbox/</a><br><a href="http://facebook.github.io/react-native/docs/style.html" target="_blank" rel="external">样式测试</a></p>
<h2 id="ES6_u8BED_u6CD5_u95EE_u9898"><a href="#ES6_u8BED_u6CD5_u95EE_u9898" class="headerlink" title="ES6语法问题"></a>ES6语法问题</h2><p><a href="http://www.infoq.com/cn/articles/es6-in-depth-let-and-const/" target="_blank" rel="external">深入浅出ES6（十四）：let和const</a><br><a href="&quot;&quot;"></a></p>
<h2 id="u95EE_u9898_uFF1A_u9996_u9875_u767D_u5C4F"><a href="#u95EE_u9898_uFF1A_u9996_u9875_u767D_u5C4F" class="headerlink" title="问题：首页白屏"></a>问题：首页白屏</h2><p><a href="https://segmentfault.com/a/1190000004743424" target="_blank" rel="external">ReactNative安卓首屏白屏优化</a></p>
<h2 id="react-native_u5B66_u4E60_u5217_u8868"><a href="#react-native_u5B66_u4E60_u5217_u8868" class="headerlink" title="react-native学习列表"></a>react-native学习列表</h2><p>收集了react-native一些学习资源，列表会继续更新，大家有好的资源欢迎Pull Requests！</p>
<h3 id="u5B98_u65B9_u6587_u6863"><a href="#u5B98_u65B9_u6587_u6863" class="headerlink" title="官方文档"></a>官方文档</h3><p><a href="http://facebook.github.io/react-native/" title="English" target="_blank" rel="external">React Native</a><br><a href="http://reactnative.cn/" title="最专业的翻译，最及时的资讯，最火爆的社区" target="_blank" rel="external">React Native 中文网</a><br><a href="https://www.youtube.com/watch?v=KVZ-P-ZI6W4" target="_blank" rel="external">官方视频</a><br><a href="https://github.com/joggerplus/ReactNativeRollingExamples/blob/master/react-native_Study_List.md" target="_blank" rel="external">react-native学习列表</a><br><a href="https://github.com/vczero/react-native-lesson" target="_blank" rel="external">React-Native入门指南</a><br><a href="http://www.tuicool.com/articles/zaInUbA" target="_blank" rel="external">整理了一份React-Native学习指南</a><br><a href="http://www.cocoachina.com/ios/20150408/11513.html" target="_blank" rel="external">深入浅出 React Native：使用 JavaScript 构建原生应用</a></p>
<p><a href="http://segmentfault.com/blog/cnsnake11_react_native" title="segmentfault" target="_blank" rel="external">React Native系列文章</a><br><a href="http://gold.xitu.io/#/tag/React%20Native" title="掘金" target="_blank" rel="external">React Native系列文章</a><br><a href="http://bbs.reactnative.cn/" target="_blank" rel="external">React Native中文社区</a><br><a href="https://github.com/tmallfe/tmallfe.github.io/issues" target="_blank" rel="external">天猫前端</a></p>
<p><a href="https://js.coach/react-native/" target="_blank" rel="external">React-native组件库</a><br><a href="http://reactnativemodules.com/" target="_blank" rel="external">React Native Modules</a></p>
<h4 id="u5E93"><a href="#u5E93" class="headerlink" title="库"></a>库</h4><p><a href="https://github.com/ptmt/react-native-desktop" title="通过React Native构建macOS app" target="_blank" rel="external">react-native-desktop</a><br><a href="https://github.com/Microsoft/react-native-code-push" title="微软出的热更新平台" target="_blank" rel="external">react-native-code-push</a><br><a href="https://github.com/wix/react-native-invoke" title="从JS调用native的代码而不需要任何的封装" target="_blank" rel="external">react-native-invoke</a> </p>
<h3 id="u76F8_u5173_u4E66_u7C4D"><a href="#u76F8_u5173_u4E66_u7C4D" class="headerlink" title="相关书籍"></a>相关书籍</h3><p><a href="http://es6.ruanyifeng.com/" title="阮一峰" target="_blank" rel="external">ECMAScript 6入门</a><br><a href="http://bbs.reactnative.cn/topic/15/react-react-native-%E7%9A%84es5-es6%E5%86%99%E6%B3%95%E5%AF%B9%E7%85%A7%E8%A1%A8" target="_blank" rel="external">React/React Native 的ES5 ES6写法对照表</a></p>
<h3 id="u6559_u7A0B"><a href="#u6559_u7A0B" class="headerlink" title="教程"></a>教程</h3><p><a href="https://github.com/jondot/awesome-react-native" target="_blank" rel="external">awesome-react-native</a><br><a href="https://github.com/sivan/javascript-style-guide" target="_blank" rel="external">Airbnb JavaScript Style Guide 中文版</a><br><a href="http://www.ruanyifeng.com/blog/2015/03/react.html" target="_blank" rel="external">React 入门实例教程-阮一峰</a><br><a href="http://reactjs.cn/" target="_blank" rel="external">ReactJS中文文档</a><br><a href="https://github.com/ele828/react-native-guide" title=":React Native指南汇集了react-native学习资源与各类开源app" target="_blank" rel="external">react-native-guide</a><br><a href="https://github.com/vczero/react-native-lesson" title=":React Native入门指南" target="_blank" rel="external">React-Native-lesson</a><br><a href="https://github.com/WildDylan/ReactNativeDemo" target="_blank" rel="external">ReactNativeDemo</a><br><a href="http://javascript.ruanyifeng.com/nodejs/npm.html" target="_blank" rel="external">npm模块管理器</a><br><a href="http://www.gruntjs.net/getting-started" target="_blank" rel="external">快速入门-Grunt中文网</a><br><a href="http://camsong.github.io/redux-in-chinese/" target="_blank" rel="external">Redux 中文文档</a><br><a href="http://reactjs.cn/react/docs/flux-overview.html" target="_blank" rel="external">reactjs.cn - Flux应用架构</a><br><a href="https://github.com/cnsnake11/blog" target="_blank" rel="external">cnsnake11研究react-native的blog</a><br><a href="http://www.jianshu.com/p/28e9c7957d0c" target="_blank" rel="external">Facebook F8App-ReactNative项目源码分析系列</a><br><a href="https://github.com/Kennytian/learning-react-native" target="_blank" rel="external">React Native 学习笔记</a><br><a href="http://f8-app.liaohuqiu.net/" target="_blank" rel="external">构建 F8 App / React Native 开发指南</a><br><a href="https://github.com/Code-T/salon-resources/tree/master/%E5%8C%97%E4%BA%AC%202016:05:28" target="_blank" rel="external">React Native：移动开发时代的巴别塔 - 专题分享</a></p>
<h3 id="u6587_u7AE0"><a href="#u6587_u7AE0" class="headerlink" title="文章"></a>文章</h3><p><a href="http://www.w3cplus.com/css3/a-guide-to-flexbox.html" target="_blank" rel="external">一个完整的Flexbox指南</a><br><a href="http://reactjs.cn/react/docs/component-specs.html" target="_blank" rel="external">组件的详细说明和生命周期（Component Specs and Lifecycle）</a><br><a href="http://reactjs.cn/react/tips/if-else-in-JSX.html&quot;&quot;" target="_blank" rel="external">JSX 中的 If-Else</a></p>
<p><a href="http://reactjs.cn/react/tips/communicate-between-components.html" target="_blank" rel="external">组件间的通信</a><br><a href="https://developer.mozilla.org/cn/docs/Web/JavaScript/Closures" target="_blank" rel="external">mozilla-闭包</a><br><a href="https://github.com/ericdum/mujiang.info/issues/6" target="_blank" rel="external">npm的package.json中文文档</a><br><a href="http://bluereader.org/article/73541139" target="_blank" rel="external">快来使用ECMAScript 2015吧</a><br><a href="http://lijianfei.sinaapp.com/?p=888" title="关于组件生命周期的讲得特别到位" target="_blank" rel="external">React-Native学习技术的三部曲</a><br><a href="http://bbs.reactnative.cn/topic/20/%E6%96%B0%E6%89%8B%E7%90%86%E8%A7%A3navigator%E7%9A%84%E6%95%99%E7%A8%8B" title="对于Navigator讲解的特别详细" target="_blank" rel="external">新手理解Navigator的教程</a><br><a href="http://bbs.reactnative.cn/topic/15/eact-react-native-%E7%9A%84es5-es6%E5%86%99%E6%B3%95%E5%AF%B9%E7%85%A7%E8%A1%A8" target="_blank" rel="external">React/React Native 的ES5 ES6写法对照表</a></p>
<p><a href="http://f2e.souche.com/blog/-ge-san-duan-kai-fa-zhe-yan-zhong-de-react-native/" title="对react-native从各个层面有一个比较深入的见解" target="_blank" rel="external">一个“三端”开发者眼中的React Native</a><br><a href="https://github.com/jabez128/jabez128.github.io/issues/1" target="_blank" rel="external">“指尖上的魔法” – 谈谈React-Native中的手势</a><br><a href="http://segmentfault.com/a/1190000004161358" title="包括Flux、Reflux、Redux" target="_blank" rel="external">ReactNative的组件架构设计</a><br><a href="http://www.jianshu.com/p/2c43860b0532" target="_blank" rel="external">在react-native中使用redux</a><br><a href="http://browniefed.com/blog/react-native-how-to-bridge-an-objective-c-view-component/" target="_blank" rel="external">怎么样桥接一个objective-c的视图组件</a></p>
<h4 id="u4E8B_u4EF6"><a href="#u4E8B_u4EF6" class="headerlink" title="事件"></a>事件</h4><p><a href="http://bbs.reactnative.cn/topic/480/%E5%AE%89%E5%8D%93back%E9%94%AE%E7%9A%84%E5%A4%84%E7%90%86-%E5%9F%BA%E6%9C%AC-%E9%AB%98%E7%BA%A7%E7%AF%87" target="_blank" rel="external">安卓Back键的处理·基本+高级篇</a></p>
<h4 id="u97F3_u89C6_u9891_u76F8_u673A"><a href="#u97F3_u89C6_u9891_u76F8_u673A" class="headerlink" title="音视频相机"></a>音视频相机</h4><p><a href="http://gold.xitu.io/post/581755be2f301e005ce78a18?utm_source=gold_browser_extension" title="二维码扫描组件" target="_blank" rel="external">React Native 实现二维码扫描</a><br><a href="https://github.com/ideacreation/react-native-barcodescanner" title="二维码扫描组件" target="_blank" rel="external">react-native-barcodescanner</a><br><a href="https://github.com/lwansbrough/react-native-camera" title="相机组件" target="_blank" rel="external">react-native-camera</a><br><a href="https://github.com/marcshilling/react-native-image-picker" title="可以从相机或者相册选择图片" target="_blank" rel="external">react-native-image-picker</a>  </p>
<h4 id="u56FE_u5F62_u52A8_u753B"><a href="#u56FE_u5F62_u52A8_u753B" class="headerlink" title="图形动画"></a>图形动画</h4><h4 id="u89C6_u56FE"><a href="#u89C6_u56FE" class="headerlink" title="视图"></a>视图</h4><p><a href="https://github.com/ide/react-native-button" title="按钮，因为react-native没有提供button" target="_blank" rel="external">react-native-button</a><br><a href="https://github.com/skv-headless/react-native-scrollable-tab-view" title="滑动的tab视图" target="_blank" rel="external">react-native-scrollable-tab-view</a> </p>
<h4 id="listview"><a href="#listview" class="headerlink" title="listview"></a>listview</h4><p><a href="https://github.com/sghiassy/react-native-sglistview" title="性能优化的listview" target="_blank" rel="external">react-native-sglistview</a><br><a href="https://github.com/aksonov/react-native-tableview" title="桥接了原生的UITableView" target="_blank" rel="external">react-native-tableview</a> </p>
<h3 id="u9879_u76EE"><a href="#u9879_u76EE" class="headerlink" title="项目"></a>项目</h3><h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><p><a href="https://github.com/lixinso/html5" target="_blank" rel="external">HTML5 CSS3 code sample</a><br><a href="https://github.com/dsibiski/react-native-hybrid-app-examples" title="iOS原生项目集成react-native的示例项目" target="_blank" rel="external">react-native-hybrid-app-examples</a><br><a href="https://github.com/ninty90/react-native-redux-demo" title="react-native使用redux的demo，结合这篇文章看效果更好，" target="_blank" rel="external">react-native-redux-demo</a><br><a href="http://www.jianshu.com/p/2c43860b0532" target="_blank" rel="external">react-native中使用redux</a></p>
<h4 id="Design"><a href="#Design" class="headerlink" title="Design"></a>Design</h4><p><a href="https://github.com/Bob1993/React-Native-Gank" title="低俗无聊的扎设计，看看代码德勒" target="_blank" rel="external">React-Native-Gank</a><br><a href="https://github.com/fbsamples/f8app" title="facebook 官方f8 app" target="_blank" rel="external">f8app</a><br><a href="https://github.com/joemaddalone/react-native-todo" title="一个简单的to do 应用程序 jast IOS" target="_blank" rel="external">react-native-todo</a><br><a href="https://github.com/soliury/noder-react-native" title="Noder-cnodejs客户端" target="_blank" rel="external">noder-react-native</a><br><a href="https://github.com/7kfpun/FinanceReactNative" title="Finance - 股票报价app" target="_blank" rel="external">FinanceReactNative</a><br><a href="https://github.com/benoitvallon/react-native-nw-react-calculator" title="iOS/Android、Web、桌面多端的计算器app" target="_blank" rel="external">react-native-nw-react-calculator</a></p>
<h4 id="Mode"><a href="#Mode" class="headerlink" title="Mode"></a>Mode</h4><p><a href="https://github.com/leecade/react-native-swiper" title="The best Swiper component for React Native." target="_blank" rel="external">react-native-swiper</a></p>
<h3 id="u5DE5_u5177"><a href="#u5DE5_u5177" class="headerlink" title="工具"></a>工具</h3><p><a href="https://github.com/decosoftware/deco-ide" target="_blank" rel="external">开源的react-native IDE</a><br><a href="https://github.com/rnpm/rnpm" title="React Native的包管理器" target="_blank" rel="external">rnpm</a><br><a href="https://github.com/oblador/react-native-vector-icons" title="为React Native集成了很多icon" target="_blank" rel="external">react-native-vector-icons</a><br><a href="https://github.com/reactjs/redux" title="Redux 就是用来确保 state 变化的可预测性，仓库readme中的代码很简洁的描述了redux的内容" target="_blank" rel="external">redux</a><br><a href="https://github.com/reactjs/react-redux" title="官方的React绑定redux" target="_blank" rel="external">react-redux</a><br><a href="https://github.com/gaearon/redux-thunk" title="redux的thunk中间件" target="_blank" rel="external">redux-thunk</a><br><a href="https://github.com/rt2zz/redux-persist" target="_blank" rel="external">redux-persist</a><br><a href="https://github.com/goatslacker/alt" title="flux的实现" target="_blank" rel="external">alt</a></p>
<p><a href="http://blog.csdn.net/liu__520/article/details/52903667" target="_blank" rel="external">携程技术中心React Native Meetup活动经验分享</a></p>
<p><a href="&quot;&quot;"></a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br>]]>
    
    </summary>
    
      <category term="ReactNative" scheme="http://luuman.github.io/tags/ReactNative/"/>
    
      <category term="FrontFrame" scheme="http://luuman.github.io/categories/FrontFrame/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[移动Web解决方案]]></title>
    <link href="http://luuman.github.io/2016/05/08/Induce/Mobile/MobileGuide/"/>
    <id>http://luuman.github.io/2016/05/08/Induce/Mobile/MobileGuide/</id>
    <published>2016-05-08T06:11:20.000Z</published>
    <updated>2016-11-16T01:17:12.000Z</updated>
    <content type="html"><![CDATA[<p>　　最近在系统的学习移动的坑，这里将他整理起来。<br><a id="more"></a></p>
<h2 id="u524D_u6CBF"><a href="#u524D_u6CBF" class="headerlink" title="前沿"></a>前沿</h2><p>这里没有绝对的标准，只是介绍不同的解决方案，从而提高用户体验。</p>
<h2 id="u7EC4_u4EF6_u5316"><a href="#u7EC4_u4EF6_u5316" class="headerlink" title="组件化"></a>组件化</h2><h3 id="u901A_u7528_u7EA6_u5B9A"><a href="#u901A_u7528_u7EA6_u5B9A" class="headerlink" title="通用约定"></a>通用约定</h3><h4 id="u5B57_u4F53_u4F7F_u7528_uFF1A_u4F7F_u7528_u65E0_u886C_u7EBF_u5B57_u4F53"><a href="#u5B57_u4F53_u4F7F_u7528_uFF1A_u4F7F_u7528_u65E0_u886C_u7EBF_u5B57_u4F53" class="headerlink" title="字体使用：使用无衬线字体"></a>字体使用：使用无衬线字体</h4><figure class="highlight css" data-lang=" css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">body</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">font-family</span>:<span class="value"> <span class="string">"Helvetica Neue"</span>, Helvetica, STHeiTi, sans-serif</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="u7EC4_u4EF6_u547D_u540D"><a href="#u7EC4_u4EF6_u547D_u540D" class="headerlink" title="组件命名"></a>组件命名</h4><p>中fn,ui,text为保留字，除在指南中约定之外，建议不在其他场合进行使用，并且凡以此命名的类名，其中所有的数值的设定，皆为非important关键字【规范】</p>
<figure class="highlight stylus" data-lang=" stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fn_clear 清除浮动</span><br><span class="line">fn_left,fn_right 左右浮动</span><br><span class="line">fn_show,fn_hide 显示 <span class="attribute">display</span>:block/隐藏 <span class="attribute">display</span>:<span class="attribute">none</span></span><br><span class="line">text_left,text_center,text_right 文字左中右居中</span><br></pre></td></tr></table></figure>
<h5 id="u51E1_u88ABJS_u4F7F_u7528_u7684_u7C7B_u540D_uFF0C_u5728_u901A_u5E38_u547D_u540D_u524D_u52A0_u4E0AJ__u6216j-_u524D_u7F00_2C_u5728_u540C_u4E00_u4E2A_u9879_u76EE_u91CC_u9700_u8981_u4FDD_u6301_u5F62_u5F0F_u7684_u4E00_u81F4_u6027"><a href="#u51E1_u88ABJS_u4F7F_u7528_u7684_u7C7B_u540D_uFF0C_u5728_u901A_u5E38_u547D_u540D_u524D_u52A0_u4E0AJ__u6216j-_u524D_u7F00_2C_u5728_u540C_u4E00_u4E2A_u9879_u76EE_u91CC_u9700_u8981_u4FDD_u6301_u5F62_u5F0F_u7684_u4E00_u81F4_u6027" class="headerlink" title="凡被JS使用的类名，在通常命名前加上J_或j-前缀,在同一个项目里需要保持形式的一致性"></a>凡被JS使用的类名，在通常命名前加上J_或j-前缀,在同一个项目里需要保持形式的一致性</h5><h4 id="u7279_u5B9A_u6D4F_u89C8_u5668CSS_u5C5E_u6027_u7684_u524D_u7F00"><a href="#u7279_u5B9A_u6D4F_u89C8_u5668CSS_u5C5E_u6027_u7684_u524D_u7F00" class="headerlink" title="特定浏览器CSS属性的前缀"></a>特定浏览器CSS属性的前缀</h4><figure class="highlight mathematica" data-lang=" mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">采用以下两种，-webkit-和-ms-，由于手机只有webkit的内核和微软的IE浏览器。</span><br><span class="line"></span><br><span class="line">-webkit-<span class="list">&#123;prop&#125;</span>:<span class="list">&#123;value&#125;</span></span><br><span class="line">-ms-<span class="list">&#123;prop&#125;</span>:<span class="list">&#123;value&#125;</span></span><br><span class="line"><span class="list">&#123;prop&#125;</span>:<span class="list">&#123;value&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="u901A_u7528_u4E1A_u52A1_u7EC4_u4EF6_u540D_u79F0_uFF0C_u5EFA_u8BAE_u4F7F_u7528_u5982_u4E0B_u7EA6_u5B9A_uFF1A"><a href="#u901A_u7528_u4E1A_u52A1_u7EC4_u4EF6_u540D_u79F0_uFF0C_u5EFA_u8BAE_u4F7F_u7528_u5982_u4E0B_u7EA6_u5B9A_uFF1A" class="headerlink" title="通用业务组件名称，建议使用如下约定："></a>通用业务组件名称，建议使用如下约定：</h4><figure class="highlight stylus" data-lang=" stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">button</span> btn 按钮</span><br><span class="line"><span class="tag">nav</span> 导航</span><br><span class="line">list 列表</span><br><span class="line">paging 分页</span><br><span class="line">tab 标签页</span><br><span class="line">select 下拉框</span><br><span class="line"><span class="tag">input</span> 输入框</span><br><span class="line">group 特性相似的群，与list的区别在于，list有明确的列表布局的特性，group没有其特性</span><br><span class="line"><span class="tag">form</span> 表单</span><br></pre></td></tr></table></figure>
<h4 id="u5E38_u7528_u6A21_u5757_u72B6_u6001_u540D_u79F0"><a href="#u5E38_u7528_u6A21_u5757_u72B6_u6001_u540D_u79F0" class="headerlink" title="常用模块状态名称"></a>常用模块状态名称</h4><figure class="highlight armasm" data-lang=" armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">current</span>    当前模块状态</span><br><span class="line"><span class="keyword">selected </span>   被选中状态</span><br><span class="line"><span class="label">disabled</span>    失效状态</span><br><span class="line"><span class="label">focus</span>    焦点集中状态</span><br><span class="line"><span class="keyword">blur </span>   焦点失去状态</span><br><span class="line"><span class="label">checked</span>    被勾选状态</span><br><span class="line"><span class="label">success</span>    成功状态</span><br><span class="line"><span class="label">error</span>    错误状态</span><br><span class="line"></span><br><span class="line"><span class="label">hover</span> active    手指在模块上状态【讨论】</span><br></pre></td></tr></table></figure>
<h3 id="u547D_u540D_u6307_u5357"><a href="#u547D_u540D_u6307_u5357" class="headerlink" title="命名指南"></a>命名指南</h3><h4 id="u7EC4_u4EF6_u547D_u540D_u662F_u660E_u6670_u7684_uFF0C_u4ECE_u62FC_u5199_u7684_u5355_u8BCD_u80FD_u76F4_u89C2_u7684_u770B_u51FA_u7EC4_u4EF6_u7528_u9014"><a href="#u7EC4_u4EF6_u547D_u540D_u662F_u660E_u6670_u7684_uFF0C_u4ECE_u62FC_u5199_u7684_u5355_u8BCD_u80FD_u76F4_u89C2_u7684_u770B_u51FA_u7EC4_u4EF6_u7528_u9014" class="headerlink" title="组件命名是明晰的，从拼写的单词能直观的看出组件用途"></a>组件命名是明晰的，从拼写的单词能直观的看出组件用途</h4><p>建议不使用缩写，除对字母长度超过6个以上的单词。如果使用缩写建议缩写后的单词在4个字母以上，<br>谨慎使用3个字母及以下的缩写，除非该含义非常清晰可见，并没有歧义，比如说btn，不建议的缩写，例如 ui<br>组件命名采用层次命名的方式，中间采用-为间隔符，层次方式如下</p>
<p>[样式库名称] - [组件名称] (- [组件状态])? (- [子组件名称])? (- [子组件状态])?</p>
<p>例如：<br>amui库中有个list列表，里面有个按钮，当用户点击list中当前被选中的那个item中的按钮的时候，<br>产生一个按上去的效果，这个时候的命名方式建议如下：am-list-current-btn-active</p>
<p>样式库名称建议使用该样式库的名称简写，建议2~4个字母<br>样式库名称不建议使用宽泛且无具体意义的命名，比如说ui等【规范】<br>组件内部的类名需要体现上层的含义，体现的方式没有强行规定，但是可以直观看出</p>
<p>例如：list表中嵌套一个按钮，</p>
<h4 id="u72EC_u7ACB_u7CFB_u7EDF_u91CC_u7EDF_u4E00_u547D_u540D_u98CE_u683C_u3010_u89C4_u8303_u3011"><a href="#u72EC_u7ACB_u7CFB_u7EDF_u91CC_u7EDF_u4E00_u547D_u540D_u98CE_u683C_u3010_u89C4_u8303_u3011" class="headerlink" title="独立系统里统一命名风格【规范】"></a>独立系统里统一命名风格【规范】</h4><p>在一个完整的模块命名方式，对于相同类型的模块命名保持一致，比如说，使用了button作为模块类名之后，后面如果再需用到按钮，不再建议使用btn的方式。</p>
<h2 id="u76EE_u5F55_u7ED3_u6784_u548C_u6587_u4EF6_u547D_u540D_u89C4_u8303"><a href="#u76EE_u5F55_u7ED3_u6784_u548C_u6587_u4EF6_u547D_u540D_u89C4_u8303" class="headerlink" title="目录结构和文件命名规范"></a>目录结构和文件命名规范</h2><p>前端有哪些大小写区分，XHTML区分大小写、HTML不区分大小写、CSS与HTML有关、Javascript区分大小写。由此可以看出，文件建议使用小写加下划线命名。</p>
<p>我们单独一节来说明网站目录结构和命名规范的目的是让我们重视。因为无论你的XHTML、CSS、Javascript写得多熟练多好，而网站的目录结构和其命名是让人和搜索引擎读不懂的。<br>那么网站就没有真正做到标准化，而且整个网站的后期扩展和维护的成本和代价会很大。还有一点需重视就是xhmtl、css、js的代码注意缩进。<br>并保持格式整齐的并且提供注释，保证可阅性。同时为后期编写程序提供良好的开发条件。<br>首先网站的目录结构和文件命名清晰、XHTML里面的元素命名清晰会给SEO带来好处。例如文件的命名，如果使用全拼，那么Google是自动识别拼音进行排名的。关于SEO相关的知识(请参阅公司SEO相关文档)，就不在这里一一阐述了。接下来介绍目录结构和命名规范。</p>
<h3 id="u76EE_u5F55_u7ED3_u6784"><a href="#u76EE_u5F55_u7ED3_u6784" class="headerlink" title="目录结构"></a>目录结构</h3><p>主要分为四类，需要注意的是，所有命名必须为小写英文、下划线，不能大写或中文。</p>
<ol>
<li><p>categorys(目录)<br>目录的命名尽可能使用英文或者全拼表达目录内的页面作用（语义化），需要注意的是不要使用中文词组简拼（eg:目录–&gt;ml）。<br>简拼容易出现重复、或者目录结构复杂的时候容易出现混乱，给后期维护带来很大的麻烦。</p>
</li>
<li><p>css目录命名可以为style、css、skin等，如果网站的目录结构不是很复杂的，尽量把css统一放在跟目录。<br>这样可以方便后期的维护操作。如果网站的目录结构很复杂，层次超过3层以上的，可以在对应的层设置目录页面结构的css。</p>
</li>
<li><p>js目录命名一般用js或scripts，这样一看就知道里面是放js脚本。同样js的目录结构也是和css一样。</p>
</li>
<li><p>images根据网站规模来调整放图片的目录，一般根目录设置的images是存放整站共用的图片（包括图片图标背景等），而各二级三级目录里面也可以设置相应的images目录存放当前级的图片。<br>根据具体的目录规范，做到前后台协商一致！当页面在引用css或者js的时候，大型的门户站点一般会在引用加上版本号或者日期。如：<br>这样的做法是为了维护的时候可以更清晰知道所引用的脚本或样式是什么时候什么版本的。</p>
</li>
</ol>
<h3 id="html_u547D_u540D"><a href="#html_u547D_u540D" class="headerlink" title="html命名"></a>html命名</h3><p>html应遵循页面的内容或用途（SEO）进行命名。不能使用中文词组的简拼进行命名。当使用英文或者中文词组全拼的时候，同样会给SEO带来好处。另外需注意的是，整个网站的html后缀要统一，避免同时出现html、htm两种不同的后缀。</p>
<h3 id="css_u547D_u540D_u53EF_u4EE5_u6309_u7167_u5185_u5BB9_u548C_u529F_u80FD_u8FDB_u884C_u547D_u540D_u3002"><a href="#css_u547D_u540D_u53EF_u4EE5_u6309_u7167_u5185_u5BB9_u548C_u529F_u80FD_u8FDB_u884C_u547D_u540D_u3002" class="headerlink" title="css命名可以按照内容和功能进行命名。"></a>css命名可以按照内容和功能进行命名。</h3><ol>
<li><p>css功能性质一般指：reset.css（重置默认的样式-属性选择符）、global.css(全局使用的类选择符)、<br>common.css(部分页面可共同使用的类选择符)等各种按功能分类的css。一般还可以将连接、段落、颜色等样式分离出来。</p>
</li>
<li><p>布局页面一般指:style.css(全站的整体框架布局)—–index.css(首页的布局)、reg.css(注册页面的布局)。</p>
</li>
<li><p>样式命名采用小写英文字母、数字、中扛线的组合，其中不得包含汉字、空格和特殊字符；多个单词<br>应采用中扛线分割。</p>
</li>
<li><p>样式名称字符不要超过20个,少用拼音写样式，使用限定词诸如（R(ight),L(eft),T(op),B(ottom),M(iddle)，<br>要把限定词放在最后,后缀限定词建议采用缩写形式，从而减少名称长度；</p>
</li>
<li><p>根据样式的性质和功能，将样式分为以下几种：<br>reset.css（重置默认的样式-属性选择符）global.css(全局使用的类选择符) common.css等各种按功能分类的css，各个功能模块页面的样式，视具体情况添加或修改。</p>
</li>
</ol>
<h3 id="js_u547D_u540D"><a href="#js_u547D_u540D" class="headerlink" title="js命名"></a>js命名</h3><p>js命名规范也和css的命名规范差不多，但是分前后台两种js文件，根据前后不用，使用不用的后缀区分。</p>
<ol>
<li><p>功能性质<br>js功能性质一般指:jquery.js(js库或框架)、global.js(全局使用的脚本)、common.js(部分页面需要用的脚本)</p>
</li>
<li><p>针对页面<br>针对某个目录的页面：js_toggle_reg.js,前面的js是为了统一所有针对页面而定出来的。可以根据个人的情况把js改成自己所定义的单词。</p>
</li>
<li>实际命名规范：<br>1、js库或框架文件，如jquery.js，就引用自身的命名。<br>2、与后台交互功能的js文件，命名规则就是:back_+js文件名如验证js：back<em>submitcheck.js3、前端页面效果的js文件，命名规则就是:front</em>+js文件名如焦点图效果js：front_focus.js</li>
</ol>
<h3 id="u56FE_u7247_u7684_u547D_u540D"><a href="#u56FE_u7247_u7684_u547D_u540D" class="headerlink" title="图片的命名"></a>图片的命名</h3><p>首先我们这里需要注意的是，切图的时候，可以去参考一些大型的网站如yahoo等的切图的方法。一般熟练css布局的都会将许多的小图标，背景图片集合到一张图，通过css来控制到具体的元素使用哪个图标或背景。另外目前国外和国内高标准的网站，一般都采用png图使用，但是我们公司根据异步的要求，必须用jpg的图片。图片根据图片的所处的页面位置名称作用来命名。图片的命名规范化更有利于css的编写。可以举几个例子:<br>index_header_navtab_bg.jpg—–字面理解到图片是index页面headher中导航TAB的背景products_content_title_icon.gif—–字面理解为products页面content中标题的iconindex_header_banner_pic.png—–字面理解为index页面header的banner图片<br>只有当图片的名称语义化了，在你写css或者页面需用到图片的时候，可以更快速的找到所需的。如果只是随便的取01.jpg、bg.jpg这类的命名，会给前端开发带来不便，更不用说后期维护了。<br>友情提示：本文中关于《WEB前端开发规范》给出的范例仅供您参考拓展思维使用，WEB前端开发规范：该篇文章建议您自主创作。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　最近在系统的学习移动的坑，这里将他整理起来。<br>]]>
    
    </summary>
    
      <category term="Mobile" scheme="http://luuman.github.io/tags/Mobile/"/>
    
      <category term="Mobile" scheme="http://luuman.github.io/categories/Mobile/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[移动端设备显示限制，隐藏部分内容]]></title>
    <link href="http://luuman.github.io/2016/04/19/Induce/CSS/overflowMore/"/>
    <id>http://luuman.github.io/2016/04/19/Induce/CSS/overflowMore/</id>
    <published>2016-04-19T06:11:20.000Z</published>
    <updated>2016-11-16T01:17:12.000Z</updated>
    <content type="html"><![CDATA[<p>　　<strong>困惑：</strong>移动端的开发，往往没有想象中的那么容易。不仅要考虑适配，还有不同场景的交互。开发手机版时，手机屏幕毕竟有限，文字过多时，往往采用一个折中的方法，将超出盒子width的部分用…代替。 </p>
<a id="more"></a>
<p>通过CSS判断，这个区域宽度</p>
<h3 id="u7701_u7565"><a href="#u7701_u7565" class="headerlink" title="省略"></a>省略</h3><figure class="highlight xml" data-lang=" xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 单行文本溢出 --&gt;</span></span><br><span class="line"></span><br><span class="line">text-overflow: ellipsis;</span><br><span class="line">white-space: nowrap;</span><br><span class="line">overflow: hidden;</span><br></pre></td></tr></table></figure>
<h3 id="u4E00_u884C_u7701_u7565"><a href="#u4E00_u884C_u7701_u7565" class="headerlink" title="一行省略"></a>一行省略</h3><figure class="highlight scss" data-lang=" scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 多行文本溢出 --&gt;</span><br><span class="line"></span><br><span class="line"><span class="attribute">display</span><span class="value">: -webkit-box <span class="important">!important</span>;</span></span><br><span class="line"><span class="attribute">overflow</span><span class="value">: hidden;</span></span><br><span class="line"><span class="attribute">text-overflow</span><span class="value">: ellipsis;</span></span><br><span class="line"><span class="attribute">word-break</span><span class="value">: break-all;</span></span><br><span class="line">-webkit-box-orient<span class="value">: vertical;</span></span><br><span class="line">-webkit-<span class="value">line</span>-clamp<span class="value">: <span class="number">2</span>;</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>　　<strong>困惑：</strong>移动端的开发，往往没有想象中的那么容易。不仅要考虑适配，还有不同场景的交互。开发手机版时，手机屏幕毕竟有限，文字过多时，往往采用一个折中的方法，将超出盒子width的部分用…代替。 </p>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://luuman.github.io/tags/CSS/"/>
    
      <category term="Mobile" scheme="http://luuman.github.io/categories/Mobile/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[OmniMarkupPreviewer]]></title>
    <link href="http://luuman.github.io/2016/04/02/Plug/Sublime/SublimeOmniMarkupPreviewer/"/>
    <id>http://luuman.github.io/2016/04/02/Plug/Sublime/SublimeOmniMarkupPreviewer/</id>
    <published>2016-04-02T06:11:20.000Z</published>
    <updated>2016-11-16T01:17:12.000Z</updated>
    <content type="html"><![CDATA[<p>　　<strong>OmniMarkupPreviewer：</strong>作为 Sublime Text 的一款强大插件，支持将标记语言渲染为 HTML 并在浏览器上实时预览，同时支持导出 HTML 源码文件。</p>
<a id="more"></a>
<h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2><blockquote>
<p>Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。 —— 来自维基百科</p>
</blockquote>
<h2 id="Sublime_Text_3"><a href="#Sublime_Text_3" class="headerlink" title="Sublime Text 3"></a>Sublime Text 3</h2><blockquote>
<p>Sublime Text 作为近些年迅速崛起的后起之秀，凭借其精美的 UI 交互、完备的特色功能俘虏了一大批忠实用户。其风靡之势刺激了一些新老文本编辑器的重新思考和开发，开源实现 Lime Text Editor 无需多说，Github 主导的 Atom 以及号称下一代 Vim 编辑器的 neovim 都明确受到 Sublime Text 的影响。</p>
</blockquote>
<h2 id="OmniMarkupPreviewer"><a href="#OmniMarkupPreviewer" class="headerlink" title="OmniMarkupPreviewer"></a>OmniMarkupPreviewer</h2><blockquote>
<p>作为 Sublime Text 的一款强大插件，支持将标记语言渲染为 HTML 并在浏览器上实时预览，同时支持导出 HTML 源码文件。</p>
</blockquote>
<h3 id="u8BE6_u7EC6_u8BBE_u7F6E"><a href="#u8BE6_u7EC6_u8BBE_u7F6E" class="headerlink" title="详细设置"></a>详细设置</h3><figure class="highlight dust" data-lang=" dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">$</span><span class="expression">&#123;<span class="variable">packages</span>&#125;</span><span class="xml"> 路径为 /Users/ashfinal/Library/Application Support/Sublime Text 3/Packages/</span><br><span class="line"></span><br><span class="line"></span><span class="expression">&#123;</span><br><span class="line">	<span class="string">"server_host"</span>: <span class="string">"192.168.1.100"</span>,</span><br><span class="line">	&lt;!<span class="variable">--</span> 开启预览服务的 <span class="variable">IP</span> 地址, 默认为 <span class="variable">localhost.</span> <span class="variable">--</span>&gt;</span><br><span class="line"></span><br><span class="line">	<span class="string">"browser_command"</span>: [<span class="string">"open"</span>, <span class="string">"-a"</span>, <span class="string">"Google Chrome"</span>, <span class="string">"&#123;url&#125;"</span>],</span><br><span class="line">	&lt;!<span class="variable">--</span> 你完全可以在 <span class="variable">Mac</span> 上编辑 <span class="variable">Markdown</span> 文档，而把 <span class="variable">iPad</span> 当作外接显示器来实时预览 <span class="variable">--</span>&gt;</span><br><span class="line">	/<span class="end-block">/ User public static files should be placed into</span></span><br><span class="line">	/<span class="end-block">/ </span>$&#123;<span class="variable">packages</span>&#125;</span><span class="xml">/User/OmniMarkupPreviewer/public/</span><br><span class="line">	// User templates should be placed into:</span><br><span class="line">	// $</span><span class="expression">&#123;<span class="variable">packages</span>&#125;</span><span class="xml">/User/OmniMarkupPreviewer/templates/</span><br><span class="line">	// Requires browser reload</span><br><span class="line"></span><br><span class="line">	"html_template_name": "Evolution Yellow",</span><br><span class="line">	// list of renderers to be ignored, case sensitive.</span><br><span class="line">	// Valid renderers are: "CreoleRenderer", "MarkdownRenderer", "PodRenderer",</span><br><span class="line">	// "RDocRenderer", "RstRenderer", "TextitleRenderer"</span><br><span class="line">	// for example, to disable Textile and Pod renderer:</span><br><span class="line">	// "ignored_renderers": ["TextitleRenderer", "PodRenderer"]</span><br><span class="line"></span><br><span class="line">	"ignored_renderers": ["CreoleRenderer", "PodRenderer", "RDocRenderer", "TextitleRenderer", "LiterateHaskellRenderer"],</span><br><span class="line"></span><br><span class="line">	"mathjax_enabled": false,</span><br><span class="line">	// MarkdownRenderer options</span><br><span class="line"></span><br><span class="line">	"renderer_options-MarkdownRenderer": </span><span class="expression">&#123;</span><br><span class="line">	/<span class="end-block">/ Valid extensions</span>:</span><br><span class="line">	/<span class="end-block">/ - OFFICIAL </span>(<span class="variable">Python</span> <span class="variable">Markdown</span>) <span class="variable">-</span></span><br><span class="line">	/<span class="end-block">/ </span><span class="string">"extra"</span>: <span class="variable">Combines</span> [<span class="string">"abbr"</span>, <span class="string">"attr_list"</span>, <span class="string">"def_list"</span>, <span class="string">"fenced_code"</span>, <span class="string">"footnotes"</span>, <span class="string">"tables"</span>, <span class="string">"smart_strong"</span>]</span><br><span class="line">	/<span class="end-block">/ For PHP Markdown Extra</span>(<span class="variable">http</span>:/<span class="end-block">/michelf.ca</span><span class="end-block">/projects</span><span class="end-block">/php-markdown</span><span class="end-block">/extra</span>/)</span><br><span class="line">	/<span class="end-block">/ </span><span class="string">"abbr"</span>: <span class="variable">http</span>:/<span class="end-block">/packages.python.org</span><span class="end-block">/Markdown</span><span class="end-block">/extensions</span><span class="end-block">/abbreviations.html</span></span><br><span class="line">	/<span class="end-block">/ </span><span class="string">"attr_list"</span>: <span class="variable">http</span>:/<span class="end-block">/packages.python.org</span><span class="end-block">/Markdown</span><span class="end-block">/extensions</span><span class="end-block">/attr</span>_<span class="variable">list.html</span></span><br><span class="line">	/<span class="end-block">/ </span><span class="string">"def_list"</span>: <span class="variable">http</span>:/<span class="end-block">/packages.python.org</span><span class="end-block">/Markdown</span><span class="end-block">/extensions</span><span class="end-block">/definition</span>_<span class="variable">lists.html</span></span><br><span class="line">	/<span class="end-block">/ </span><span class="string">"fenced_code"</span>: <span class="variable">http</span>:/<span class="end-block">/packages.python.org</span><span class="end-block">/Markdown</span><span class="end-block">/extensions</span><span class="end-block">/fenced</span>_<span class="variable">code</span>_<span class="variable">blocks.html</span></span><br><span class="line">	/<span class="end-block">/ </span><span class="string">"footnotes"</span>: <span class="variable">http</span>:/<span class="end-block">/packages.python.org</span><span class="end-block">/Markdown</span><span class="end-block">/extensions</span><span class="end-block">/footnotes.html</span></span><br><span class="line">	/<span class="end-block">/ </span><span class="string">"tables"</span>: <span class="variable">http</span>:/<span class="end-block">/packages.python.org</span><span class="end-block">/Markdown</span><span class="end-block">/extensions</span><span class="end-block">/tables.html</span></span><br><span class="line">	/<span class="end-block">/ </span><span class="string">"smart_strong"</span>: <span class="variable">http</span>:/<span class="end-block">/packages.python.org</span><span class="end-block">/Markdown</span><span class="end-block">/extensions</span><span class="end-block">/smart</span>_<span class="variable">strong.html</span></span><br><span class="line">	/<span class="end-block">/ </span><span class="string">"codehilite"</span>: <span class="variable">http</span>:/<span class="end-block">/packages.python.org</span><span class="end-block">/Markdown</span><span class="end-block">/extensions</span><span class="end-block">/code</span>_<span class="variable">hilite.html</span></span><br><span class="line">	/<span class="end-block">/ </span><span class="string">"meta"</span>: <span class="variable">http</span>:/<span class="end-block">/packages.python.org</span><span class="end-block">/Markdown</span><span class="end-block">/extensions</span><span class="end-block">/meta</span>_<span class="variable">data.html</span></span><br><span class="line">	/<span class="end-block">/ </span><span class="string">"toc"</span>: <span class="variable">http</span>:/<span class="end-block">/packages.python.org</span><span class="end-block">/Markdown</span><span class="end-block">/extensions</span><span class="end-block">/toc.html</span></span><br><span class="line">	/<span class="end-block">/ </span><span class="string">"nl2br"</span>: <span class="variable">http</span>:/<span class="end-block">/packages.python.org</span><span class="end-block">/Markdown</span><span class="end-block">/extensions</span><span class="end-block">/nl</span>2<span class="variable">br.html</span></span><br><span class="line">	/<span class="end-block">/ - </span>3<span class="variable">RD</span> <span class="variable">PARTY</span> <span class="variable">-</span></span><br><span class="line">	/<span class="end-block">/ </span><span class="string">"strikeout"</span>: <span class="variable">Strikeout</span> <span class="variable">extension</span> <span class="variable">syntax</span> <span class="variable">-</span> `<span class="variable">This</span> ~~<span class="variable">is</span> <span class="variable">deleted</span> <span class="variable">text.</span>~~`</span><br><span class="line">	/<span class="end-block">/ </span><span class="string">"subscript"</span>: <span class="variable">Subscript</span> <span class="variable">extension</span> <span class="variable">syntax</span> <span class="variable">-</span> `<span class="variable">This</span> <span class="variable">is</span> <span class="variable">water</span>: <span class="variable">H</span>~2~<span class="variable">O</span>`</span><br><span class="line">	/<span class="end-block">/ </span><span class="string">"superscript"</span>: <span class="variable">Superscript</span> <span class="variable">extension</span> <span class="variable">syntax</span> 0 `2^10^ = 1024`</span><br><span class="line">	/<span class="end-block">/ </span><span class="string">"smarty"</span> <span class="variable">or</span> <span class="string">"smartypants"</span>: <span class="variable">Python-Markdown</span> <span class="variable">extension</span> <span class="variable">using</span> <span class="variable">smartypants</span> <span class="variable">to</span> <span class="variable">emit</span></span><br><span class="line">	/<span class="end-block">/ typographically nicer </span>(<span class="string">"curly"</span>) <span class="variable">quotes</span>, <span class="variable">proper</span></span><br><span class="line">	/<span class="end-block">/ </span>(<span class="string">"em"</span> <span class="variable">and</span> <span class="string">"en"</span>) <span class="variable">dashes</span>, <span class="variable">etc.</span></span><br><span class="line">	/<span class="end-block">/ See</span>: <span class="variable">http</span>:/<span class="end-block">/daringfireball.net</span><span class="end-block">/projects</span><span class="end-block">/smartypants</span>/</span><br><span class="line">	/<span class="end-block">/ And</span>: <span class="variable">https</span>:/<span class="end-block">/github.com</span><span class="end-block">/waylan</span><span class="end-block">/Python-Markdown</span><span class="end-block">/blob</span><span class="end-block">/master</span><span class="end-block">/docs</span><span class="end-block">/extensions</span><span class="end-block">/smarty.txt</span></span><br><span class="line"></span><br><span class="line">	<span class="string">"extensions"</span>: [<span class="string">"extra"</span>, <span class="string">"codehilite"</span>, <span class="string">"toc"</span>, <span class="string">"strikeout"</span>, <span class="string">"smarty"</span>, <span class="string">"subscript"</span>, <span class="string">"superscript"</span>]</span><br><span class="line">&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure>
<h3 id="u914D_u8272_u7F8E_u5316"><a href="#u914D_u8272_u7F8E_u5316" class="headerlink" title="配色美化"></a>配色美化</h3><p><a href="https://github.com/luuman/sublime-config/blob/master/OmniMarkupPreviewer/public/github.css" title="github.css" target="_blank" rel="external">github.css</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　<strong>OmniMarkupPreviewer：</strong>作为 Sublime Text 的一款强大插件，支持将标记语言渲染为 HTML 并在浏览器上实时预览，同时支持导出 HTML 源码文件。</p>]]>
    
    </summary>
    
      <category term="Sublime" scheme="http://luuman.github.io/tags/Sublime/"/>
    
      <category term="Sublime" scheme="http://luuman.github.io/categories/Sublime/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Input输入框的案例]]></title>
    <link href="http://luuman.github.io/2016/04/02/Induce/JavaScript/JSInputSearch/"/>
    <id>http://luuman.github.io/2016/04/02/Induce/JavaScript/JSInputSearch/</id>
    <published>2016-04-02T06:11:20.000Z</published>
    <updated>2016-11-16T01:17:12.000Z</updated>
    <content type="html"><![CDATA[<p>　　<strong>需求：</strong>由于注册、登陆、信息填写，都需要使用input进行获取，但是自带的样式不够好看，用户体验的需求。</p>
<a id="more"></a>
<h2 id="2-1__u6587_u4EF6_u547D_u540D_u89C4_u5219"><a href="#2-1__u6587_u4EF6_u547D_u540D_u89C4_u5219" class="headerlink" title="2.1  文件命名规则"></a>2.1  文件命名规则</h2>]]></content>
    <summary type="html">
    <![CDATA[<p>　　<strong>需求：</strong>由于注册、登陆、信息填写，都需要使用input进行获取，但是自带的样式不够好看，用户体验的需求。</p>]]>
    
    </summary>
    
      <category term="HTML" scheme="http://luuman.github.io/tags/HTML/"/>
    
      <category term="HTML" scheme="http://luuman.github.io/categories/HTML/"/>
    
  </entry>
  
</feed>
